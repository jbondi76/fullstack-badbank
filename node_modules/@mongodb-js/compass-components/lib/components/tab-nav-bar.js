"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabNavBar = void 0;
const react_1 = __importDefault(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const palette_1 = require("@leafygreen-ui/palette");
const use_theme_1 = require("../hooks/use-theme");
const leafygreen_1 = require("./leafygreen");
const containerStyles = (0, emotion_1.css)({
    flexGrow: 1,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'stretch',
    overflow: 'hidden',
});
const tabsContainerStyles = (0, emotion_1.css)({
    flex: 'none',
    padding: `0 ${tokens_1.spacing[3]}px`,
});
const tabsContainerDarkStyles = (0, emotion_1.css)({
    background: palette_1.palette.black,
});
const tabsContainerLightStyles = (0, emotion_1.css)({
    background: palette_1.palette.white,
});
const tabStyles = (0, emotion_1.css)({
    display: 'flex',
    flex: 1,
    minHeight: 0,
});
const hiddenStyles = (0, emotion_1.css)({
    display: 'none',
});
function TabNavBar({ 'data-testid': dataTestId, 'aria-label': ariaLabel, activeTabIndex, tabNames, tabLabels, views, onTabClicked, }) {
    const darkMode = (0, use_theme_1.useDarkMode)();
    return (react_1.default.createElement("div", { className: containerStyles },
        react_1.default.createElement("div", { className: (0, emotion_1.cx)(tabsContainerStyles, darkMode ? tabsContainerDarkStyles : tabsContainerLightStyles) },
            react_1.default.createElement(leafygreen_1.Tabs, { "data-testid": dataTestId, "aria-label": ariaLabel, className: "test-tab-nav-bar-tabs", setSelected: onTabClicked, selected: activeTabIndex }, tabLabels.map((tab, idx) => (react_1.default.createElement(leafygreen_1.Tab, { className: "test-tab-nav-bar-tab", key: `tab-${idx}`, "data-testid": `${tabNames[idx]}-tab-button`, name: react_1.default.createElement("span", null, tab) }))))),
        views.map((view, idx) => idx === activeTabIndex && (react_1.default.createElement("div", { className: (0, emotion_1.cx)({
                [tabStyles]: true,
                [hiddenStyles]: idx !== activeTabIndex,
            }), key: `tab-content-${tabNames[idx]}`, "data-testid": `${tabNames[idx]
                .toLowerCase()
                .replace(/ /g, '-')}-content` }, view)))));
}
exports.TabNavBar = TabNavBar;
//# sourceMappingURL=tab-nav-bar.js.map