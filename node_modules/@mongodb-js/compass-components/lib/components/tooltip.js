"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
const tooltip_1 = require("@react-stately/tooltip");
const tooltip_2 = require("@react-aria/tooltip");
const react_1 = __importStar(require("react"));
const tooltip_3 = __importDefault(require("@leafygreen-ui/tooltip"));
const merge_props_1 = require("../utils/merge-props");
const use_stacked_component_1 = require("../hooks/use-stacked-component");
const UnWrappedTooltip = ({ isDisabled, triggerOn, delay, trigger, children, ...rest }) => {
    const ref = (0, react_1.useRef)(null);
    const tooltipState = (0, tooltip_1.useTooltipTriggerState)({
        isDisabled,
        trigger: triggerOn,
        delay,
    });
    const { triggerProps, tooltipProps } = (0, tooltip_2.useTooltipTrigger)({ isDisabled, trigger: triggerOn }, tooltipState, ref);
    const setOpen = (0, react_1.useCallback)((isOpen) => {
        if (isOpen) {
            tooltipState.open();
        }
        else {
            tooltipState.close();
        }
    }, [tooltipState]);
    return (react_1.default.createElement(tooltip_3.default, { open: !isDisabled && tooltipState.isOpen, setOpen: setOpen, trigger: ({ children, className }) => {
            return trigger((0, merge_props_1.mergeProps)({ children, className }, triggerProps));
        }, ...rest, ...tooltipProps }, children));
};
const Tooltip = (0, use_stacked_component_1.withStackedComponentPopoverStyles)(UnWrappedTooltip);
exports.Tooltip = Tooltip;
//# sourceMappingURL=tooltip.js.map