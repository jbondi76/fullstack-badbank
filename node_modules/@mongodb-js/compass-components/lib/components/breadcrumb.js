"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Breadcrumbs = void 0;
const react_1 = __importStar(require("react"));
const tokens_1 = require("@leafygreen-ui/tokens");
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const use_theme_1 = require("../hooks/use-theme");
const leafygreen_1 = require("./leafygreen");
const breadcrumbStyles = (0, emotion_1.css)({
    display: 'flex',
    gap: tokens_1.spacing[1],
    alignItems: 'center',
    minWidth: 0,
});
const itemLightStyles = (0, emotion_1.css)({
    color: palette_1.palette.green.dark2,
});
const itemDarkStyles = (0, emotion_1.css)({
    color: palette_1.palette.green.base,
});
const breadcrumbButtonStyles = (0, emotion_1.css)({
    border: 'none',
    background: 'none',
    padding: 0,
    display: 'block',
});
const textStyles = (0, emotion_1.css)({
    fontWeight: 'bold',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
});
const lastItemStylesLight = (0, emotion_1.css)({
    color: palette_1.palette.gray.dark1,
});
const lastItemStylesDark = (0, emotion_1.css)({
    color: palette_1.palette.gray.base,
});
const iconStyles = (0, emotion_1.css)({
    flexShrink: 0,
});
const Breadcrumbs = ({ items, className, }) => {
    const darkMode = (0, use_theme_1.useDarkMode)();
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(breadcrumbStyles, className), "data-testid": "breadcrumbs" }, items.map((item, index) => {
        const isLast = index === items.length - 1;
        if (isLast) {
            return (react_1.default.createElement(leafygreen_1.Body, { key: item.name, className: (0, emotion_1.cx)(textStyles, darkMode ? lastItemStylesDark : lastItemStylesLight) }, item.name));
        }
        return (react_1.default.createElement(react_1.Fragment, { key: item.name },
            react_1.default.createElement(leafygreen_1.Link, { as: "button", hideExternalIcon: true, className: (0, emotion_1.cx)(breadcrumbButtonStyles, textStyles), onClick: item.onClick, title: item.name },
                react_1.default.createElement(leafygreen_1.Body, { className: (0, emotion_1.cx)(textStyles, darkMode ? itemDarkStyles : itemLightStyles) }, item.name)),
            react_1.default.createElement(leafygreen_1.Icon, { glyph: "ChevronRight", size: "small", color: palette_1.palette.gray.light1, className: iconStyles })));
    })));
};
exports.Breadcrumbs = Breadcrumbs;
//# sourceMappingURL=breadcrumb.js.map