"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackPopover = void 0;
const react_1 = __importStar(require("react"));
const guide_cue_1 = require("@leafygreen-ui/guide-cue");
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const utils_1 = require("@react-aria/utils");
const leafygreen_1 = require("./leafygreen");
const use_stacked_component_1 = require("../hooks/use-stacked-component");
const LGGuideCue = (0, use_stacked_component_1.withStackedComponentPopoverStyles)(guide_cue_1.GuideCue);
const guideCueStyles = (0, emotion_1.css)({
    minWidth: tokens_1.spacing[7] * 4,
});
const FeedbackPopover = ({ onSubmitFeedback, label, placeholder, setOpen, refEl, open, ...props }) => {
    const [feedbackText, setFeedbackText] = (0, react_1.useState)('');
    const feedbackPopoverId = (0, utils_1.useId)();
    (0, react_1.useEffect)(() => {
        if (!open) {
            return;
        }
        const listener = (event) => {
            const popover = document.querySelector(`[data-popoverid="feedback-popover-${feedbackPopoverId}"]`);
            if (!popover) {
                return;
            }
            if (event.composedPath().includes(popover) ||
                event.composedPath().includes(refEl.current)) {
                return;
            }
            onSubmitFeedback('');
            setOpen(false);
        };
        document.addEventListener('mousedown', listener);
        return () => {
            document.removeEventListener('mousedown', listener);
        };
    }, [feedbackPopoverId, open, setOpen, refEl]);
    const onTextAreaKeyDown = (0, react_1.useCallback)((evt) => {
        if (evt.key === 'Enter' && !evt.shiftKey) {
            evt.preventDefault();
            onSubmitFeedback(feedbackText);
        }
        else if (evt.key === 'Escape') {
            evt.preventDefault();
            onSubmitFeedback('');
            setOpen(false);
        }
    }, [feedbackText, setOpen, onSubmitFeedback]);
    return (react_1.default.createElement(LGGuideCue, { tooltipClassName: guideCueStyles, numberOfSteps: 1, currentStep: 1, "data-popoverid": `feedback-popover-${feedbackPopoverId}`, title: "", tooltipAlign: "bottom", refEl: refEl, onPrimaryButtonClick: () => onSubmitFeedback(feedbackText), buttonText: "Submit", setOpen: setOpen, open: open, ...props },
        react_1.default.createElement(leafygreen_1.TextArea, { label: label, "data-testid": "feedback-popover-textarea", placeholder: placeholder, value: feedbackText, onChange: (event) => setFeedbackText(event.target.value), onKeyDown: onTextAreaKeyDown })));
};
exports.FeedbackPopover = FeedbackPopover;
//# sourceMappingURL=feedback-popover.js.map