"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconButton = exports.Button = exports.Link = exports.useRequiredURLSearchParams = exports.urlWithUtmParams = exports.RequiredURLSearchParamsProvider = void 0;
const react_1 = __importStar(require("react"));
const typography_1 = require("@leafygreen-ui/typography");
const button_1 = __importDefault(require("@leafygreen-ui/button"));
const icon_button_1 = __importDefault(require("@leafygreen-ui/icon-button"));
const RequiredURLSearchParamsContext = react_1.default.createContext({});
const RequiredURLSearchParamsProvider = ({ utmSource, utmMedium, children }) => {
    const value = {
        utmSource,
        utmMedium,
    };
    return (react_1.default.createElement(RequiredURLSearchParamsContext.Provider, { value: value }, children));
};
exports.RequiredURLSearchParamsProvider = RequiredURLSearchParamsProvider;
const urlWithUtmParams = (urlString, { utmSource, utmMedium }) => {
    try {
        const url = new URL(urlString);
        const urlShouldHaveUtmParams = /^(.*\.)?mongodb\.com$/.test(url.hostname);
        if (urlShouldHaveUtmParams) {
            if (utmSource && !url.searchParams.has('utm_source')) {
                url.searchParams.set('utm_source', utmSource);
            }
            if (utmMedium && !url.searchParams.has('utm_medium')) {
                url.searchParams.set('utm_medium', utmMedium);
            }
        }
        return url.toString();
    }
    catch {
        return urlString;
    }
};
exports.urlWithUtmParams = urlWithUtmParams;
function useRequiredURLSearchParams() {
    return (0, react_1.useContext)(RequiredURLSearchParamsContext);
}
exports.useRequiredURLSearchParams = useRequiredURLSearchParams;
exports.Link = (({ href, children, ...rest }) => {
    const { utmSource, utmMedium } = useRequiredURLSearchParams();
    const hrefWithParams = (0, react_1.useMemo)(() => {
        if (href) {
            return (0, exports.urlWithUtmParams)(href, { utmSource, utmMedium });
        }
        return undefined;
    }, [href, utmSource, utmMedium]);
    return (react_1.default.createElement(typography_1.Link, { href: hrefWithParams, ...rest }, children));
});
exports.Button = (0, react_1.forwardRef)(({ href, children, ...rest }, ref) => {
    const { utmSource, utmMedium } = useRequiredURLSearchParams();
    const hrefWithParams = (0, react_1.useMemo)(() => {
        if (href) {
            return (0, exports.urlWithUtmParams)(href, { utmSource, utmMedium });
        }
        return undefined;
    }, [href, utmSource, utmMedium]);
    return (react_1.default.createElement(button_1.default, { href: hrefWithParams, ...rest, ref: ref }, children));
});
exports.IconButton = (0, react_1.forwardRef)(({ href, children, ...rest }, ref) => {
    const { utmSource, utmMedium } = useRequiredURLSearchParams();
    const hrefWithParams = (0, react_1.useMemo)(() => {
        if (href) {
            return (0, exports.urlWithUtmParams)(href, { utmSource, utmMedium });
        }
        return undefined;
    }, [href, utmSource, utmMedium]);
    return (react_1.default.createElement(icon_button_1.default, { href: hrefWithParams, ...rest, ref: ref }, children));
});
//# sourceMappingURL=link.js.map