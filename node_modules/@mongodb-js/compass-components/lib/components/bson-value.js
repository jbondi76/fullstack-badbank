"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BSONValueContainer = void 0;
const react_1 = __importStar(require("react"));
const bson_1 = require("bson");
const code_1 = require("@leafygreen-ui/code");
const leafygreen_1 = require("./leafygreen");
const tokens_1 = require("@leafygreen-ui/tokens");
const emotion_1 = require("@leafygreen-ui/emotion");
const use_theme_1 = require("../hooks/use-theme");
function truncate(str, length = 70) {
    const truncated = str.slice(0, length);
    return length < str.length ? `${truncated}â€¦` : str;
}
const VALUE_COLOR_BY_THEME_AND_TYPE = {
    [use_theme_1.Theme.Dark]: {
        Int32: code_1.variantColors.dark[9],
        Double: code_1.variantColors.dark[9],
        Decimal128: code_1.variantColors.dark[9],
        Date: code_1.variantColors.dark[9],
        Boolean: code_1.variantColors.dark[10],
        String: code_1.variantColors.dark[7],
        ObjectId: code_1.variantColors.dark[5],
    },
    [use_theme_1.Theme.Light]: {
        Int32: code_1.variantColors.light[9],
        Double: code_1.variantColors.light[9],
        Decimal128: code_1.variantColors.light[9],
        Date: code_1.variantColors.light[9],
        Boolean: code_1.variantColors.light[10],
        String: code_1.variantColors.light[7],
        ObjectId: code_1.variantColors.light[5],
    },
};
const bsonValue = (0, emotion_1.css)({
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
});
const bsonValuePrewrap = (0, emotion_1.css)({
    whiteSpace: 'pre-wrap',
});
const BSONValueContainer = ({ type, children, className, ...props }) => {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const color = (0, react_1.useMemo)(() => {
        if (!type) {
            return;
        }
        return VALUE_COLOR_BY_THEME_AND_TYPE[darkMode ? use_theme_1.Theme.Dark : use_theme_1.Theme.Light][type];
    }, [type, darkMode]);
    return (react_1.default.createElement("div", { ...props, className: (0, emotion_1.cx)(className, bsonValue, type === 'String' && bsonValuePrewrap, `element-value element-value-is-${type ? type.toLowerCase() : 'unknown'}`), style: { color } }, children));
};
exports.BSONValueContainer = BSONValueContainer;
const nonSelectable = (0, emotion_1.css)({
    userSelect: 'none',
});
const encryptedHelpLinkStyle = (0, emotion_1.css)({
    color: 'inherit',
    marginLeft: tokens_1.spacing[1],
});
const ObjectIdValue = ({ value, }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return String(value);
    }, [value]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: "ObjectId", title: stringifiedValue },
        react_1.default.createElement("span", { className: nonSelectable }, "ObjectId('"),
        stringifiedValue,
        react_1.default.createElement("span", { className: nonSelectable }, "')")));
};
const BinaryValue = ({ value, }) => {
    const { stringifiedValue, title, additionalHints } = (0, react_1.useMemo)(() => {
        if (value.sub_type === bson_1.Binary.SUBTYPE_ENCRYPTED) {
            return {
                stringifiedValue: '*********',
                title: 'Encrypted',
                additionalHints: (react_1.default.createElement(leafygreen_1.Link, { className: encryptedHelpLinkStyle, hideExternalIcon: true, href: "https://www.mongodb.com/docs/compass/current/in-use-encryption-tutorial/", "aria-label": "Compass In-Use Encryption documentation", title: "Compass In-Use Encryption documentation", "data-testid": "bson-value-in-use-encryption-docs-link" },
                    react_1.default.createElement(leafygreen_1.Icon, { size: "small", glyph: "QuestionMarkWithCircle" }))),
            };
        }
        if (value.sub_type === bson_1.Binary.SUBTYPE_UUID) {
            let uuid;
            try {
                uuid = value.toUUID().toString();
            }
            catch {
                uuid = value.toString('hex');
            }
            return { stringifiedValue: `UUID('${uuid}')` };
        }
        return {
            stringifiedValue: `Binary.createFromBase64('${truncate(value.toString('base64'), 100)}', ${value.sub_type})`,
        };
    }, [value]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: "Binary", title: title ?? stringifiedValue },
        stringifiedValue,
        additionalHints));
};
const CodeValue = ({ value, }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `Code('${String(value.code)}'${value.scope ? `, ${JSON.stringify(value.scope)}` : ''})`;
    }, [value.code, value.scope]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: "Code", title: stringifiedValue }, stringifiedValue));
};
const DateValue = ({ value, }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        try {
            return new Date(value).toISOString().replace('Z', '+00:00');
        }
        catch {
            return String(value);
        }
    }, [value]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: "Date", title: stringifiedValue }, stringifiedValue));
};
const NumberValue = ({ type, value }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return String(value.valueOf());
    }, [value]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: type, title: stringifiedValue }, stringifiedValue));
};
const StringValue = ({ value, }) => {
    const truncatedValue = (0, react_1.useMemo)(() => {
        return truncate(value, 70);
    }, [value]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: "String", title: value },
        "\"",
        truncatedValue,
        "\""));
};
const RegExpValue = ({ value, }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `/${value.pattern}/${value.options}`;
    }, [value.pattern, value.options]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: "BSONRegExp", title: stringifiedValue }, stringifiedValue));
};
const TimestampValue = ({ value }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `Timestamp({ t: ${value.getHighBits()}, i: ${value.getLowBits()} })`;
    }, [value]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: "Timestamp", title: stringifiedValue }, stringifiedValue));
};
const KeyValue = ({ type }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `${type}()`;
    }, [type]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: type, title: stringifiedValue }, stringifiedValue));
};
const DBRefValue = ({ value, }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `DBRef('${value.collection}', '${String(value.oid)}'${value?.db ? `, '${value.db}'` : ''})`;
    }, [value.collection, value.oid, value.db]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: "DBRef", title: stringifiedValue }, stringifiedValue));
};
const SymbolValue = ({ value, }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `Symbol('${String(value)}')`;
    }, [value]);
    return (react_1.default.createElement(exports.BSONValueContainer, { type: "BSONSymbol", title: stringifiedValue }, stringifiedValue));
};
const UnknownValue = ({ value }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return String(value);
    }, [value]);
    return (react_1.default.createElement(exports.BSONValueContainer, { title: stringifiedValue }, stringifiedValue));
};
const ArrayValue = ({ value, }) => {
    const lengthString = (0, react_1.useMemo)(() => {
        return `(${value.length > 0 ? value.length : 'empty'})`;
    }, [value.length]);
    return (react_1.default.createElement(exports.BSONValueContainer, { title: `Array ${lengthString}` },
        "Array ",
        lengthString));
};
const BSONValue = (props) => {
    switch (props.type) {
        case 'ObjectId':
            return react_1.default.createElement(ObjectIdValue, { value: props.value });
        case 'Date':
            return react_1.default.createElement(DateValue, { value: props.value });
        case 'Binary':
            return react_1.default.createElement(BinaryValue, { value: props.value });
        case 'Int32':
        case 'Double':
            return react_1.default.createElement(NumberValue, { type: props.type, value: props.value });
        case 'String':
            return react_1.default.createElement(StringValue, { value: props.value });
        case 'BSONRegExp':
            return react_1.default.createElement(RegExpValue, { value: props.value });
        case 'Code':
            return react_1.default.createElement(CodeValue, { value: props.value });
        case 'MinKey':
        case 'MaxKey':
            return react_1.default.createElement(KeyValue, { type: props.type });
        case 'DBRef':
            return react_1.default.createElement(DBRefValue, { value: props.value });
        case 'Timestamp':
            return react_1.default.createElement(TimestampValue, { value: props.value });
        case 'BSONSymbol':
            return react_1.default.createElement(SymbolValue, { value: props.value });
        case 'Array':
            return react_1.default.createElement(ArrayValue, { value: props.value });
        case 'Object':
            return react_1.default.createElement(UnknownValue, { type: props.type, value: props.type });
        default:
            return (react_1.default.createElement(UnknownValue, { type: props.type, value: props.value }));
    }
};
exports.default = BSONValue;
//# sourceMappingURL=bson-value.js.map