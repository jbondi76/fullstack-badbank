"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultSidebarWidth = void 0;
const react_1 = __importStar(require("react"));
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const emotion_1 = require("@leafygreen-ui/emotion");
const use_theme_1 = require("../hooks/use-theme");
const resize_handle_1 = require("./resize-handle");
const containerStyles = (0, emotion_1.css)({
    display: 'flex',
    flexDirection: 'column',
    margin: 0,
    padding: 0,
    height: '100%',
    position: 'relative',
});
const containerStylesDark = (0, emotion_1.css)({
    '--color': palette_1.palette.white,
    '--bg-color': palette_1.palette.gray.dark4,
    '--title-color': palette_1.palette.gray.dark3,
    '--title-color-hover': palette_1.palette.white,
    '--title-bg-color': palette_1.palette.green.light1,
    '--icon-color': palette_1.palette.white,
    '--item-color': palette_1.palette.white,
    '--item-color-active': palette_1.palette.green.base,
    '--item-bg-color': palette_1.palette.gray.dark4,
    '--item-bg-color-hover': palette_1.palette.gray.dark2,
    '--item-bg-color-active': palette_1.palette.black,
    color: 'var(--color)',
    backgroundColor: 'var(--bg-color)',
});
const containerStylesLight = (0, emotion_1.css)({
    '--color': palette_1.palette.gray.dark3,
    '--bg-color': palette_1.palette.gray.light3,
    '--title-color': palette_1.palette.white,
    '--title-color-hover': palette_1.palette.gray.dark3,
    '--title-bg-color': palette_1.palette.green.dark2,
    '--icon-color': palette_1.palette.gray.dark3,
    '--item-color': palette_1.palette.gray.dark3,
    '--item-color-active': palette_1.palette.green.dark2,
    '--item-bg-color': palette_1.palette.gray.light3,
    '--item-bg-color-hover': palette_1.palette.gray.light2,
    '--item-bg-color-active': palette_1.palette.green.light3,
    color: 'var(--color)',
    backgroundColor: 'var(--bg-color)',
});
exports.defaultSidebarWidth = tokens_1.spacing[6] * 4;
const ResizableSidebar = ({ initialWidth = exports.defaultSidebarWidth, minWidth = 210, children, className, style, useNewTheme, ...props }) => {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const [width, setWidth] = (0, react_1.useState)(initialWidth);
    const newThemeStyles = useNewTheme
        ? {
            '--item-color-active': darkMode ? palette_1.palette.white : palette_1.palette.gray.dark3,
            '--item-bg-color-active': darkMode
                ? palette_1.palette.gray.dark2
                : palette_1.palette.gray.light2,
        }
        : {};
    const getMaxSidebarWidth = (0, react_1.useCallback)(() => {
        return Math.max(minWidth, 600);
    }, [minWidth]);
    const boundSidebarWidth = (0, react_1.useCallback)((attemptedWidth) => {
        const maxWidth = getMaxSidebarWidth();
        return Math.min(maxWidth, Math.max(minWidth, attemptedWidth));
    }, [getMaxSidebarWidth, minWidth]);
    const renderedWidth = boundSidebarWidth(width);
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(containerStyles, darkMode ? containerStylesDark : containerStylesLight, className), style: {
            ...style,
            minWidth,
            width: renderedWidth,
            flex: 'none',
            ...newThemeStyles,
        }, ...props },
        children,
        react_1.default.createElement(resize_handle_1.ResizeHandle, { onChange: setWidth, direction: resize_handle_1.ResizeDirection.RIGHT, value: width, minValue: minWidth, maxValue: getMaxSidebarWidth(), title: "sidebar" })));
};
exports.default = ResizableSidebar;
//# sourceMappingURL=resizeable-sidebar.js.map