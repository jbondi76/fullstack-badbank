"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModalBody = exports.Variant = void 0;
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const button_1 = require("@leafygreen-ui/button");
const use_theme_1 = require("../../hooks/use-theme");
exports.Variant = {
    Default: button_1.Variant.Primary,
    Danger: button_1.Variant.Danger,
};
const contentStyle = (0, emotion_1.css)({
    padding: `0 ${tokens_1.spacing[5]}px`,
    paddingBottom: tokens_1.spacing[1],
    fontFamily: tokens_1.fontFamilies.default,
    fontSize: '13px',
    lineHeight: '20px',
    maxHeight: `calc(100vh - ${tokens_1.spacing[6] * 5}px)`,
    overflow: 'auto',
    '&:first-child': {
        paddingTop: tokens_1.spacing[5],
    },
});
const variantStyle = {
    [exports.Variant.Default]: (0, emotion_1.css)({}),
    [exports.Variant.Danger]: (0, emotion_1.css)({
        paddingLeft: '78px',
    }),
};
const darkModeStyle = (0, emotion_1.css)({
    paddingBottom: tokens_1.spacing[3],
});
const ModalBody = (0, react_1.forwardRef)(function ModalBody({ variant = exports.Variant.Default, className, scroll = true, minHeight, children }, ref) {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const style = {};
    if (minHeight) {
        style.minHeight = `${minHeight}px`;
    }
    if (scroll === false) {
        style.overflow = 'visible';
    }
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(contentStyle, variantStyle[variant], darkMode && darkModeStyle, className), style: style, ref: ref }, children));
});
exports.ModalBody = ModalBody;
//# sourceMappingURL=modal-body.js.map