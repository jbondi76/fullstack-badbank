import React from 'react';
import type { TooltipProps } from './tooltip';
import type { ButtonProps } from '@leafygreen-ui/button';
import type { glyphs } from '@leafygreen-ui/icon';
export type ItemAction<Action extends string> = {
    action: Action;
    label: string;
    icon: keyof typeof glyphs | React.ReactElement;
    variant?: 'default' | 'destructive';
    isDisabled?: boolean;
    disabledDescription?: string;
    tooltip?: string;
    actionButtonClassName?: string;
};
export type ItemSeparator = {
    separator: true;
};
export type GroupedItemAction<Action extends string> = ItemAction<Action> & {
    tooltip?: string;
    tooltipProps?: TooltipProps;
};
export type MenuAction<Action extends string> = {
    action: Action;
    label: string;
    icon?: React.ReactChild;
    variant?: 'default' | 'destructive';
    isDisabled?: boolean;
    disabledDescription?: string;
} | ItemSeparator;
declare const ItemActionButtonSize: {
    readonly XSmall: "xsmall";
    readonly Small: "small";
    readonly Default: "default";
};
type ItemActionButtonSize = typeof ItemActionButtonSize[keyof typeof ItemActionButtonSize];
export declare function ItemActionMenu<Action extends string>({ isVisible, actions, onAction, className, menuClassName, usePortal, iconClassName, iconStyle, iconSize, 'data-testid': dataTestId, }: {
    actions: MenuAction<Action>[];
    onAction(actionName: Action): void;
    className?: string;
    menuClassName?: string;
    usePortal?: boolean;
    iconClassName?: string;
    iconStyle?: React.CSSProperties;
    iconSize?: ItemActionButtonSize;
    isVisible?: boolean;
    'data-testid'?: string;
}): JSX.Element | null;
export declare function ItemActionGroup<Action extends string>({ actions, onAction, className, iconClassName, iconStyle, iconSize, isVisible, 'data-testid': dataTestId, }: {
    actions: (GroupedItemAction<Action> | ItemSeparator)[];
    onAction(actionName: Action): void;
    className?: string;
    iconClassName?: string;
    iconStyle?: React.CSSProperties;
    iconSize?: ItemActionButtonSize;
    isVisible?: boolean;
    'data-testid'?: string;
}): JSX.Element | null;
export declare function ItemActionControls<Action extends string>({ isVisible, actions, onAction, className, menuClassName, iconClassName, iconStyle, iconSize, usePortal, collapseAfter, collapseToMenuThreshold, 'data-testid': dataTestId, }: {
    isVisible?: boolean;
    actions: (ItemAction<Action> | ItemSeparator)[];
    onAction(actionName: Action): void;
    className?: string;
    menuClassName?: string;
    iconSize?: ItemActionButtonSize;
    iconClassName?: string;
    iconStyle?: React.CSSProperties;
    collapseAfter?: number;
    collapseToMenuThreshold?: number;
    usePortal?: boolean;
    'data-testid'?: string;
}): JSX.Element | null;
export declare function DropdownMenuButton<Action extends string>({ isVisible, actions, onAction, usePortal, activeAction, buttonText, buttonProps, iconSize, 'data-testid': dataTestId, }: {
    actions: MenuAction<Action>[];
    onAction(actionName: Action): void;
    usePortal?: boolean;
    iconSize?: ItemActionButtonSize;
    isVisible?: boolean;
    activeAction?: Action;
    'data-testid'?: string;
    buttonText: string;
    buttonProps: ButtonProps;
}): JSX.Element | null;
export {};
//# sourceMappingURL=item-action-controls.d.ts.map