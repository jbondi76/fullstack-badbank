"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComboboxWithCustomOption = void 0;
const react_1 = __importStar(require("react"));
const combobox_1 = require("./combobox");
const ComboboxWithCustomOption = ({ onChange, options: userOptions, multiselect = false, renderOption, ...props }) => {
    const [customOptions, setCustomOptions] = (0, react_1.useState)([]);
    const [search, setSearch] = (0, react_1.useState)('');
    const comboboxOptions = (0, react_1.useMemo)(() => {
        const allOptions = [...userOptions, ...customOptions];
        const _opts = allOptions.map((option, index) => renderOption(option, index, false));
        if (search && !allOptions.find((x) => x.value.includes(search))) {
            _opts.push(renderOption({ value: search }, allOptions.length + 1, true));
        }
        return _opts;
    }, [userOptions, customOptions, search]);
    const selectValueAndRunOnChange = (value) => {
        if (!onChange || !value)
            return;
        if (multiselect) {
            const multiSelectValues = value;
            const customOptions = multiSelectValues
                .filter((value) => !userOptions.find((x) => x.value === value))
                .map((x) => ({ value: x }));
            setCustomOptions(customOptions);
            onChange(multiSelectValues);
        }
        else {
            const selectValue = value;
            if (selectValue && !userOptions.find((x) => x.value === selectValue)) {
                setCustomOptions([{ value: selectValue }]);
            }
            onChange(selectValue);
        }
    };
    return (react_1.default.createElement(combobox_1.Combobox, { ...props, multiselect: multiselect, onFilter: setSearch, onBlur: (evt) => {
            if (!multiselect) {
                selectValueAndRunOnChange(evt.target.value);
            }
        }, onChange: selectValueAndRunOnChange }, comboboxOptions));
};
exports.ComboboxWithCustomOption = ComboboxWithCustomOption;
//# sourceMappingURL=combobox-with-custom-option.js.map