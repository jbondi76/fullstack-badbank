"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chip = void 0;
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const icon_1 = __importDefault(require("@leafygreen-ui/icon"));
const inline_definition_1 = __importDefault(require("@leafygreen-ui/inline-definition"));
const lib_1 = require("@leafygreen-ui/lib");
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const Combobox_styles_1 = require("./Combobox.styles");
const Combobox_types_1 = require("./Combobox.types");
const ComboboxContext_1 = require("./ComboboxContext");
const chipWrapperBaseStyle = (0, emotion_1.css) `
  display: inline-flex;
  align-items: center;
  overflow: hidden;
  white-space: nowrap;
  box-sizing: border-box;
`;
const chipWrapperSizeStyle = {
    [Combobox_types_1.ComboboxSize.Default]: (0, emotion_1.css) `
    font-size: ${tokens_1.typeScales.body1.fontSize}px;
    line-height: ${tokens_1.typeScales.body1.lineHeight}px;
    border-radius: 4px;
  `,
    [Combobox_types_1.ComboboxSize.Large]: (0, emotion_1.css) `
    font-size: ${tokens_1.typeScales.body2.fontSize}px;
    line-height: ${tokens_1.typeScales.body2.lineHeight}px;
    border-radius: 4px;
  `,
};
const chipWrapperThemeStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    color: ${palette_1.palette.black};
    background-color: ${palette_1.palette.gray.light2};

    // TODO: - refine these styles with Design
    &:focus-within {
      background-color: ${palette_1.palette.blue.light2};
    }
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    color: ${palette_1.palette.gray.light2};
    background-color: ${palette_1.palette.gray.dark2};

    &:focus-within {
      background-color: ${palette_1.palette.blue.dark2};
    }
  `,
};
const disabledChipWrapperStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    cursor: not-allowed;
    color: ${palette_1.palette.gray.base};
    background-color: ${palette_1.palette.gray.light3};
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    cursor: not-allowed;
    color: ${palette_1.palette.gray.dark2};
    background-color: ${palette_1.palette.gray.dark4};
    box-shadow: inset 0 0 1px 1px ${palette_1.palette.gray.dark2}; ;
  `,
};
const chipTextSizeStyle = {
    [Combobox_types_1.ComboboxSize.Default]: (0, emotion_1.css) `
    padding-inline: 6px;
    padding-block: ${Combobox_styles_1.chipWrapperPaddingY[Combobox_types_1.ComboboxSize.Default]}px;
  `,
    [Combobox_types_1.ComboboxSize.Large]: (0, emotion_1.css) `
    padding-inline: 10px;
    padding-block: ${Combobox_styles_1.chipWrapperPaddingY[Combobox_types_1.ComboboxSize.Large]}px;
  `,
};
const chipButtonStyle = (0, emotion_1.css) `
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  outline: none;
  border: none;
  background-color: transparent;
  cursor: pointer;
  transition: background-color ${tokens_1.transitionDuration.faster}ms ease-in-out;
`;
const chipButtonSizeStyle = {
    [Combobox_types_1.ComboboxSize.Default]: (0, emotion_1.css) `
    height: ${Combobox_styles_1.inputHeight[Combobox_types_1.ComboboxSize.Default]}px;
  `,
    [Combobox_types_1.ComboboxSize.Large]: (0, emotion_1.css) `
    height: ${Combobox_styles_1.inputHeight[Combobox_types_1.ComboboxSize.Large]}px;
  `,
};
const chipButtonThemeStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    color: ${palette_1.palette.gray.dark2};

    &:hover {
      color: ${palette_1.palette.black};
      background-color: ${palette_1.palette.gray.light1};
    }
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    color: ${palette_1.palette.gray.light1};

    &:hover {
      color: ${palette_1.palette.gray.light3};
      background-color: ${palette_1.palette.gray.dark1};
    }
  `,
};
const chipButtonDisabledStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    cursor: not-allowed;
    color: ${palette_1.palette.gray.dark2};
    &:hover {
      color: inherit;
      background-color: unset;
    }
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    cursor: not-allowed;
    color: ${palette_1.palette.gray.dark2};
    &:hover {
      color: inherit;
      background-color: unset;
    }
  `,
};
exports.Chip = react_1.default.forwardRef(({ displayName, isFocused, onRemove, onFocus }, forwardedRef) => {
    const { darkMode, theme, size, disabled, chipTruncationLocation = 'end', chipCharacterLimit = 12, } = (0, react_1.useContext)(ComboboxContext_1.ComboboxContext);
    const isTruncated = !!chipCharacterLimit &&
        !!chipTruncationLocation &&
        chipTruncationLocation !== 'none' &&
        displayName.length > chipCharacterLimit;
    const buttonRef = (0, react_1.useRef)(null);
    const truncatedName = (0, react_1.useMemo)(() => {
        if (isTruncated) {
            const ellipsis = 'â€¦';
            const chars = chipCharacterLimit - 3;
            switch (chipTruncationLocation) {
                case 'start': {
                    const end = displayName
                        .substring(displayName.length - chars)
                        .trim();
                    return ellipsis + end;
                }
                case 'middle': {
                    const start = displayName.substring(0, chars / 2).trim();
                    const end = displayName
                        .substring(displayName.length - chars / 2)
                        .trim();
                    return start + ellipsis + end;
                }
                case 'end': {
                    const start = displayName.substring(0, chars).trim();
                    return start + ellipsis;
                }
                default: {
                    return displayName;
                }
            }
        }
        return false;
    }, [chipCharacterLimit, chipTruncationLocation, displayName, isTruncated]);
    (0, react_1.useEffect)(() => {
        if (isFocused && !disabled) {
            buttonRef?.current?.focus();
        }
    }, [disabled, forwardedRef, isFocused]);
    const handleKeyDown = (e) => {
        if (!disabled &&
            (e.key === lib_1.keyMap.Delete ||
                e.key === lib_1.keyMap.Backspace ||
                e.key === lib_1.keyMap.Enter ||
                e.key === lib_1.keyMap.Space)) {
            onRemove();
        }
    };
    const handleChipClick = (e) => {
        if (!buttonRef.current?.contains(e.target)) {
            onFocus();
        }
    };
    const handleButtonClick = () => {
        if (!disabled) {
            onRemove();
        }
    };
    return (react_1.default.createElement("span", { role: "option", "aria-selected": isFocused, "data-testid": "lg-combobox-chip", ref: forwardedRef, className: (0, emotion_1.cx)(Combobox_styles_1.chipClassName, chipWrapperBaseStyle, chipWrapperThemeStyle[theme], chipWrapperSizeStyle[size], {
            [disabledChipWrapperStyle[theme]]: disabled,
        }), onClick: handleChipClick, onKeyDown: handleKeyDown, tabIndex: -1 },
        react_1.default.createElement("span", { className: (0, emotion_1.cx)(chipTextSizeStyle[size]) }, truncatedName ? (react_1.default.createElement(inline_definition_1.default, { darkMode: darkMode, definition: displayName, align: "bottom" }, truncatedName)) : (displayName)),
        react_1.default.createElement("button", { "aria-label": `Deselect ${displayName}`, "aria-disabled": disabled, disabled: disabled, ref: buttonRef, className: (0, emotion_1.cx)(chipButtonStyle, chipButtonThemeStyle[theme], chipButtonSizeStyle[size], {
                [chipButtonDisabledStyle[theme]]: disabled,
            }), onClick: handleButtonClick },
            react_1.default.createElement(icon_1.default, { glyph: "X" }))));
});
exports.Chip.displayName = 'Chip';
//# sourceMappingURL=Chip.js.map