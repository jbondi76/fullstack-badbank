"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComboboxOption = exports.InternalComboboxOption = void 0;
const react_1 = __importStar(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const checkbox_1 = __importDefault(require("@leafygreen-ui/checkbox"));
const emotion_1 = require("@leafygreen-ui/emotion");
const hooks_1 = require("@leafygreen-ui/hooks");
const icon_1 = __importStar(require("@leafygreen-ui/icon"));
const lib_1 = require("@leafygreen-ui/lib");
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const Menu_styles_1 = require("./ComboboxMenu/Menu.styles");
const Combobox_types_1 = require("./Combobox.types");
const ComboboxContext_1 = require("./ComboboxContext");
const utils_1 = require("./utils");
const comboboxOptionBaseStyle = (0, emotion_1.css) `
  position: relative;
  display: flex;
  flex: 1;
  align-items: center;
  justify-content: flex-start;
  list-style: none;
  color: inherit;
  cursor: pointer;
  overflow: hidden;
  font-family: ${tokens_1.fontFamilies.default};

  // Left wedge
  &:before {
    content: '';
    position: absolute;
    left: 0;
    width: 4px;
    height: calc(100% - 14px);
    background-color: rgba(255, 255, 255, 0);
    border-radius: 0 6px 6px 0;
    transform: scale3d(0, 0.3, 0);
    transition: 200ms ease-in-out;
    transition-property: transform, background-color;
  }
`;
const optionNameStyles = (width) => (0, emotion_1.css) `
  max-width: ${width}px;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-shrink: 0;
  margin-right: ${tokens_1.spacing[2]}px;
`;
const comboboxOptionThemeStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    &:hover {
      outline: none;
      background-color: ${palette_1.palette.gray.light2};
    }
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    &:hover {
      outline: none;
      background-color: ${palette_1.palette.gray.dark4};
    }
  `,
};
const comboboxOptionSizeStyle = {
    [Combobox_types_1.ComboboxSize.Default]: (0, emotion_1.css) `
    font-size: ${tokens_1.typeScales.body1.fontSize}px;
    line-height: ${tokens_1.typeScales.body1.lineHeight}px;
    min-height: ${Menu_styles_1.menuItemHeight[Combobox_types_1.ComboboxSize.Default]}px;
    padding: ${Menu_styles_1.menuItemPadding[Combobox_types_1.ComboboxSize.Default].y}px
      ${Menu_styles_1.menuItemPadding[Combobox_types_1.ComboboxSize.Default].x}px;
    gap: ${tokens_1.spacing[1]}px;

    &:before {
      max-height: ${Menu_styles_1.menuItemHeight[Combobox_types_1.ComboboxSize.Default]}px;
    }
  `,
    [Combobox_types_1.ComboboxSize.Large]: (0, emotion_1.css) `
    font-size: ${tokens_1.typeScales.body2.fontSize}px;
    line-height: ${tokens_1.typeScales.body2.lineHeight}px;
    min-height: ${Menu_styles_1.menuItemHeight[Combobox_types_1.ComboboxSize.Large]}px;
    padding: ${Menu_styles_1.menuItemPadding[Combobox_types_1.ComboboxSize.Large].y}px
      ${Menu_styles_1.menuItemPadding[Combobox_types_1.ComboboxSize.Large].x}px;
    gap: ${tokens_1.spacing[2]}px;

    &:before {
      max-height: ${Menu_styles_1.menuItemHeight[Combobox_types_1.ComboboxSize.Large]}px;
    }
  `,
};
const _comboboxOptionBaseActiveStyle = (0, emotion_1.css) `
  outline: none;

  &:before {
    transform: scaleY(1);
  }
`;
const comboboxOptionActiveStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    ${_comboboxOptionBaseActiveStyle};
    background-color: ${palette_1.palette.blue.light3};

    &:before {
      background-color: ${palette_1.palette.blue.base};
    }
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    ${_comboboxOptionBaseActiveStyle};
    background-color: ${palette_1.palette.blue.dark3};

    &:before {
      background-color: ${palette_1.palette.blue.light1};
    }
  `,
};
const _comboboxOptionBaseDisabledStyle = (0, emotion_1.css) `
  cursor: not-allowed;

  &:hover {
    background-color: inherit;
  }

  &:before {
    content: unset;
  }
`;
const comboboxOptionDisabledStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    ${_comboboxOptionBaseDisabledStyle};
    color: ${palette_1.palette.gray.light1};
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    ${_comboboxOptionBaseDisabledStyle};
    color: ${palette_1.palette.gray.dark1};
  `,
};
const checkIconStyle = {
    [Combobox_types_1.ComboboxSize.Default]: (0, emotion_1.css) `
    min-width: ${tokens_1.spacing[3]}px;
  `,
    [Combobox_types_1.ComboboxSize.Large]: (0, emotion_1.css) `
    min-width: ${tokens_1.spacing[4]}px;
  `,
};
const flexSpan = (0, emotion_1.css) `
  display: inline-flex;
  gap: 8px;
  justify-content: start;
  align-items: inherit;
  overflow-wrap: anywhere;
`;
const disallowPointer = (0, emotion_1.css) `
  pointer-events: none;
`;
const displayNameStyle = (isSelected) => (0, emotion_1.css) `
  font-weight: ${isSelected ? 'bold' : 'normal'};
`;
const InternalComboboxOption = react_1.default.forwardRef(({ displayName, glyph, isSelected, isFocused, disabled, setSelected, className, description, }, forwardedRef) => {
    const { multiselect, darkMode, theme, withIcons, inputValue, size, searchInputSize, } = (0, react_1.useContext)(ComboboxContext_1.ComboboxContext);
    const optionTextId = (0, hooks_1.useIdAllocator)({ prefix: 'combobox-option-text' });
    const optionRef = (0, hooks_1.useForwardedRef)(forwardedRef, null);
    const handleOptionClick = (0, react_1.useCallback)((e) => {
        e.stopPropagation();
        if (!disabled) {
            setSelected();
        }
    }, [disabled, optionRef, setSelected]);
    const renderedIcon = (0, react_1.useMemo)(() => {
        if (glyph) {
            if ((0, icon_1.isComponentGlyph)(glyph)) {
                return glyph;
            }
            console.error('`ComboboxOption` instance did not render icon because it is not a known glyph element.', glyph);
        }
    }, [glyph]);
    const renderedChildren = (0, react_1.useMemo)(() => {
        if (multiselect) {
            const checkbox = (react_1.default.createElement(checkbox_1.default, { "aria-labelledby": optionTextId, checked: isSelected, tabIndex: -1, disabled: disabled, darkMode: darkMode, className: (0, emotion_1.css) `
              // TODO: Remove when this is resolved:
              // https://jira.mongodb.org/browse/PD-2171
              & > label > div {
                margin-top: 0;
              }
            ` }));
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("span", { className: optionNameStyles(searchInputSize) },
                    react_1.default.createElement("span", { className: (0, emotion_1.cx)(flexSpan, disallowPointer) },
                        withIcons ? renderedIcon : checkbox,
                        react_1.default.createElement("span", { id: optionTextId, className: displayNameStyle(isSelected) }, (0, utils_1.wrapJSX)(displayName, inputValue, 'strong'))),
                    withIcons && checkbox),
                description && react_1.default.createElement("span", null, description)));
        }
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("span", { className: optionNameStyles(searchInputSize) },
                react_1.default.createElement("span", { className: (0, emotion_1.cx)(flexSpan, disallowPointer) },
                    renderedIcon,
                    react_1.default.createElement("span", { className: displayNameStyle(isSelected) }, (0, utils_1.wrapJSX)(displayName, inputValue, 'strong'))),
                isSelected && (react_1.default.createElement(icon_1.default, { glyph: "Checkmark", className: checkIconStyle[size], color: darkMode ? palette_1.palette.blue.light1 : palette_1.palette.blue.base }))),
            description && react_1.default.createElement("span", null, description)));
    }, [
        multiselect,
        renderedIcon,
        isSelected,
        displayName,
        inputValue,
        size,
        darkMode,
        optionTextId,
        disabled,
        withIcons,
    ]);
    return (react_1.default.createElement("li", { ref: optionRef, role: "option", "aria-selected": isFocused, "aria-label": displayName, tabIndex: -1, className: (0, emotion_1.cx)(comboboxOptionBaseStyle, comboboxOptionSizeStyle[size], comboboxOptionThemeStyle[theme], {
            [comboboxOptionActiveStyle[theme]]: isFocused,
            [comboboxOptionDisabledStyle[theme]]: disabled,
        }, className), onClick: handleOptionClick, onKeyDown: handleOptionClick }, renderedChildren));
});
exports.InternalComboboxOption = InternalComboboxOption;
InternalComboboxOption.displayName = 'ComboboxOption';
function ComboboxOption(_) {
    throw Error('`ComboboxOption` must be a child of a `Combobox` instance');
}
exports.ComboboxOption = ComboboxOption;
ComboboxOption.displayName = 'ComboboxOption';
ComboboxOption.propTypes = {
    displayName: prop_types_1.default.string,
    value: prop_types_1.default.string,
    glyph: prop_types_1.default.node,
    disabled: prop_types_1.default.bool,
    className: prop_types_1.default.string,
};
//# sourceMappingURL=ComboboxOption.js.map