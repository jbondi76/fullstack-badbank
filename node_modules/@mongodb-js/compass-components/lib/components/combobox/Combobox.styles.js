"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.labelDescriptionContainerStyle = exports.errorMessageSizeStyle = exports.errorMessageThemeStyle = exports.endIconStyle = exports.clearButtonStyle = exports.multiselectInputElementStyle = exports.inputElementTransitionStyles = exports.inputElementSizeStyle = exports.inputElementThemeStyle = exports.baseInputElementStyle = exports.inputWrapperStyle = exports.comboboxSelectionStyles = exports.comboboxFocusStyle = exports.comboboxErrorStyles = exports.comboboxDisabledStyles = exports.comboboxSizeStyles = exports.comboboxThemeStyles = exports.baseComboboxStyles = exports.comboboxParentStyle = exports.chipClassName = exports.caretIconSize = exports.clearButtonIconSize = exports.comboboxPadding = exports.inputHeight = exports.chipWrapperPaddingY = exports.maxCharWidth = void 0;
const emotion_1 = require("@leafygreen-ui/emotion");
const lib_1 = require("@leafygreen-ui/lib");
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const Combobox_types_1 = require("./Combobox.types");
exports.maxCharWidth = {
    [Combobox_types_1.ComboboxSize.Default]: tokens_1.typeScales.body1.fontSize,
    [Combobox_types_1.ComboboxSize.Large]: tokens_1.typeScales.body2.fontSize,
};
exports.chipWrapperPaddingY = {
    [Combobox_types_1.ComboboxSize.Default]: 2,
    [Combobox_types_1.ComboboxSize.Large]: 4,
};
exports.inputHeight = {
    [Combobox_types_1.ComboboxSize.Default]: tokens_1.typeScales.body1.lineHeight + 2 * exports.chipWrapperPaddingY[Combobox_types_1.ComboboxSize.Default],
    [Combobox_types_1.ComboboxSize.Large]: tokens_1.typeScales.body2.lineHeight + 2 * exports.chipWrapperPaddingY[Combobox_types_1.ComboboxSize.Large],
};
exports.comboboxPadding = {
    [Combobox_types_1.ComboboxSize.Default]: {
        y: (36 - exports.inputHeight[Combobox_types_1.ComboboxSize.Default] - 2) / 2,
        x: tokens_1.spacing[2] - 1,
    },
    [Combobox_types_1.ComboboxSize.Large]: {
        y: (48 - exports.inputHeight[Combobox_types_1.ComboboxSize.Large] - 2) / 2,
        x: tokens_1.spacing[2] - 1,
    },
};
exports.clearButtonIconSize = 28;
exports.caretIconSize = tokens_1.spacing[3];
const minWidth = {
    [Combobox_types_1.ComboboxSize.Default]: exports.maxCharWidth[Combobox_types_1.ComboboxSize.Default] +
        2 * exports.comboboxPadding[Combobox_types_1.ComboboxSize.Default].x +
        exports.caretIconSize +
        2,
    [Combobox_types_1.ComboboxSize.Large]: exports.maxCharWidth[Combobox_types_1.ComboboxSize.Large] +
        2 * exports.comboboxPadding[Combobox_types_1.ComboboxSize.Large].x +
        exports.caretIconSize +
        2,
};
exports.chipClassName = (0, lib_1.createUniqueClassName)('combobox-chip');
const comboboxParentStyle = (size) => {
    return (0, emotion_1.css) `
    font-family: ${tokens_1.fontFamilies.default};
    width: 100%;
    min-width: ${minWidth[size]}px;
  `;
};
exports.comboboxParentStyle = comboboxParentStyle;
exports.baseComboboxStyles = (0, emotion_1.css) `
  display: grid;
  grid-auto-flow: column;
  grid-template-columns: 1fr ${exports.caretIconSize}px;
  align-items: center;
  cursor: text;
  transition: ${tokens_1.transitionDuration.default}ms ease-in-out;
  transition-property: background-color, box-shadow, border-color;
  border: 1px solid;
  width: 100%;
  max-width: 100%;
  border-radius: 6px;
`;
exports.comboboxThemeStyles = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    color: ${palette_1.palette.gray.dark3};
    background-color: ${palette_1.palette.white};
    border-color: ${palette_1.palette.gray.base};

    &:hover {
      box-shadow: ${tokens_1.hoverRing[lib_1.Theme.Light].gray};
    }
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    color: ${palette_1.palette.gray.light2};
    background-color: ${palette_1.palette.gray.dark4};
    border-color: ${palette_1.palette.gray.base};

    &:hover {
      box-shadow: ${tokens_1.hoverRing[lib_1.Theme.Dark].gray};
    }
  `,
};
const comboboxSizeStyles = (size) => (0, emotion_1.css) `
  padding: ${exports.comboboxPadding[size].y}px ${exports.comboboxPadding[size].x}px;
`;
exports.comboboxSizeStyles = comboboxSizeStyles;
exports.comboboxDisabledStyles = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    cursor: not-allowed;
    color: ${palette_1.palette.gray.dark1};
    background-color: ${palette_1.palette.gray.light2};
    border-color: ${palette_1.palette.gray.light1};
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    cursor: not-allowed;
    color: ${palette_1.palette.gray.dark1};
    background-color: ${palette_1.palette.gray.dark3};
    border-color: ${palette_1.palette.gray.dark2};
  `,
};
exports.comboboxErrorStyles = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    border-color: ${palette_1.palette.red.base};
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    border-color: ${palette_1.palette.red.light1};
  `,
};
exports.comboboxFocusStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    &:focus-within {
      border-color: transparent;
      background-color: ${palette_1.palette.white};
      box-shadow: ${tokens_1.focusRing[lib_1.Theme.Light].input};
    }
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    &:focus-within {
      border-color: transparent;
      background-color: ${palette_1.palette.gray.dark4};
      box-shadow: ${tokens_1.focusRing[lib_1.Theme.Dark].input};
    }
  `,
};
exports.comboboxSelectionStyles = (0, emotion_1.css) `
  grid-template-columns: 1fr ${exports.clearButtonIconSize}px ${exports.caretIconSize}px;
`;
const inputWrapperStyle = ({ overflow, size, }) => {
    const baseWrapperStyle = (0, emotion_1.css) `
    flex-grow: 1;
    width: 100%;
  `;
    switch (overflow) {
        case Combobox_types_1.Overflow.scrollX: {
            return (0, emotion_1.css) `
        ${baseWrapperStyle}
        display: block;
        height: ${exports.inputHeight[size]}px;
        white-space: nowrap;
        overflow-x: scroll;
        scroll-behavior: smooth;
        scrollbar-width: none;

        &::-webkit-scrollbar {
          display: none;
        }

        & > .${exports.chipClassName} {
          margin-inline: 2px;

          &:first-child {
            margin-inline-start: 0;
          }

          &:last-child {
            margin-inline-end: 0;
          }
        }
      `;
        }
        case Combobox_types_1.Overflow.expandY: {
            return (0, emotion_1.css) `
        ${baseWrapperStyle}
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        overflow-x: hidden;
        min-height: ${exports.inputHeight[size]}px;
      `;
        }
    }
};
exports.inputWrapperStyle = inputWrapperStyle;
exports.baseInputElementStyle = (0, emotion_1.css) `
  font-family: ${tokens_1.fontFamilies.default};
  width: 100%;
  border: none;
  cursor: inherit;
  background-color: inherit;
  color: inherit;
  box-sizing: content-box;
  padding: 0;
  margin: 0;
  text-overflow: ellipsis;

  &:placeholder-shown {
    min-width: 100%;
  }
  &:focus {
    outline: none;
  }
`;
exports.inputElementThemeStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    &::placeholder {
      color: ${palette_1.palette.gray.dark1};
    }
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    &::placeholder {
      color: ${palette_1.palette.gray.light1};
    }
  `,
};
exports.inputElementSizeStyle = {
    [Combobox_types_1.ComboboxSize.Default]: (0, emotion_1.css) `
    height: ${exports.inputHeight[Combobox_types_1.ComboboxSize.Default]}px;
    font-size: ${tokens_1.typeScales.body1.fontSize}px;
    line-height: ${tokens_1.typeScales.body1.lineHeight}px;
    min-width: ${exports.maxCharWidth[Combobox_types_1.ComboboxSize.Default]}px;
    // Only add padding if there are chips
    &:not(:first-child) {
      padding-left: 4px;
    }
  `,
    [Combobox_types_1.ComboboxSize.Large]: (0, emotion_1.css) `
    height: ${exports.inputHeight[Combobox_types_1.ComboboxSize.Large]}px;
    font-size: ${tokens_1.typeScales.body2.fontSize}px;
    line-height: ${tokens_1.typeScales.body2.lineHeight}px;
    min-width: ${exports.maxCharWidth[Combobox_types_1.ComboboxSize.Large]}px;
    &:not(:first-child) {
      padding-left: 6px;
    }
  `,
};
const inputElementTransitionStyles = (isOpen) => (0, emotion_1.css) `
  /*
  * Immediate transition in, slow transition out. 
  * '-in' transition is handled by \`scroll-behavior\` 
  */
  transition: width ease-in-out ${isOpen ? '0s' : '100ms'};
`;
exports.inputElementTransitionStyles = inputElementTransitionStyles;
const multiselectInputElementStyle = (size, inputValue) => {
    const inputLength = inputValue?.length ?? 0;
    return (0, emotion_1.css) `
    width: ${inputLength * exports.maxCharWidth[size]}px;
    max-width: 100%;
  `;
};
exports.multiselectInputElementStyle = multiselectInputElementStyle;
exports.clearButtonStyle = (0, emotion_1.css) `
  // Add a negative margin so the button takes up the same space as the regular icons
  margin-block: calc(${exports.caretIconSize / 2}px - 100%);
`;
const endIconStyle = (size) => (0, emotion_1.css) `
  height: ${exports.caretIconSize}px;
  width: ${exports.caretIconSize}px;
  margin-inline-end: calc(${exports.comboboxPadding[size].x}px / 2);
`;
exports.endIconStyle = endIconStyle;
exports.errorMessageThemeStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    color: ${palette_1.palette.red.base};
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    color: ${palette_1.palette.red.light1};
  `,
};
exports.errorMessageSizeStyle = {
    [Combobox_types_1.ComboboxSize.Default]: (0, emotion_1.css) `
    font-size: ${tokens_1.typeScales.body1.fontSize}px;
    line-height: ${tokens_1.typeScales.body1.lineHeight}px;
    padding-top: ${exports.comboboxPadding[Combobox_types_1.ComboboxSize.Default].y}px;
  `,
    [Combobox_types_1.ComboboxSize.Large]: (0, emotion_1.css) `
    font-size: ${tokens_1.typeScales.body2.fontSize}px;
    line-height: ${tokens_1.typeScales.body2.lineHeight}px;
    padding-top: ${exports.comboboxPadding[Combobox_types_1.ComboboxSize.Large].y}px;
  `,
};
exports.labelDescriptionContainerStyle = (0, emotion_1.css) `
  margin-bottom: 2px;
`;
//# sourceMappingURL=Combobox.styles.js.map