"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalComboboxGroup = void 0;
const react_1 = __importStar(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const emotion_1 = require("@leafygreen-ui/emotion");
const hooks_1 = require("@leafygreen-ui/hooks");
const lib_1 = require("@leafygreen-ui/lib");
const palette_1 = require("@leafygreen-ui/palette");
const ComboboxContext_1 = require("./ComboboxContext");
const comboboxGroupStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    padding-top: 8px;
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    padding-top: 8px;
  `,
};
const comboboxGroupLabel = (0, emotion_1.css) `
  cursor: default;
  width: 100%;
  padding: 0 12px 2px;
  outline: none;
  overflow-wrap: anywhere;
  font-size: 12px;
  line-height: 16px;
  font-weight: bold;
  text-transform: uppercase;
  letter-spacing: 0.4px;
`;
const comboboxGroupLabelThemeStyle = {
    [lib_1.Theme.Light]: (0, emotion_1.css) `
    color: ${palette_1.palette.gray.dark1};
  `,
    [lib_1.Theme.Dark]: (0, emotion_1.css) `
    color: ${palette_1.palette.gray.light1};
  `,
};
function InternalComboboxGroup({ label, className, children, }) {
    const { theme } = (0, react_1.useContext)(ComboboxContext_1.ComboboxContext);
    const groupId = (0, hooks_1.useIdAllocator)({ prefix: 'combobox-group' });
    const childCount = react_1.default.Children.count(children);
    return childCount > 0 ? (react_1.default.createElement("div", { className: (0, emotion_1.cx)(comboboxGroupStyle[theme], className) },
        react_1.default.createElement("div", { className: (0, emotion_1.cx)(comboboxGroupLabel, comboboxGroupLabelThemeStyle[theme]), id: groupId }, label),
        react_1.default.createElement("div", { role: "group", "aria-labelledby": groupId }, children))) : (react_1.default.createElement(react_1.default.Fragment, null));
}
exports.InternalComboboxGroup = InternalComboboxGroup;
ComboboxGroup.displayName = 'ComboboxGroup';
ComboboxGroup.propTypes = {
    className: prop_types_1.default.string,
    children: prop_types_1.default.node.isRequired,
    label: prop_types_1.default.string.isRequired,
};
function ComboboxGroup(_) {
    throw Error('`ComboboxGroup` must be a child of a `Combobox` instance');
}
exports.default = ComboboxGroup;
//# sourceMappingURL=ComboboxGroup.js.map