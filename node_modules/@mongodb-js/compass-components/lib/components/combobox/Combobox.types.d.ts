import type { ReactElement, ReactNode } from 'react';
import type { Either, HTMLElementProps } from '@leafygreen-ui/lib';
export declare const ComboboxElement: {
    readonly Input: "Input";
    readonly ClearButton: "ClearButton";
    readonly FirstChip: "FirstChip";
    readonly LastChip: "LastChip";
    readonly MiddleChip: "MiddleChip";
    readonly Combobox: "Combobox";
    readonly Menu: "Menu";
};
export type ComboboxElement = typeof ComboboxElement[keyof typeof ComboboxElement];
export declare const ComboboxSize: {
    readonly Default: "default";
    readonly Large: "large";
};
export type ComboboxSize = typeof ComboboxSize[keyof typeof ComboboxSize];
export declare const TruncationLocation: {
    readonly start: "start";
    readonly middle: "middle";
    readonly end: "end";
    readonly none: "none";
};
export type TruncationLocation = typeof TruncationLocation[keyof typeof TruncationLocation];
export declare const Overflow: {
    readonly expandY: "expand-y";
    readonly scrollX: "scroll-x";
    readonly expandX: "expand-x";
};
export type Overflow = typeof Overflow[keyof typeof Overflow];
export declare const State: {
    readonly error: "error";
    readonly none: "none";
};
export type State = typeof State[keyof typeof State];
export declare const SearchState: {
    readonly unset: "unset";
    readonly error: "error";
    readonly loading: "loading";
};
export type SearchState = typeof SearchState[keyof typeof SearchState];
export type SelectValueType<M extends boolean> = M extends true ? Array<string> : string | null;
export type onChangeType<M extends boolean> = M extends true ? (value: SelectValueType<true>) => void : (value: SelectValueType<false>) => void;
export declare function getNullSelection<M extends boolean>(multiselect: M): SelectValueType<M>;
export interface ComboboxMultiselectProps<M extends boolean> {
    multiselect?: M;
    initialValue?: SelectValueType<M>;
    onChange?: onChangeType<M>;
    value?: SelectValueType<M>;
    overflow?: M extends true ? Overflow : undefined;
}
export interface BaseComboboxProps extends Omit<HTMLElementProps<'div'>, 'onChange'> {
    children?: ReactNode;
    label?: string;
    'aria-label'?: string;
    description?: string;
    placeholder?: string;
    disabled?: boolean;
    size?: ComboboxSize;
    darkMode?: boolean;
    state?: State;
    errorMessage?: string;
    searchState?: SearchState;
    searchEmptyMessage?: string;
    searchErrorMessage?: string;
    searchLoadingMessage?: string;
    onFilter?: (value: string) => void;
    clearable?: boolean;
    onClear?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    filteredOptions?: Array<string>;
    chipTruncationLocation?: TruncationLocation;
    chipCharacterLimit?: number;
    usePortal?: boolean;
    portalClassName?: undefined;
    portalContainer?: null;
    scrollContainer?: null;
    popoverZIndex?: number;
    popoverClassName?: string;
}
export type ComboboxProps<M extends boolean> = Either<BaseComboboxProps & ComboboxMultiselectProps<M>, 'label' | 'aria-label'>;
interface BaseComboboxOptionProps {
    value?: string;
    displayName?: string;
    glyph?: ReactElement;
    disabled?: boolean;
    className?: string;
    description?: string;
}
export type ComboboxOptionProps = Either<BaseComboboxOptionProps, 'value' | 'displayName'>;
export interface OptionObject {
    value: string;
    displayName: string;
    isDisabled: boolean;
    hasGlyph?: boolean;
    description?: string;
}
export interface InternalComboboxOptionProps {
    value: string;
    displayName: string;
    isSelected: boolean;
    isFocused: boolean;
    setSelected: () => void;
    disabled?: boolean;
    glyph?: ReactElement;
    className?: string;
    index: number;
    description?: string;
}
export interface ComboboxGroupProps {
    label: string;
    children: React.ReactNode;
    className?: string;
}
export interface ChipProps {
    displayName: string;
    isFocused: boolean;
    onRemove: () => void;
    onFocus: () => void;
}
export {};
//# sourceMappingURL=Combobox.types.d.ts.map