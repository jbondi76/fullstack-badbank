import PropTypes from 'prop-types';
import type { ComboboxProps } from './Combobox.types';
export declare function Combobox<M extends boolean>({ children, label, description, placeholder, 'aria-label': ariaLabel, disabled, size, darkMode: darkModeProp, state, errorMessage, searchState, searchEmptyMessage, searchErrorMessage, searchLoadingMessage, filteredOptions, onFilter, clearable, onClear, overflow, multiselect, initialValue, onChange, value, chipTruncationLocation, chipCharacterLimit, className, usePortal, portalClassName, portalContainer, scrollContainer, popoverZIndex, popoverClassName, ...rest }: ComboboxProps<M>): JSX.Element;
export declare namespace Combobox {
    var propTypes: {
        multiselect: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<NonNullable<string | (string | null | undefined)[] | null | undefined>>;
        initialValue: PropTypes.Requireable<NonNullable<string | (string | null | undefined)[] | null | undefined>>;
        overflow: PropTypes.Requireable<"expand-y" | "scroll-x" | "expand-x">;
        darkMode: PropTypes.Requireable<boolean>;
        label: PropTypes.Requireable<string>;
        'aria-label': PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        chipCharacterLimit: PropTypes.Requireable<number>;
        chipTruncationLocation: PropTypes.Requireable<"end" | "start" | "none" | "middle">;
        onClear: PropTypes.Requireable<(...args: any[]) => any>;
        onFilter: PropTypes.Requireable<(...args: any[]) => any>;
        clearable: PropTypes.Requireable<boolean>;
        searchLoadingMessage: PropTypes.Requireable<string>;
        searchErrorMessage: PropTypes.Requireable<string>;
        searchEmptyMessage: PropTypes.Requireable<string>;
        searchState: PropTypes.Requireable<"unset" | "loading" | "error">;
        errorMessage: PropTypes.Requireable<string>;
        state: PropTypes.Requireable<"none" | "error">;
        size: PropTypes.Requireable<"default" | "large">;
        disabled: PropTypes.Requireable<boolean>;
        description: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        filteredOptions: PropTypes.Requireable<(string | null | undefined)[]>;
        popoverZIndex: PropTypes.Requireable<number>;
        usePortal: PropTypes.Requireable<boolean>;
        scrollContainer: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        portalContainer: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        portalClassName: PropTypes.Requireable<string>;
    };
}
//# sourceMappingURL=Combobox.d.ts.map