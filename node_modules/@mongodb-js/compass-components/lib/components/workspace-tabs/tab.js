"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tab = void 0;
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const sortable_1 = require("@dnd-kit/sortable");
const utilities_1 = require("@dnd-kit/utilities");
const use_theme_1 = require("../../hooks/use-theme");
const leafygreen_1 = require("../leafygreen");
const merge_props_1 = require("../../utils/merge-props");
const use_default_action_1 = require("../../hooks/use-default-action");
function focusedChild(className) {
    return `&:hover ${className}, &:focus-visible ${className}, &:focus-within:not(:focus) ${className}`;
}
const tabTransition = '.16s ease-in-out';
const tabStyles = (0, emotion_1.css)({
    display: 'grid',
    gridTemplateColumns: 'min-content 1fr min-content',
    alignItems: 'center',
    paddingLeft: 12,
    paddingRight: tokens_1.spacing[1],
    gap: tokens_1.spacing[2],
    paddingBottom: '4px',
    maxWidth: tokens_1.spacing[6] * 4,
    minWidth: tokens_1.spacing[6] * 2,
    height: 36,
    position: 'relative',
    outline: 'none',
    overflow: 'hidden',
    paddingTop: tokens_1.spacing[100],
    backgroundColor: 'var(--workspace-tab-background-color)',
    color: 'var(--workspace-tab-color)',
    boxShadow: 'inset -1px -1px 0 0 var(--workspace-tab-border-color)',
    '&:hover': {
        cursor: 'pointer',
        zIndex: 1,
    },
    '&:focus-visible': {
        boxShadow: 'inset 0 0 0 1px var(--workspace-tab-border-color)',
    },
    [focusedChild('.workspace-tab-close-button')]: {
        visibility: 'visible',
    },
});
const animatedSubtitleStyles = (0, emotion_1.css)({
    [focusedChild('.workspace-tab-title')]: {
        transform: 'translateY(6px)',
    },
    [focusedChild('.workspace-tab-subtitle')]: {
        opacity: 1,
        transform: 'translateY(-4px)',
        pointerEvents: 'auto',
    },
});
const tabLightThemeStyles = (0, emotion_1.css)({
    '--workspace-tab-background-color': palette_1.palette.gray.light3,
    '--workspace-tab-selected-background-color': palette_1.palette.white,
    '--workspace-tab-border-color': palette_1.palette.gray.light2,
    '--workspace-tab-color': palette_1.palette.gray.base,
    '--workspace-tab-selected-color': palette_1.palette.green.dark2,
    '--workspace-tab-selected-border-color': 'transparent',
    '&:focus-visible': {
        '--workspace-tab-selected-color': palette_1.palette.blue.base,
        '--workspace-tab-border-color': palette_1.palette.blue.base,
    },
});
const tabDarkThemeStyles = (0, emotion_1.css)({
    '--workspace-tab-background-color': palette_1.palette.gray.dark3,
    '--workspace-tab-selected-background-color': palette_1.palette.black,
    '--workspace-tab-border-color': palette_1.palette.gray.dark2,
    '--workspace-tab-color': palette_1.palette.gray.base,
    '--workspace-tab-selected-color': palette_1.palette.green.base,
    '--workspace-tab-selected-border-color': 'transparent',
    '&:focus-visible': {
        '--workspace-tab-selected-color': palette_1.palette.blue.light1,
        '--workspace-tab-border-color': palette_1.palette.blue.light1,
    },
});
const selectedTabStyles = (0, emotion_1.css)({
    color: 'var(--workspace-tab-selected-color)',
    backgroundColor: 'var(--workspace-tab-selected-background-color)',
    boxShadow: 'inset -1px 0 0 0 var(--workspace-tab-border-color)',
    '&:hover': {
        cursor: 'default',
    },
});
const selectedThemedTabStyles = (0, emotion_1.css)({
    borderTop: `${tokens_1.spacing[100]}px solid var(--workspace-tab-selected-border-color)`,
    paddingTop: 0,
});
const draggingTabStyles = (0, emotion_1.css)({
    cursor: 'grabbing !important',
});
const tabIconStyles = (0, emotion_1.css)({
    color: 'currentColor',
});
const tabTitleContainerStyles = (0, emotion_1.css)({
    position: 'relative',
    minWidth: 0,
});
const tabTitleStyles = (0, emotion_1.css)({
    fontSize: 12,
    lineHeight: '16px',
    fontWeight: 700,
    color: 'currentColor',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    transform: 'translateY(0)',
    transition: tabTransition,
    transitionProperty: 'opacity, transform',
});
const tabSubtitleStyles = (0, emotion_1.css)({
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    fontSize: 10,
    lineHeight: '12px',
    color: 'var(--workspace-tab-color)',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    opacity: 0,
    transform: 'translateY(0)',
    transition: tabTransition,
    transitionProperty: 'opacity, transform',
    pointerEvents: 'none',
});
const closeButtonStyles = (0, emotion_1.css)({
    visibility: 'hidden',
});
const selectedCloseButtonStyles = (0, emotion_1.css)({
    visibility: 'visible',
});
function Tab({ title, isSelected, isDragging, onSelect, onClose, tabContentId, iconGlyph, subtitle, tabTheme, ...props }) {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const defaultActionProps = (0, use_default_action_1.useDefaultAction)(onSelect);
    const { listeners, setNodeRef, transform, transition } = (0, sortable_1.useSortable)({
        id: tabContentId,
    });
    const tabProps = (0, merge_props_1.mergeProps)(defaultActionProps, listeners ?? {}, props);
    const themeClass = (0, react_1.useMemo)(() => {
        if (!tabTheme) {
            return darkMode ? tabDarkThemeStyles : tabLightThemeStyles;
        }
        return (0, emotion_1.css)(tabTheme);
    }, [tabTheme, darkMode]);
    const style = {
        transform: utilities_1.CSS.Transform.toString(transform),
        transition,
        cursor: 'grabbing !important',
        minWidth: (subtitle?.length ?? 0) > 16 ? tokens_1.spacing[6] * 3 : undefined,
    };
    return (react_1.default.createElement("div", { ref: setNodeRef, style: style, className: (0, emotion_1.cx)(tabStyles, themeClass, isSelected && selectedTabStyles, isSelected && tabTheme && selectedThemedTabStyles, isDragging && draggingTabStyles, subtitle && animatedSubtitleStyles), "aria-selected": isSelected, role: "tab", tabIndex: isSelected ? 0 : -1, "aria-controls": tabContentId, "data-testid": "workspace-tab-button", title: subtitle ? subtitle : title, ...tabProps },
        iconGlyph === 'Logo' && (react_1.default.createElement(leafygreen_1.MongoDBLogoMark, { height: 16, role: "presentation", className: tabIconStyles, "data-testid": `workspace-tab-icon-${iconGlyph}` })),
        iconGlyph !== 'Logo' && (react_1.default.createElement(leafygreen_1.Icon, { size: "small", role: "presentation", className: tabIconStyles, glyph: iconGlyph, "data-testid": `workspace-tab-icon-${iconGlyph}` })),
        react_1.default.createElement("div", { className: tabTitleContainerStyles },
            react_1.default.createElement("div", { className: (0, emotion_1.cx)(tabTitleStyles, 'workspace-tab-title') }, title),
            subtitle && (react_1.default.createElement("div", { className: (0, emotion_1.cx)(tabSubtitleStyles, 'workspace-tab-subtitle') }, subtitle))),
        react_1.default.createElement(leafygreen_1.IconButton, { className: (0, emotion_1.cx)(closeButtonStyles, isSelected && selectedCloseButtonStyles, 'workspace-tab-close-button'), onClick: (e) => {
                e.stopPropagation();
                onClose();
            }, "aria-label": "Close Tab", "data-testid": "close-workspace-tab" },
            react_1.default.createElement(leafygreen_1.Icon, { glyph: "X", role: "presentation" }))));
}
exports.Tab = Tab;
//# sourceMappingURL=tab.js.map