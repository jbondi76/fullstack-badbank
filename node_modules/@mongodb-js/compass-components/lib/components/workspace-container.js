"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceContainer = void 0;
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const polished_1 = require("polished");
const react_intersection_observer_1 = require("react-intersection-observer");
const use_theme_1 = require("../hooks/use-theme");
const workspacetoolbarContainerQueryName = 'compass-workspace-container';
const workspaceContainerStyles = (0, emotion_1.css)({
    height: '100%',
    width: '100%',
    display: 'flex',
    flexDirection: 'column',
    overflow: 'hidden',
});
const toolbarStyles = (0, emotion_1.css)({
    flex: 'none',
    containerName: workspacetoolbarContainerQueryName,
    containerType: 'inline-size',
});
const scrollBoxStyles = (0, emotion_1.css)({
    flex: 1,
    width: '100%',
    minHeight: 0,
    position: 'relative',
    zIndex: 0,
});
const shadowHeight = tokens_1.spacing[4];
const fadeIn = (0, emotion_1.keyframes)({
    from: {
        opacity: 0,
    },
    to: {
        opacity: 1,
    },
});
const shadowContainerStyles = (0, emotion_1.css)({
    overflow: 'hidden',
    position: 'absolute',
    top: 0,
    display: 'block',
    width: '100%',
    height: shadowHeight * 2,
    flex: 'none',
    zIndex: 1,
    pointerEvents: 'none',
    animation: `${fadeIn} .1s linear`,
});
const boxShadow = (color) => `0px 2px ${shadowHeight}px -1px ${color}`;
const shadowStyles = (0, emotion_1.css)({
    height: shadowHeight,
    borderRadius: tokens_1.spacing[2],
    width: `calc(100% - ${shadowHeight}px)`,
    margin: '0 auto',
    marginTop: -shadowHeight,
});
const shadowStylesLight = (0, emotion_1.css)({
    boxShadow: boxShadow((0, polished_1.rgba)(palette_1.palette.black, 0.15)),
});
const shadowStylesDark = (0, emotion_1.css)({
    boxShadow: boxShadow((0, polished_1.rgba)(palette_1.palette.black, 0.4)),
});
const workspaceContentStyles = (0, emotion_1.css)({
    overflow: 'auto',
    height: '100%',
    width: '100%',
    display: 'block',
    position: 'relative',
    zIndex: 0,
});
const lightThemeStyles = (0, emotion_1.css)({
    backgroundColor: palette_1.palette.white,
    color: palette_1.palette.gray.dark2,
});
const darkThemeStyles = (0, emotion_1.css)({
    backgroundColor: palette_1.palette.black,
    color: palette_1.palette.white,
});
function WorkspaceContainer({ className, children, toolbar, toolbarRef, scrollableContainerRef, initialTopInView = true, 'data-testid': dataTestId, ...props }) {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const scrollContainer = (0, react_1.useRef)(null);
    const [scrollDetectionTrigger, triggerStillInView] = (0, react_intersection_observer_1.useInView)({
        root: scrollContainer.current,
        initialInView: initialTopInView,
    });
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(workspaceContainerStyles, darkMode ? darkThemeStyles : lightThemeStyles, className), "data-testid": dataTestId, ...props },
        toolbar && (react_1.default.createElement("div", { ref: toolbarRef, className: toolbarStyles }, toolbar)),
        react_1.default.createElement("div", { className: scrollBoxStyles, ref: scrollContainer },
            triggerStillInView || (react_1.default.createElement("div", { className: shadowContainerStyles },
                react_1.default.createElement("div", { className: (0, emotion_1.cx)(shadowStyles, darkMode ? shadowStylesDark : shadowStylesLight) }))),
            react_1.default.createElement("div", { ref: scrollableContainerRef, className: workspaceContentStyles }, typeof children === 'function' ? (children(scrollDetectionTrigger)) : (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("div", { ref: scrollDetectionTrigger }),
                children))))));
}
exports.WorkspaceContainer = WorkspaceContainer;
WorkspaceContainer.toolbarContainerQueryName =
    workspacetoolbarContainerQueryName;
//# sourceMappingURL=workspace-container.js.map