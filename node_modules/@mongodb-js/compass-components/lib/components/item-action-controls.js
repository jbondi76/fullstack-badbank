"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropdownMenuButton = exports.ItemActionControls = exports.ItemActionGroup = exports.ItemActionMenu = void 0;
const react_1 = __importStar(require("react"));
const leafygreen_1 = require("./leafygreen");
const tooltip_1 = require("./tooltip");
const tokens_1 = require("@leafygreen-ui/tokens");
const emotion_1 = require("@leafygreen-ui/emotion");
function isSeparatorMenuAction(menuAction) {
    return menuAction.separator;
}
const ItemActionButtonSize = {
    XSmall: 'xsmall',
    Small: 'small',
    Default: 'default',
};
const actionControlsStyle = (0, emotion_1.css)({
    flex: 'none',
    marginLeft: 'auto',
    alignItems: 'center',
    display: 'flex',
});
const actionGroupButtonStyle = (0, emotion_1.css)({
    '&:not(:first-child)': {
        marginLeft: tokens_1.spacing[100],
    },
});
const actionMenuWithActionControlsStyles = (0, emotion_1.css)({
    marginLeft: tokens_1.spacing[100],
});
const iconContainerStyle = (0, emotion_1.css)({
    display: 'block',
    flex: 'none',
    fontSize: 0,
    lineHeight: 0,
});
const buttonSizeStyle = {
    default: undefined,
    small: (0, emotion_1.css)({
        flex: 'none',
        width: `${tokens_1.spacing[4]}px !important`,
        height: `${tokens_1.spacing[4]}px !important`,
    }),
    xsmall: (0, emotion_1.css)({
        flex: 'none',
        width: `${20}px !important`,
        height: `${20}px !important`,
    }),
};
function actionTestId(dataTestId, action) {
    return dataTestId ? `${dataTestId}-${action}-action` : undefined;
}
const ActionGlyph = ({ glyph, size, ...props }) => {
    if (typeof glyph === 'string') {
        return react_1.default.createElement(leafygreen_1.Icon, { size: size, glyph: glyph, ...props });
    }
    if (react_1.default.isValidElement(glyph)) {
        return glyph;
    }
    return null;
};
const ItemActionButton = (0, react_1.forwardRef)(function IconButtonSmall({ glyph, size, label, onClick, children, title, className, ...rest }, ref) {
    return (react_1.default.createElement(leafygreen_1.IconButton, { ref: ref, className: (0, emotion_1.cx)(buttonSizeStyle[size], className), "aria-label": label, title: title, onClick: onClick, ...rest },
        react_1.default.createElement("span", { role: "presentation", className: iconContainerStyle },
            react_1.default.createElement(ActionGlyph, { glyph: glyph, size: size })),
        children));
});
function ItemActionMenu({ isVisible = true, actions, onAction, className, menuClassName, usePortal, iconClassName, iconStyle, iconSize = ItemActionButtonSize.Default, 'data-testid': dataTestId, }) {
    const menuTriggerRef = (0, react_1.useRef)(null);
    const [isMenuOpen, setIsMenuOpen] = (0, react_1.useState)(false);
    const onClick = (0, react_1.useCallback)((evt) => {
        evt.stopPropagation();
        if (evt.currentTarget.dataset.menuitem) {
            setIsMenuOpen(false);
            menuTriggerRef.current?.focus();
        }
        onAction(evt.currentTarget.dataset.action);
    }, [onAction]);
    const shouldRender = isMenuOpen || (isVisible && actions.length > 0);
    if (!shouldRender) {
        return null;
    }
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(actionControlsStyle, className) },
        react_1.default.createElement(leafygreen_1.Menu, { className: menuClassName, open: isMenuOpen, setOpen: setIsMenuOpen, refEl: menuTriggerRef, usePortal: usePortal, "data-testid": dataTestId, trigger: ({ onClick, children, }) => {
                return (react_1.default.createElement(ItemActionButton, { ref: menuTriggerRef, size: iconSize, glyph: "Ellipsis", label: "Show actions", title: "Show actions", "data-testid": dataTestId ? `${dataTestId}-show-actions` : undefined, onClick: (evt) => {
                        evt.stopPropagation();
                        onClick && onClick(evt);
                    }, className: (0, emotion_1.cx)(actionGroupButtonStyle, iconClassName), style: iconStyle }, children));
            } }, actions.map((menuAction, idx) => {
            if (isSeparatorMenuAction(menuAction)) {
                return react_1.default.createElement(leafygreen_1.MenuSeparator, { key: `separator-${idx}` });
            }
            const { action, label, icon, variant, isDisabled, disabledDescription, } = menuAction;
            return (react_1.default.createElement(leafygreen_1.MenuItem, { key: action, "data-testid": actionTestId(dataTestId, action), "data-action": action, "data-menuitem": true, glyph: react_1.default.createElement(ActionGlyph, { glyph: icon, size: iconSize }), onClick: onClick, variant: variant || 'default', disabled: isDisabled, description: isDisabled ? disabledDescription : '' }, label));
        }))));
}
exports.ItemActionMenu = ItemActionMenu;
function ItemActionGroup({ actions, onAction, className, iconClassName, iconStyle, iconSize = ItemActionButtonSize.Default, isVisible = true, 'data-testid': dataTestId, }) {
    const onClick = (0, react_1.useCallback)((evt) => {
        evt.stopPropagation();
        onAction(evt.currentTarget.dataset.action);
    }, [onAction]);
    const shouldRender = isVisible && actions.length > 0;
    if (!shouldRender) {
        return null;
    }
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(actionControlsStyle, className), "data-testid": dataTestId }, actions.map((menuItem, idx) => {
        if (isSeparatorMenuAction(menuItem)) {
            return react_1.default.createElement(leafygreen_1.MenuSeparator, { key: `separator-${idx}` });
        }
        const { action, icon, label, isDisabled, tooltip, tooltipProps, actionButtonClassName, } = menuItem;
        const button = (react_1.default.createElement(ItemActionButton, { key: action, glyph: icon, label: label, title: !tooltip ? label : undefined, size: iconSize, "data-action": action, "data-testid": actionTestId(dataTestId, action), onClick: onClick, className: (0, emotion_1.cx)(actionGroupButtonStyle, iconClassName, actionButtonClassName), style: iconStyle, disabled: isDisabled }));
        if (tooltip) {
            return (react_1.default.createElement(tooltip_1.Tooltip, { key: action, ...tooltipProps, trigger: ({ children, ...props }) => (react_1.default.createElement("div", { ...props, className: actionGroupButtonStyle, style: { display: 'inherit' } },
                    button,
                    children)) }, tooltip));
        }
        return button;
    })));
}
exports.ItemActionGroup = ItemActionGroup;
function ItemActionControls({ isVisible = true, actions, onAction, className, menuClassName, iconClassName, iconStyle, iconSize = ItemActionButtonSize.Default, usePortal, collapseAfter = 0, collapseToMenuThreshold = 2, 'data-testid': dataTestId, }) {
    const sharedProps = (0, react_1.useMemo)(() => ({
        isVisible,
        onAction,
        className: (0, emotion_1.cx)('item-action-controls', className),
        iconClassName,
        iconStyle,
        iconSize,
        'data-testid': dataTestId,
    }), [
        isVisible,
        onAction,
        className,
        iconClassName,
        iconStyle,
        iconSize,
        dataTestId,
    ]);
    const sharedMenuProps = (0, react_1.useMemo)(() => ({
        menuClassName,
        usePortal,
    }), [menuClassName, usePortal]);
    if (actions.length === 0) {
        return null;
    }
    if (collapseAfter > 0) {
        const visibleActions = actions.slice(0, collapseAfter);
        const collapsedActions = actions.slice(collapseAfter);
        return (react_1.default.createElement("div", { className: actionControlsStyle },
            react_1.default.createElement(ItemActionGroup, { actions: visibleActions, ...sharedProps }),
            react_1.default.createElement(ItemActionMenu, { actions: collapsedActions, ...sharedProps, ...sharedMenuProps, className: (0, emotion_1.cx)(actionMenuWithActionControlsStyles, sharedProps.className) })));
    }
    const shouldShowMenu = actions.length >= collapseToMenuThreshold;
    if (shouldShowMenu) {
        return (react_1.default.createElement(ItemActionMenu, { actions: actions, ...sharedProps, ...sharedMenuProps }));
    }
    return react_1.default.createElement(ItemActionGroup, { actions: actions, ...sharedProps });
}
exports.ItemActionControls = ItemActionControls;
function DropdownMenuButton({ isVisible = true, actions, onAction, usePortal, activeAction, buttonText, buttonProps, iconSize = ItemActionButtonSize.Default, 'data-testid': dataTestId, }) {
    const menuTriggerRef = (0, react_1.useRef)(null);
    const [isMenuOpen, setIsMenuOpen] = (0, react_1.useState)(false);
    const onClick = (0, react_1.useCallback)((evt) => {
        evt.stopPropagation();
        if (evt.currentTarget.dataset.menuitem) {
            setIsMenuOpen(false);
            menuTriggerRef.current?.focus();
        }
        onAction(evt.currentTarget.dataset.action);
    }, [onAction]);
    const shouldRender = isMenuOpen || (isVisible && actions.length > 0);
    if (!shouldRender) {
        return null;
    }
    return (react_1.default.createElement(leafygreen_1.Menu, { open: isMenuOpen, setOpen: setIsMenuOpen, justify: "start", refEl: menuTriggerRef, usePortal: usePortal, "data-testid": dataTestId, trigger: ({ onClick, children, }) => {
            return (react_1.default.createElement(leafygreen_1.Button, { ...buttonProps, ref: menuTriggerRef, "data-testid": dataTestId ? `${dataTestId}-show-actions` : undefined, onClick: (evt) => {
                    evt.stopPropagation();
                    onClick && onClick(evt);
                }, rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { glyph: 'CaretDown' }) },
                buttonText,
                children));
        } }, actions.map((menuAction, idx) => {
        if (isSeparatorMenuAction(menuAction)) {
            return react_1.default.createElement(leafygreen_1.MenuSeparator, { key: `separator-${idx}` });
        }
        const { action, label, icon } = menuAction;
        return (react_1.default.createElement(leafygreen_1.MenuItem, { active: activeAction === action, key: action, "data-testid": actionTestId(dataTestId, action), "data-action": action, "data-menuitem": true, glyph: react_1.default.createElement(ActionGlyph, { glyph: icon, size: iconSize }), onClick: onClick }, label));
    })));
}
exports.DropdownMenuButton = DropdownMenuButton;
//# sourceMappingURL=item-action-controls.js.map