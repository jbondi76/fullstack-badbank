"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancelLoader = exports.SpinLoader = exports.SpinLoaderWithLabel = void 0;
const react_1 = __importDefault(require("react"));
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const emotion_1 = require("@leafygreen-ui/emotion");
const use_theme_1 = require("../hooks/use-theme");
const leafygreen_1 = require("./leafygreen");
const containerStyles = (0, emotion_1.css)({
    display: 'flex',
    gap: tokens_1.spacing[2],
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    maxWidth: tokens_1.spacing[6] * 8,
});
const textStyles = (0, emotion_1.css)({
    color: palette_1.palette.green.dark2,
    textAlign: 'center',
});
const textDarkStyles = (0, emotion_1.css)({
    color: palette_1.palette.green.light2,
});
const shellLoaderSpin = (0, emotion_1.keyframes) `
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
`;
const spinLoaderStyle = (0, emotion_1.css) `
  border: 2px solid transparent;
  border-radius: 50%;
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  display: inline-block;

  animation: ${shellLoaderSpin} 700ms ease infinite;
`;
const lightStyles = (0, emotion_1.css)({
    borderTop: `2px solid ${palette_1.palette.gray.dark3}`,
});
const darkStyles = (0, emotion_1.css)({
    borderTop: `2px solid ${palette_1.palette.gray.light3}`,
});
function SpinLoader({ size = 12, title, darkMode: _darkMode, }) {
    const darkMode = (0, use_theme_1.useDarkMode)(_darkMode);
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(spinLoaderStyle, darkMode ? darkStyles : lightStyles), style: {
            width: size,
            height: size,
        }, title: title }));
}
exports.SpinLoader = SpinLoader;
function SpinLoaderWithLabel({ className, progressText, ['data-testid']: dataTestId, children, darkMode: _darkMode, ...props }) {
    const darkMode = (0, use_theme_1.useDarkMode)(_darkMode);
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(containerStyles, className), "data-testid": dataTestId },
        react_1.default.createElement(SpinLoader, { size: tokens_1.spacing[4], darkMode: darkMode, ...props }),
        react_1.default.createElement(leafygreen_1.Subtitle, { className: (0, emotion_1.cx)(textStyles, darkMode && textDarkStyles) }, progressText),
        children));
}
exports.SpinLoaderWithLabel = SpinLoaderWithLabel;
function CancelLoader({ cancelText = 'Cancel', onCancel, ...props }) {
    return (react_1.default.createElement(SpinLoaderWithLabel, { ...props },
        react_1.default.createElement(leafygreen_1.Button, { variant: "primaryOutline", onClick: onCancel, "data-testid": `${props['data-testid'] ?? 'spin-loader'}-button` }, cancelText)));
}
exports.CancelLoader = CancelLoader;
//# sourceMappingURL=loader.js.map