"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionsToggle = void 0;
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const use_focus_ring_1 = require("../hooks/use-focus-ring");
const leafygreen_1 = require("./leafygreen");
const merge_props_1 = require("../utils/merge-props");
const optionContainerStyles = (0, emotion_1.css)({
    textAlign: 'center',
});
const optionsButtonStyles = (0, emotion_1.css)({
    backgroundColor: 'transparent',
    border: 'none',
    paddingTop: tokens_1.spacing[1],
    paddingBottom: tokens_1.spacing[1],
    paddingLeft: tokens_1.spacing[2],
    paddingRight: tokens_1.spacing[2],
});
const optionStyles = (0, emotion_1.css)({
    display: 'flex',
    alignItems: 'center',
});
const OptionsToggle = ({ 'aria-controls': ariaControls, isExpanded, id, 'data-testid': dataTestId, onToggleOptions, label = () => 'Options', 'aria-label': ariaLabel = (expanded) => {
    return expanded ? 'Fewer Options' : 'More Options';
}, }) => {
    const optionsIcon = (0, react_1.useMemo)(() => (isExpanded ? 'CaretDown' : 'CaretRight'), [isExpanded]);
    const optionsLabel = label(isExpanded);
    const labelStyle = (0, react_1.useMemo)(() => {
        const maxLabelLength = Math.max(label(true).length, label(false).length);
        return {
            width: `calc(${maxLabelLength}ch + ${tokens_1.spacing[3]}px + ${tokens_1.spacing[2]}px)`,
        };
    }, [label]);
    const optionsAriaLabel = ariaLabel(isExpanded);
    const focusRingProps = (0, use_focus_ring_1.useFocusRing)();
    const buttonProps = (0, merge_props_1.mergeProps)({ className: optionsButtonStyles }, focusRingProps);
    const onClick = (0, react_1.useCallback)(() => {
        onToggleOptions();
    }, [onToggleOptions]);
    return (react_1.default.createElement("div", { className: optionContainerStyles, style: labelStyle },
        react_1.default.createElement(leafygreen_1.Link, { "aria-label": optionsAriaLabel, "aria-expanded": isExpanded, "aria-controls": ariaControls, as: "button", type: "button", hideExternalIcon: true, "data-testid": dataTestId, id: id, onClick: onClick, ...buttonProps },
            react_1.default.createElement("div", { className: optionStyles },
                optionsLabel,
                react_1.default.createElement(leafygreen_1.Icon, { glyph: optionsIcon })))));
};
exports.OptionsToggle = OptionsToggle;
//# sourceMappingURL=options-toggle.js.map