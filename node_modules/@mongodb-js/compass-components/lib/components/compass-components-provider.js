"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompassComponentsProvider = void 0;
const react_1 = __importStar(require("react"));
const leafygreen_provider_1 = __importDefault(require("@leafygreen-ui/leafygreen-provider"));
const use_confirmation_1 = require("../hooks/use-confirmation");
const use_toast_1 = require("../hooks/use-toast");
const guide_cue_1 = require("./guide-cue/guide-cue");
const signal_popover_1 = require("./signal-popover");
const link_1 = require("./links/link");
const use_stacked_component_1 = require("../hooks/use-stacked-component");
const darkModeMediaQuery = (() => {
    return typeof window !== 'undefined' && window.matchMedia
        ? window.matchMedia('(prefers-color-scheme: dark)')
        :
            {
                matches: false,
                addEventListener() {
                },
                removeEventListener() {
                },
            };
})();
function useDarkMode(_darkMode) {
    const isDarkModeControlled = typeof _darkMode !== 'undefined';
    const [darkMode, setDarkMode] = (0, react_1.useState)(_darkMode ?? darkModeMediaQuery.matches);
    (0, react_1.useEffect)(() => {
        const onDarkModeMediaQueryChange = () => {
            setDarkMode(darkModeMediaQuery.matches);
        };
        darkModeMediaQuery.addEventListener('change', onDarkModeMediaQueryChange);
        return () => {
            darkModeMediaQuery.removeEventListener('change', onDarkModeMediaQueryChange);
        };
    }, []);
    return isDarkModeControlled ? _darkMode : darkMode;
}
const CompassComponentsProvider = ({ darkMode: _darkMode, children, onNextGuideGue, onNextGuideCueGroup, utmSource, utmMedium, stackedElementsZIndex, ...signalHooksProviderProps }) => {
    const darkMode = useDarkMode(_darkMode);
    const [portalContainer, setPortalContainer] = (0, react_1.useState)(null);
    const [scrollContainer, setScrollContainer] = (0, react_1.useState)(null);
    const popoverPortalContainer = (0, react_1.useMemo)(() => {
        return { portalContainer, scrollContainer };
    }, [portalContainer, scrollContainer]);
    return (react_1.default.createElement(leafygreen_provider_1.default, { darkMode: darkMode, popoverPortalContainer: popoverPortalContainer },
        react_1.default.createElement(use_stacked_component_1.StackedComponentProvider, { zIndex: stackedElementsZIndex },
            react_1.default.createElement(link_1.RequiredURLSearchParamsProvider, { utmSource: utmSource, utmMedium: utmMedium },
                react_1.default.createElement(guide_cue_1.GuideCueProvider, { onNext: onNextGuideGue, onNextGroup: onNextGuideCueGroup },
                    react_1.default.createElement(signal_popover_1.SignalHooksProvider, { ...signalHooksProviderProps },
                        react_1.default.createElement(use_confirmation_1.ConfirmationModalArea, null,
                            react_1.default.createElement(use_toast_1.ToastArea, null, typeof children === 'function'
                                ? children({
                                    darkMode,
                                    portalContainerRef: setPortalContainer,
                                    scrollContainerRef: setScrollContainer,
                                })
                                : children))))))));
};
exports.CompassComponentsProvider = CompassComponentsProvider;
//# sourceMappingURL=compass-components-provider.js.map