"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractivePopover = void 0;
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const focus_trap_react_1 = __importDefault(require("focus-trap-react"));
const leafygreen_1 = require("./leafygreen");
const tokens_1 = require("@leafygreen-ui/tokens");
const palette_1 = require("@leafygreen-ui/palette");
const polished_1 = require("polished");
const use_theme_1 = require("../hooks/use-theme");
const use_hotkeys_1 = require("../hooks/use-hotkeys");
const utils_1 = require("@react-aria/utils");
const borderRadius = tokens_1.spacing[2];
const contentContainerStyles = (0, emotion_1.css)({
    display: 'flex',
    flexDirection: 'column',
    height: '100%',
    alignItems: 'center',
    borderRadius: borderRadius,
    boxShadow: `0px 2px 4px -1px ${(0, polished_1.rgba)(palette_1.palette.black, 0.15)}`,
    border: `1px solid`,
    overflow: 'hidden',
    width: 'fit-content',
});
const contentContainerStylesLight = (0, emotion_1.css)({
    borderColor: palette_1.palette.gray.light2,
    backgroundColor: palette_1.palette.gray.light3,
    color: palette_1.palette.gray.dark2,
});
const contentContainerStylesDark = (0, emotion_1.css)({
    borderColor: palette_1.palette.gray.dark2,
    backgroundColor: palette_1.palette.black,
    color: palette_1.palette.white,
});
const closeButtonStyles = (0, emotion_1.css)({
    position: 'absolute',
    top: tokens_1.spacing[2],
    right: tokens_1.spacing[2],
});
function InteractivePopover({ className, children, trigger, hideCloseButton = false, customFocusTrapFallback = undefined, open, setOpen, containedElements = [], align, justify, spacing, popoverZIndex, containerClassName, closeButtonClassName, }) {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const triggerRef = (0, react_1.useRef)(null);
    const closeButtonRef = (0, react_1.useRef)(null);
    const popoverContentContainerRef = (0, react_1.useRef)(null);
    const onClose = (0, react_1.useCallback)(() => {
        setOpen(false);
        setTimeout(() => {
            triggerRef.current?.focus();
        });
    }, [setOpen]);
    const onClickTrigger = (0, react_1.useCallback)((event) => {
        if (open) {
            if (containedElements.some((selector) => {
                return document
                    .querySelector(selector)
                    ?.contains(event.target);
            })) {
                return;
            }
            onClose();
            return;
        }
        setOpen(!open);
    }, [open, setOpen, onClose, containedElements]);
    (0, react_1.useEffect)(() => {
        if (!open) {
            return;
        }
        const clickEventListener = (event) => {
            if (!popoverContentContainerRef.current ||
                popoverContentContainerRef.current.contains(event.target)) {
                return;
            }
            if (!triggerRef.current ||
                triggerRef.current.contains(event.target)) {
                return;
            }
            if (containedElements.some((selector) => {
                return document
                    .querySelector(selector)
                    ?.contains(event.target);
            })) {
                return;
            }
            onClose();
        };
        window.addEventListener('mousedown', clickEventListener);
        window.addEventListener('touchstart', clickEventListener);
        return () => {
            window.removeEventListener('mousedown', clickEventListener);
            window.removeEventListener('touchstart', clickEventListener);
        };
    }, [open, onClose, containedElements]);
    (0, use_hotkeys_1.useHotkeys)('Escape', onClose, { enabled: open }, [onClose]);
    const closeButtonId = (0, utils_1.useId)('close-button-id');
    return trigger({
        onClick: onClickTrigger,
        ref: triggerRef,
        children: (react_1.default.createElement(leafygreen_1.Popover, { align: align ?? 'bottom', justify: justify ?? 'start', active: open, adjustOnMutation: true, usePortal: true, spacing: spacing ?? 0, className: className, refEl: triggerRef, popoverZIndex: popoverZIndex },
            react_1.default.createElement(focus_trap_react_1.default, { active: open, focusTrapOptions: {
                    clickOutsideDeactivates: true,
                    fallbackFocus: customFocusTrapFallback || `#${closeButtonId}`,
                } },
                react_1.default.createElement("div", { className: (0, emotion_1.cx)(contentContainerStyles, darkMode
                        ? contentContainerStylesDark
                        : contentContainerStylesLight, containerClassName), ref: popoverContentContainerRef },
                    children,
                    !hideCloseButton && (react_1.default.createElement(leafygreen_1.IconButton, { className: (0, emotion_1.cx)(closeButtonStyles, closeButtonClassName), "data-testid": "interactive-popover-close-button", onClick: (evt) => {
                            evt.stopPropagation();
                            onClose();
                        }, "aria-label": "Close", id: closeButtonId, ref: closeButtonRef },
                        react_1.default.createElement(leafygreen_1.Icon, { glyph: "X" }))))))),
    });
}
exports.InteractivePopover = InteractivePopover;
//# sourceMappingURL=interactive-popover.js.map