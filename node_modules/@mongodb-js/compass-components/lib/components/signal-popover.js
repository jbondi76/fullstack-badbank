"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignalHooksProvider = exports.SignalPopover = void 0;
const react_1 = __importStar(require("react"));
const use_focus_hover_1 = require("../hooks/use-focus-hover");
const leafygreen_1 = require("./leafygreen");
const interactive_popover_1 = require("./interactive-popover");
const merge_props_1 = require("../utils/merge-props");
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const use_theme_1 = require("../hooks/use-theme");
const tokens_1 = require("@leafygreen-ui/tokens");
const guide_cue_1 = require("./guide-cue/guide-cue");
const use_effect_on_change_1 = require("../hooks/use-effect-on-change");
const rafraf_1 = require("../utils/rafraf");
const TrackingHooksContext = react_1.default.createContext({
    onSignalMount() {
    },
    onSignalOpen() {
    },
    onSignalLinkClick() {
    },
    onSignalPrimaryActionClick() {
    },
    onSignalClose() {
    },
});
const SignalHooksProvider = ({ children, ..._hooks }) => {
    const hooksRef = (0, react_1.useRef)(_hooks);
    hooksRef.current = _hooks;
    const hooks = (0, react_1.useMemo)(() => {
        return {
            onSignalMount(id) {
                hooksRef.current.onSignalMount?.(id);
            },
            onSignalOpen(id) {
                hooksRef.current.onSignalOpen?.(id);
            },
            onSignalLinkClick(id) {
                hooksRef.current.onSignalLinkClick?.(id);
            },
            onSignalPrimaryActionClick(id) {
                hooksRef.current.onSignalPrimaryActionClick?.(id);
            },
            onSignalClose(id) {
                hooksRef.current.onSignalClose?.(id);
            },
        };
    }, []);
    return (react_1.default.createElement(TrackingHooksContext.Provider, { value: hooks }, children));
};
exports.SignalHooksProvider = SignalHooksProvider;
const TRANSITION_DURATION_MS = 150;
const signalCardContentStyles = (0, emotion_1.css)({
    '--signalCardBackgroundColor': palette_1.palette.white,
    width: '100%',
    display: 'grid',
    gridTemplateColumns: '1fr',
    gridTemplateRows: 'auto 1fr auto',
    paddingTop: tokens_1.spacing[4],
    paddingBottom: tokens_1.spacing[4],
    paddingLeft: tokens_1.spacing[4],
    paddingRight: tokens_1.spacing[4],
    backgroundColor: 'var(--signalCardBackgroundColor)',
});
const CLOSE_BTN_TOP_WITH_MULTI_SIGNALS = 5;
const CLOSE_BTN_RIGHT_WITH_MULTI_SIGNALS = 5;
const CLOSE_BTN_TOP = 18;
const CLOSE_BTN_RIGHT = 18;
const signalCardContentDarkModeStyles = (0, emotion_1.css)({
    '--signalCardBackgroundColor': palette_1.palette.gray.dark4,
});
const signalCardTitleStyles = (0, emotion_1.css)({
    marginBottom: tokens_1.spacing[2],
    fontSize: tokens_1.spacing[3],
});
const signalCardTitleStylesWithOneSignal = (0, emotion_1.css)({
    paddingRight: CLOSE_BTN_RIGHT,
});
const signalCardDescriptionStyles = (0, emotion_1.css)({
    marginBottom: tokens_1.spacing[3],
});
const signalCardActionGroupStyles = (0, emotion_1.css)({
    display: 'flex',
    justifyContent: 'space-between',
});
const signalCardActionButtonStyles = (0, emotion_1.css)({
    flex: 'none',
});
const signalCardLearnMoreLinkStyles = (0, emotion_1.css)({
    flex: 'none',
});
const SignalCard = ({ id, title, description, learnMoreLink, learnMoreLabel, primaryActionButtonLabel, primaryActionButtonIcon, primaryActionButtonVariant, primaryActionButtonLink, darkMode: _darkMode, onPrimaryActionButtonClick, hasMultiSignals, }) => {
    const darkMode = (0, use_theme_1.useDarkMode)(_darkMode);
    const hooks = (0, react_1.useContext)(TrackingHooksContext);
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(signalCardContentStyles, darkMode && signalCardContentDarkModeStyles), "data-testid": "insight-signal-card", "data-signal-id": id },
        react_1.default.createElement("strong", { className: (0, emotion_1.cx)(signalCardTitleStyles, {
                [signalCardTitleStylesWithOneSignal]: !hasMultiSignals,
            }) }, title),
        react_1.default.createElement(leafygreen_1.Body, { as: "div", baseFontSize: 13, className: signalCardDescriptionStyles }, description),
        react_1.default.createElement("div", { className: signalCardActionGroupStyles },
            primaryActionButtonLabel && (react_1.default.createElement(leafygreen_1.Button, { size: "small", as: primaryActionButtonLink ? 'a' : 'button', target: primaryActionButtonLink ? '_blank' : undefined, href: primaryActionButtonLink, "data-testid": "insight-signal-primary-action", variant: primaryActionButtonVariant ?? 'primaryOutline', className: signalCardActionButtonStyles, leftGlyph: primaryActionButtonIcon ? (react_1.default.createElement(leafygreen_1.Icon, { glyph: primaryActionButtonIcon })) : undefined, onClick: (evt) => {
                    hooks.onSignalPrimaryActionClick(id);
                    onPrimaryActionButtonClick?.(evt);
                } }, primaryActionButtonLabel)),
            react_1.default.createElement(leafygreen_1.Link, { "data-testid": "insight-signal-link", className: signalCardLearnMoreLinkStyles, href: learnMoreLink, target: "_blank", onClick: () => {
                    hooks.onSignalLinkClick(id);
                } }, learnMoreLabel ?? 'Learn more'))));
};
const multiSignalHeaderContainerStyles = (0, emotion_1.css)({
    '--multiSignalHeaderBorderColor': palette_1.palette.gray.light2,
    '--multiSignalHeaderBackgroundColor': palette_1.palette.gray.light3,
    display: 'flex',
    alignItems: 'center',
    paddingTop: tokens_1.spacing[1],
    paddingBottom: tokens_1.spacing[1],
    paddingLeft: tokens_1.spacing[2],
    paddingRight: tokens_1.spacing[4],
    gap: tokens_1.spacing[1],
    backgroundColor: 'var(--multiSignalHeaderBackgroundColor)',
    boxShadow: `inset 0 -1px 0 var(--multiSignalHeaderBorderColor)`,
    fontVariantNumeric: 'tabular-nums',
});
const multiSignalHeaderContainerDarkModeStyles = (0, emotion_1.css)({
    '--multiSignalHeaderBorderColor': palette_1.palette.gray.dark2,
    '--multiSignalHeaderBackgroundColor': palette_1.palette.gray.dark3,
});
const MultiSignalHeader = ({ currentIndex, total, onIndexChange, darkMode: _darkMode }) => {
    const darkMode = (0, use_theme_1.useDarkMode)(_darkMode);
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(multiSignalHeaderContainerStyles, darkMode && multiSignalHeaderContainerDarkModeStyles) },
        react_1.default.createElement(leafygreen_1.IconButton, { "data-testid": "insight-signal-show-prev-button", "aria-label": "Show previous insight", title: "Show previous insight", onClick: (e) => {
                e.stopPropagation();
                onIndexChange(currentIndex - 1);
            }, disabled: currentIndex === 0 },
            react_1.default.createElement(leafygreen_1.Icon, { glyph: "ChevronLeft" })),
        react_1.default.createElement("span", null,
            "Insight ",
            react_1.default.createElement("strong", null, currentIndex + 1),
            " of ",
            react_1.default.createElement("strong", null, total)),
        react_1.default.createElement(leafygreen_1.IconButton, { "data-testid": "insight-signal-show-next-button", "aria-label": "Show next insight", title: "Show next insight", onClick: (e) => {
                e.stopPropagation();
                onIndexChange(currentIndex + 1);
            }, disabled: currentIndex === total - 1 },
            react_1.default.createElement(leafygreen_1.Icon, { glyph: "ChevronRight" }))));
};
const popoverStyles = (0, emotion_1.css)({
    width: 315,
});
const popoverHiddenStyles = (0, emotion_1.css)({
    display: 'none !important',
    opacity: '0 !important',
    transition: 'none !important',
});
const popoverContentContainerStyles = (0, emotion_1.css)({
    display: 'block',
});
const transitionStyles = (0, emotion_1.css)({
    transitionProperty: 'opacity, width, border-radius, color, box-shadow, background-color',
    transitionTimingFunction: 'linear',
    transitionDuration: `${TRANSITION_DURATION_MS}ms`,
});
const badgeStyles = (0, emotion_1.css)({
    padding: 0,
    border: 'none',
    background: 'none',
}, {
    position: 'relative',
    display: 'block',
    width: 18,
    height: 18,
    color: 'var(--badgeColor)',
    backgroundColor: 'var(--badgeBackgroundColor)',
    boxShadow: `inset 0 0 0 1px var(--badgeBorderColor)`,
    borderRadius: '9px',
    fontSize: '12px',
    lineHeight: '14px',
    fontWeight: 700,
    overflow: 'hidden',
    cursor: 'pointer',
}, transitionStyles);
const badgeLightModeStyles = (0, emotion_1.css)({
    '--badgeBackgroundColor': palette_1.palette.blue.light3,
    '--badgeBorderColor': palette_1.palette.blue.light2,
    '--badgeColor': palette_1.palette.blue.dark1,
});
const badgeDarkModeStyles = (0, emotion_1.css)({
    '--badgeBackgroundColor': palette_1.palette.blue.dark2,
    '--badgeBorderColor': palette_1.palette.blue.dark1,
    '--badgeColor': palette_1.palette.blue.light2,
});
const badgeHoveredStyles = (0, emotion_1.css)({
    borderRadius: 5,
});
const badgeHoveredLightModeStyles = (0, emotion_1.css)({
    '--badgeBackgroundColor': palette_1.palette.blue.light1,
    '--badgeBorderColor': palette_1.palette.blue.dark1,
    '--badgeColor': palette_1.palette.white,
    borderRadius: 5,
});
const badgeHoveredDarkModeStyles = (0, emotion_1.css)({
    '--badgeBackgroundColor': palette_1.palette.blue.dark1,
    '--badgeBorderColor': palette_1.palette.blue.base,
    '--badgeColor': palette_1.palette.blue.light3,
});
const badgeIconStyles = (0, emotion_1.css)({});
const badgeIconCollapsedStyles = (0, emotion_1.css)({
    position: 'absolute',
    top: 2,
    left: 2,
}, transitionStyles);
const badgeLabelStyles = (0, emotion_1.css)({
    position: 'absolute',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    textTransform: 'uppercase',
    top: 2,
}, transitionStyles);
const singleInsightBadge = (0, emotion_1.css)({
    justifyContent: 'flex-start',
    paddingLeft: 2,
});
const closeButtonStyles = (0, emotion_1.css)({
    top: CLOSE_BTN_TOP,
    right: CLOSE_BTN_RIGHT,
});
const closeButtonMultiSignalStyles = (0, emotion_1.css)({
    top: CLOSE_BTN_TOP_WITH_MULTI_SIGNALS,
    right: CLOSE_BTN_RIGHT_WITH_MULTI_SIGNALS,
});
const SignalPopover = ({ signals: _signals, darkMode: _darkMode, onPopoverOpenChange: _onPopoverOpenChange, className, }) => {
    const hooks = (0, react_1.useContext)(TrackingHooksContext);
    const darkMode = (0, use_theme_1.useDarkMode)(_darkMode);
    const [triggerVisible, setTriggerVisible] = (0, react_1.useState)(true);
    const [popoverOpen, setPopoverOpen] = (0, react_1.useState)(false);
    const [hoverProps, isHovered, setHovered] = (0, use_focus_hover_1.useHoverState)();
    const [currentSignalIndex, setCurrentSignalIndex] = (0, react_1.useState)(0);
    const signals = Array.isArray(_signals) ? _signals : [_signals];
    const currentSignal = signals[currentSignalIndex];
    const multiSignals = signals.length > 1;
    const isActive = isHovered || popoverOpen;
    const triggerRef = (0, react_1.useRef)(null);
    const mountedSignalsRef = (0, react_1.useRef)(new Set());
    signals.forEach(({ id }) => {
        if (!mountedSignalsRef.current.has(id)) {
            hooks.onSignalMount(id);
            mountedSignalsRef.current.add(id);
        }
    });
    (0, use_effect_on_change_1.useEffectOnChange)(() => {
        if (popoverOpen) {
            hooks.onSignalOpen(currentSignal.id);
        }
        else {
            hooks.onSignalClose(currentSignal.id);
        }
    }, [currentSignal.id, popoverOpen]);
    (0, react_1.useLayoutEffect)(() => {
        if (!triggerRef.current) {
            return;
        }
        const observer = new IntersectionObserver((entries) => {
            const isVisible = entries[0].isIntersecting;
            setTriggerVisible(isVisible);
            if (!isVisible) {
                setPopoverOpen(false);
            }
        });
        observer.observe(triggerRef.current);
        return observer.disconnect.bind(observer);
    }, []);
    const onPopoverOpenChange = (0, react_1.useCallback)((newStatus) => {
        setPopoverOpen(newStatus);
        _onPopoverOpenChange?.(newStatus);
        if (newStatus === true) {
            setCurrentSignalIndex(0);
        }
    }, [_onPopoverOpenChange]);
    const badgeLabel = multiSignals ? (react_1.default.createElement(react_1.default.Fragment, null,
        signals.length,
        "\u00A0insights")) : (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(leafygreen_1.Icon, { glyph: "Bulb", size: "small" }),
        "\u00A0insight"));
    const activeBadgeWidth = multiSignals
        ?
            `${`${signals.length} insights`.length}ch`
        :
            `calc(14px + ${' insight'.length}ch)`;
    return (react_1.default.createElement(interactive_popover_1.InteractivePopover, { className: (0, emotion_1.cx)(popoverStyles, !triggerVisible && popoverHiddenStyles), containerClassName: (0, emotion_1.cx)(popoverContentContainerStyles), closeButtonClassName: multiSignals ? closeButtonMultiSignalStyles : closeButtonStyles, open: popoverOpen, setOpen: onPopoverOpenChange, spacing: tokens_1.spacing[2], trigger: ({ children, ...triggerProps }) => {
            const onTriggerClick = (evt) => {
                evt.stopPropagation();
                triggerProps.onClick(evt);
            };
            return (react_1.default.createElement(guide_cue_1.GuideCue, { cueId: "insights", title: "Introducing insights", description: "Across Compass, you may now see icons like this to clue you in on potential areas of improvement for your data.", buttonText: "See insights in action", onPrimaryButtonClick: () => {
                    setHovered(true);
                    setTimeout(() => {
                        (0, rafraf_1.rafraf)(() => {
                            triggerRef.current?.click();
                        });
                    }, TRANSITION_DURATION_MS);
                }, trigger: ({ ref: guideCueRef }) => {
                    const props = (0, merge_props_1.mergeProps)(hoverProps, triggerProps, {
                        className: (0, emotion_1.cx)(badgeStyles, isActive && badgeHoveredStyles, ...(darkMode
                            ? [
                                badgeDarkModeStyles,
                                isActive && badgeHoveredDarkModeStyles,
                            ]
                            : [
                                badgeLightModeStyles,
                                isActive && badgeHoveredLightModeStyles,
                            ]), className),
                        style: { width: isActive ? activeBadgeWidth : 18 },
                        ref: triggerRef,
                    }, { ref: guideCueRef });
                    return (react_1.default.createElement(react_1.default.Fragment, null,
                        react_1.default.createElement("button", { ...props, onClick: onTriggerClick, "data-testid": "insight-badge-button", type: "button" },
                            react_1.default.createElement(leafygreen_1.Icon, { glyph: "Bulb", size: "small", className: (0, emotion_1.cx)(badgeIconStyles, badgeIconCollapsedStyles), style: { opacity: isActive ? 0 : 1 } }),
                            react_1.default.createElement("strong", { className: (0, emotion_1.cx)(badgeLabelStyles, !multiSignals && singleInsightBadge), style: {
                                    width: activeBadgeWidth,
                                    opacity: isActive ? 1 : 0,
                                } }, badgeLabel)),
                        children));
                } }));
        } },
        react_1.default.createElement("div", { onMouseDown: (event) => {
                event.stopPropagation();
            } },
            multiSignals && (react_1.default.createElement(MultiSignalHeader, { currentIndex: currentSignalIndex, total: signals.length, onIndexChange: setCurrentSignalIndex, darkMode: darkMode })),
            react_1.default.createElement(SignalCard, { ...currentSignal, darkMode: darkMode, hasMultiSignals: multiSignals }))));
};
exports.SignalPopover = SignalPopover;
//# sourceMappingURL=signal-popover.js.map