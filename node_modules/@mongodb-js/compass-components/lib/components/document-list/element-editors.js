"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeEditor = exports.ValueEditor = exports.KeyEditor = void 0;
const react_1 = __importStar(require("react"));
const hadron_type_checker_1 = __importDefault(require("hadron-type-checker"));
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const bson_value_1 = __importStar(require("../bson-value"));
const tooltip_1 = require("../tooltip");
const merge_props_1 = require("../../utils/merge-props");
const typography_1 = require("./typography");
const leafygreen_1 = require("../leafygreen");
const use_theme_1 = require("../../hooks/use-theme");
const maxWidth = (0, emotion_1.css)({
    maxWidth: '100%',
    overflowX: 'hidden',
    textOverflow: 'ellipsis',
});
const editorReset = (0, emotion_1.css)({
    padding: 0,
    margin: 0,
    border: 'none',
    boxShadow: 'none',
    outline: 'none',
    backgroundColor: 'transparent',
    maxWidth: '100%',
});
const editorOutline = (0, emotion_1.css)({
    '&:focus, &:active': {
        borderRadius: `2px`,
        boxShadow: `0 0 0 2px ${palette_1.palette.blue.light1}`,
    },
});
const editorInvalid = (0, emotion_1.css)({
    '&:focus, &:active': {
        boxShadow: `0 0 0 2px ${palette_1.palette.red.dark2}`,
    },
});
const editorInvalidLightMode = (0, emotion_1.css)({
    backgroundColor: palette_1.palette.red.light2,
    color: palette_1.palette.red.dark2,
});
const editorInvalidDarkMode = (0, emotion_1.css)({
    backgroundColor: palette_1.palette.red.dark2,
    color: palette_1.palette.red.light2,
});
const KeyEditor = ({ editing, value, valid, validationMessage, onChange, autoFocus, onEditStart, }) => {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const width = `${Math.max(value.length, 1)}.5ch`;
    return (react_1.default.createElement(react_1.default.Fragment, null, editing ? (react_1.default.createElement(tooltip_1.Tooltip, { darkMode: true, isDisabled: valid, delay: 600, usePortal: false, trigger: ({ className, children, onDragStart, onPointerUp, onPointerDown, onMouseDown, ...triggerProps }) => {
            return (react_1.default.createElement("div", { className: className },
                react_1.default.createElement("input", { type: "text", "data-testid": "hadron-document-key-editor", value: value, onChange: (evt) => {
                        onChange(evt.currentTarget.value);
                    }, autoFocus: autoFocus, className: (0, emotion_1.cx)(maxWidth, editorReset, editorOutline, !valid && editorInvalid, !valid &&
                        (darkMode
                            ? editorInvalidDarkMode
                            : editorInvalidLightMode)), style: { width }, spellCheck: "false", ...triggerProps }),
                children));
        } }, validationMessage)) : (react_1.default.createElement("div", { "data-testid": "hadron-document-clickable-key", onDoubleClick: onEditStart, className: maxWidth, style: { width } }, value))));
};
exports.KeyEditor = KeyEditor;
const textareaContainer = (0, emotion_1.css)({
    width: '100%',
    maxWidth: '100%',
    '&::before, &::after': {
        content: "'\"'",
        userSelect: 'none',
    },
});
const editorTextarea = (0, emotion_1.css)({
    display: 'inline-block',
    whiteSpace: 'nowrap',
    minWidth: '5ch',
    maxWidth: 'calc(100% - 2ch)',
    verticalAlign: 'top',
    color: 'inherit',
});
const ValueEditor = ({ editing, onEditStart, type, value, valid, validationMessage, originalValue, autoFocus, onChange, onFocus, onBlur, }) => {
    const val = String(value);
    const inputStyle = (0, react_1.useMemo)(() => {
        if (type === 'String') {
            const lines = val.split('\n');
            let longestLineCharLength = 0;
            for (const line of lines) {
                const length = line.length;
                if (length > longestLineCharLength) {
                    longestLineCharLength = length;
                }
            }
            const width = `${Math.min(longestLineCharLength + 1, 70)}ch`;
            const minLines = Math.max(lines.length, longestLineCharLength > 70 ? 2 : 1);
            const maxLines = Math.min(minLines, 10);
            const minHeight = typography_1.documentTypography.lineHeight * Math.min(minLines, maxLines);
            const height = typography_1.documentTypography.lineHeight * maxLines;
            return { width, minHeight, height };
        }
        return { width: `${Math.max(val.length, 1)}ch` };
    }, [val, type]);
    return (react_1.default.createElement(react_1.default.Fragment, null, editing ? (react_1.default.createElement(tooltip_1.Tooltip, { darkMode: true, isDisabled: valid, delay: 600, usePortal: false, trigger: ({ className, children, onDragStart, onPointerUp, onPointerDown, onMouseDown, ...triggerProps }) => {
            const mergedProps = (0, merge_props_1.mergeProps)(triggerProps, { onBlur, onFocus });
            return (react_1.default.createElement("div", { className: className },
                type === 'String' ? (react_1.default.createElement(bson_value_1.BSONValueContainer, { type: "String", className: (0, emotion_1.cx)(textareaContainer) },
                    react_1.default.createElement("textarea", { "data-testid": "hadron-document-value-editor", value: val, onChange: (evt) => {
                            onChange(evt.currentTarget.value);
                        }, autoFocus: autoFocus, className: (0, emotion_1.cx)(editorReset, editorOutline, editorTextarea, !valid && editorInvalid), spellCheck: "false", style: inputStyle, ...mergedProps }))) : (react_1.default.createElement("input", { type: "text", "data-testid": "hadron-document-value-editor", value: val, onChange: (evt) => {
                        onChange(evt.currentTarget.value);
                    }, autoFocus: autoFocus, className: (0, emotion_1.cx)(editorReset, editorOutline, !valid && editorInvalid), style: inputStyle, spellCheck: "false", ...mergedProps })),
                children));
        } }, validationMessage)) : (react_1.default.createElement("div", { "data-testid": "hadron-document-clickable-value", onDoubleClick: onEditStart },
        react_1.default.createElement(bson_value_1.default, { type: type, value: originalValue })))));
};
exports.ValueEditor = ValueEditor;
const TYPES = hadron_type_checker_1.default.castableTypes(true);
const longestTypeNameCharLength = Math.max(...TYPES.map((type) => type.length));
const typeEditor = (0, emotion_1.css)({
    color: palette_1.palette.gray.base,
    appearance: 'none',
    paddingLeft: tokens_1.spacing[1],
    width: `calc(${longestTypeNameCharLength}ch + ${tokens_1.spacing[4]}px)`,
    '&:hover': {
        color: 'inherit',
        cursor: 'pointer',
    },
});
const typeEditorActive = (0, emotion_1.css)({
    appearance: 'auto',
    paddingLeft: 0,
});
const typeEditorChevron = (0, emotion_1.css)({
    position: 'absolute',
    right: 4,
    top: 2,
    pointerEvents: 'none',
    display: 'none',
});
const typeEditorOptionLight = (0, emotion_1.css)({
    backgroundColor: palette_1.palette.white,
});
const typeEditorOptionDark = (0, emotion_1.css)({
    backgroundColor: palette_1.palette.black,
});
const typeEditorContainer = (0, emotion_1.css)({
    [`&:hover .${typeEditorChevron}`]: { display: 'block' },
    position: 'relative',
    cursor: 'pointer',
});
const TypeEditor = ({ editing, autoFocus, type, onChange, visuallyActive }) => {
    const darkMode = (0, use_theme_1.useDarkMode)();
    return (react_1.default.createElement(react_1.default.Fragment, null, editing && (react_1.default.createElement("div", { className: typeEditorContainer },
        react_1.default.createElement("select", { value: type, "data-testid": "hadron-document-type-editor", autoFocus: autoFocus, onChange: (evt) => {
                onChange(evt.currentTarget.value);
            }, className: (0, emotion_1.cx)(editorReset, editorOutline, typeEditor, visuallyActive && typeEditorActive), onClick: (e) => {
                e.stopPropagation();
            } }, TYPES.map((type) => {
            return (react_1.default.createElement("option", { key: type, value: type, className: darkMode ? typeEditorOptionDark : typeEditorOptionLight }, type));
        })),
        react_1.default.createElement(leafygreen_1.Icon, { glyph: "ChevronDown", size: "xsmall", className: typeEditorChevron })))));
};
exports.TypeEditor = TypeEditor;
//# sourceMappingURL=element-editors.js.map