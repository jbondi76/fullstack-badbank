"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const leafygreen_1 = require("../leafygreen");
const tooltip_1 = require("../tooltip");
const signal_popover_1 = require("../signal-popover");
const actionsGroupContainer = (0, emotion_1.css)({
    position: 'absolute',
    display: 'flex',
    alignItems: 'center',
    gap: tokens_1.spacing[2],
    width: '100%',
    top: tokens_1.spacing[2] + tokens_1.spacing[1],
    paddingLeft: tokens_1.spacing[3],
    paddingRight: tokens_1.spacing[3],
    pointerEvents: 'none',
});
const actionsGroupItem = (0, emotion_1.css)({
    flex: 'none',
    pointerEvents: 'all',
});
const actionsGroupItemSeparator = (0, emotion_1.css)({
    flex: '1 0 auto',
    pointerEvents: 'none',
});
const actionsGroupIdle = (0, emotion_1.css)({
    '& > [data-action-item]': {
        display: 'none',
    },
});
const actionsGroupHovered = (0, emotion_1.css)({
    '& > [data-action-item]': {
        display: 'block',
    },
});
const actionsGroupSignalPopover = (0, emotion_1.css)({
    display: 'block !important',
});
function useElementParentHoverState(ref) {
    const [isHovered, setIsHovered] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        const node = ref.current?.parentElement;
        const onMouseEnter = () => {
            setIsHovered(true);
        };
        const onMouseLeave = () => {
            setIsHovered(false);
        };
        node?.addEventListener('mouseenter', onMouseEnter);
        node?.addEventListener('mouseleave', onMouseLeave);
        return () => {
            node?.removeEventListener('mouseenter', onMouseEnter);
            node?.removeEventListener('mouseleave', onMouseLeave);
        };
    }, [ref]);
    return isHovered;
}
function ActionButton({ tooltipText, tooltipEnabled, ...props }) {
    return (react_1.default.createElement(tooltip_1.Tooltip, { enabled: tooltipEnabled, trigger: ({ children, ...tooltipProps }) => {
            return (react_1.default.createElement("div", { "data-action-item": true, ...tooltipProps },
                react_1.default.createElement(leafygreen_1.Button, { ...props }),
                children));
        }, justify: "middle", delay: 200 }, tooltipText));
}
const DocumentActionsGroup = ({ onEdit, onCopy, onClone, onRemove, onExpand, expanded, onlyShowOnHover = true, insights, }) => {
    const [signalOpened, setSignalOpened] = (0, react_1.useState)(false);
    const conatinerRef = (0, react_1.useRef)(null);
    const isHovered = useElementParentHoverState(conatinerRef);
    const [showCopyButtonTooltip, setShowCopyButtonTooltip] = (0, react_1.useState)(false);
    const isActive = isHovered || signalOpened;
    (0, react_1.useEffect)(() => {
        if (showCopyButtonTooltip === true) {
            const tid = setTimeout(() => {
                setShowCopyButtonTooltip(false);
            }, 1200);
            return () => {
                clearTimeout(tid);
            };
        }
    }, [showCopyButtonTooltip]);
    return (react_1.default.createElement("div", { ref: conatinerRef, className: (0, emotion_1.cx)(actionsGroupContainer, onlyShowOnHover && (isActive ? actionsGroupHovered : actionsGroupIdle)) },
        onExpand && (react_1.default.createElement(ActionButton, { size: "xsmall", tooltipEnabled: isActive, rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: expanded ? 'CaretDown' : 'CaretRight' }), "aria-label": expanded ? 'Collapse all' : 'Expand all', "aria-pressed": expanded, "data-testid": "expand-document-button", onClick: onExpand, className: actionsGroupItem, tooltipText: expanded ? 'Collapse all' : 'Expand all' })),
        react_1.default.createElement("span", { className: actionsGroupItemSeparator }),
        insights && (react_1.default.createElement("div", { className: (0, emotion_1.cx)(actionsGroupItem, actionsGroupSignalPopover), "data-action-item": true },
            react_1.default.createElement(signal_popover_1.SignalPopover, { signals: insights, onPopoverOpenChange: setSignalOpened }))),
        onEdit && (react_1.default.createElement(ActionButton, { tooltipEnabled: isActive, size: "xsmall", rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: "Edit" }), "aria-label": "Edit document", "data-testid": "edit-document-button", onClick: onEdit, className: actionsGroupItem, tooltipText: "Edit document" })),
        onCopy && (react_1.default.createElement(tooltip_1.Tooltip, { open: showCopyButtonTooltip, trigger: ({ children }) => (react_1.default.createElement("div", { "data-action-item": true },
                react_1.default.createElement(ActionButton, { tooltipEnabled: isActive, size: "xsmall", rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: "Copy" }), "aria-label": "Copy document to clipboard", "data-testid": "copy-document-button", onClick: () => {
                        setShowCopyButtonTooltip(true);
                        onCopy();
                    }, className: actionsGroupItem, tooltipText: "Copy to clipboard" }),
                children)), justify: "middle" }, "Copied!")),
        onClone && (react_1.default.createElement(ActionButton, { size: "xsmall", tooltipEnabled: isActive, rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: "Clone" }), "aria-label": "Clone document", "data-testid": "clone-document-button", onClick: onClone, className: actionsGroupItem, tooltipText: "Clone document" })),
        onRemove && (react_1.default.createElement(ActionButton, { size: "xsmall", tooltipEnabled: isActive, rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: "Trash" }), "aria-label": "Remove document", "data-testid": "remove-document-button", onClick: onRemove, className: actionsGroupItem, tooltipText: "Remove document" }))));
};
exports.default = DocumentActionsGroup;
//# sourceMappingURL=document-actions-group.js.map