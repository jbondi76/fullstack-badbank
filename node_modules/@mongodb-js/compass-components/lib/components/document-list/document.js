"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const hadron_document_1 = require("hadron-document");
const auto_focus_context_1 = require("./auto-focus-context");
const use_force_update_1 = require("./use-force-update");
const element_1 = require("./element");
const use_previous_1 = require("./use-previous");
const document_fields_toggle_group_1 = __importDefault(require("./document-fields-toggle-group"));
const typography_1 = require("./typography");
function useHadronDocument(doc) {
    const prevDoc = (0, use_previous_1.usePrevious)(doc);
    const forceUpdate = (0, use_force_update_1.useForceUpdate)();
    const onDocumentFieldsAddedOrRemoved = (0, react_1.useCallback)((_el, parentEl) => {
        if (doc === parentEl) {
            forceUpdate();
        }
    }, [doc, forceUpdate]);
    (0, react_1.useEffect)(() => {
        if (prevDoc && prevDoc !== doc) {
            forceUpdate();
        }
    }, [prevDoc, doc, forceUpdate]);
    (0, react_1.useEffect)(() => {
        doc.on(hadron_document_1.ElementEvents.Added, onDocumentFieldsAddedOrRemoved);
        doc.on(hadron_document_1.ElementEvents.Removed, onDocumentFieldsAddedOrRemoved);
        return () => {
            doc.off(hadron_document_1.ElementEvents.Added, onDocumentFieldsAddedOrRemoved);
            doc.off(hadron_document_1.ElementEvents.Removed, onDocumentFieldsAddedOrRemoved);
        };
    }, [doc, onDocumentFieldsAddedOrRemoved]);
    return {
        elements: [...doc.elements],
    };
}
const hadronDocument = (0, emotion_1.css)({
    position: 'relative',
    fontFamily: typography_1.documentTypography.fontFamily,
    fontSize: `${typography_1.documentTypography.fontSize}px`,
    lineHeight: `${typography_1.documentTypography.lineHeight}px`,
    counterReset: 'line-number',
});
const INITIAL_FIELD_LIMIT = 25;
const HadronDocument = ({ value: document, editable = false, editing = false, onEditStart }) => {
    const { elements } = useHadronDocument(document);
    const [visibleFieldsCount, setVisibleFieldsCount] = (0, react_1.useState)(INITIAL_FIELD_LIMIT);
    const visibleElements = (0, react_1.useMemo)(() => {
        return elements.filter(Boolean).slice(0, visibleFieldsCount);
    }, [elements, visibleFieldsCount]);
    const [autoFocus, setAutoFocus] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        if (!editing) {
            setAutoFocus(null);
        }
    }, [editing]);
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("div", { className: hadronDocument, "data-testid": "hadron-document", "data-id": document.uuid },
            react_1.default.createElement(auto_focus_context_1.AutoFocusContext.Provider, { value: autoFocus }, visibleElements.map((el, idx) => {
                return (react_1.default.createElement(element_1.HadronElement, { key: idx, value: el, editable: editable, editingEnabled: editing, onEditStart: editable
                        ? (id, type) => {
                            setAutoFocus({ id, type });
                            onEditStart?.();
                        }
                        : undefined, lineNumberSize: visibleElements.length, onAddElement: (el) => {
                        setAutoFocus({
                            id: el.uuid,
                            type: el.parent?.currentType === 'Array' ? 'value' : 'key',
                        });
                    } }));
            }))),
        react_1.default.createElement(document_fields_toggle_group_1.default, { showHideButton: !editing, currentSize: visibleFieldsCount, totalSize: elements.length, minSize: INITIAL_FIELD_LIMIT, step: editing ? 100 : 1000, onSizeChange: setVisibleFieldsCount })));
};
exports.default = HadronDocument;
//# sourceMappingURL=document.js.map