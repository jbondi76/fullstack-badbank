"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmptyContent = void 0;
const react_1 = __importDefault(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const leafygreen_1 = require("./leafygreen");
const use_theme_1 = require("../hooks/use-theme");
const containerStyles = (0, emotion_1.css)({
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    textAlign: 'center',
    margin: `${tokens_1.spacing[3]}px auto`,
    marginTop: tokens_1.spacing[7],
    padding: `0 ${tokens_1.spacing[3]}px`,
});
const iconStyles = (0, emotion_1.css)({
    flex: 'none',
    maxWidth: '80px',
    maxHeight: '80px',
});
const titleStyles = (0, emotion_1.css)({
    marginTop: tokens_1.spacing[2],
});
const titleLightStyles = (0, emotion_1.css)({
    color: palette_1.palette.green.dark2,
});
const titleDarkStyles = (0, emotion_1.css)({
    color: palette_1.palette.green.light1,
});
const subTitleStyles = (0, emotion_1.css)({
    marginTop: tokens_1.spacing[2],
    maxWidth: tokens_1.spacing[6] * 6,
});
const callToActionStyles = (0, emotion_1.css)({
    marginTop: tokens_1.spacing[4],
    maxWidth: '600px',
});
const callToActionLinkContainerStyles = (0, emotion_1.css)({
    marginTop: tokens_1.spacing[3],
    maxWidth: '600px',
});
const EmptyContent = ({ icon: Icon, title, subTitle, callToAction, callToActionLink }) => {
    const darkMode = (0, use_theme_1.useDarkMode)();
    return (react_1.default.createElement("div", { className: containerStyles },
        react_1.default.createElement("div", { className: iconStyles },
            react_1.default.createElement(Icon, null)),
        react_1.default.createElement(leafygreen_1.Subtitle, { className: (0, emotion_1.cx)(titleStyles, darkMode ? titleDarkStyles : titleLightStyles) }, title),
        react_1.default.createElement(leafygreen_1.Body, { className: subTitleStyles }, subTitle),
        !!callToAction && (react_1.default.createElement("div", { className: callToActionStyles }, typeof callToAction === 'string' ? (react_1.default.createElement(leafygreen_1.Body, null, callToAction)) : (react_1.default.createElement(react_1.default.Fragment, null, callToAction)))),
        !!callToActionLink && (react_1.default.createElement("div", { className: callToAction ? callToActionLinkContainerStyles : callToActionStyles }, callToActionLink))));
};
exports.EmptyContent = EmptyContent;
//# sourceMappingURL=empty-content.js.map