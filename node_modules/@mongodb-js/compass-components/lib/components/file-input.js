"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createElectronFileInputBackend = exports.FileInputBackendProvider = exports.FileInputBackendContext = void 0;
const react_1 = __importStar(require("react"));
const path_1 = __importDefault(require("path"));
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const use_theme_1 = require("../hooks/use-theme");
const leafygreen_1 = require("./leafygreen");
const { base: redBaseColor } = palette_1.palette.red;
const containerStyles = (0, emotion_1.css)({
    marginTop: tokens_1.spacing[2],
    marginBottom: tokens_1.spacing[2],
    marginRight: 'auto',
    marginLeft: 'auto',
});
const formItemSmallStyles = (0, emotion_1.css)({
    display: 'flex',
    alignItems: 'center',
    gap: tokens_1.spacing[1],
});
const formItemHorizontalStyles = (0, emotion_1.css)({
    display: 'flex',
});
const removeFileLineStyles = (0, emotion_1.css)({
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
});
const removeFileButtonStyles = (0, emotion_1.css)({
    marginLeft: tokens_1.spacing[1],
});
const buttonSmallStyles = (0, emotion_1.css)({
    border: 'none',
    background: 'none',
    fontWeight: 'normal',
    marginLeft: tokens_1.spacing[2],
    '&:hover': {
        background: 'none',
        boxShadow: 'none',
    },
    '&:active': {
        background: 'none',
        boxShadow: 'none',
    },
});
const buttonDefaultStyles = (0, emotion_1.css)({
    width: '100% !important',
});
const buttonTextStyle = (0, emotion_1.css)({
    textOverflow: 'ellipsis',
    overflow: 'hidden',
    wordBreak: 'normal',
    whiteSpace: 'nowrap',
});
const errorMessageStyles = (0, emotion_1.css)({
    color: `${redBaseColor} !important`,
});
const labelHorizontalStyles = (0, emotion_1.css)({
    width: '90%',
    paddingRight: tokens_1.spacing[3],
});
const optionalLabelStyles = (0, emotion_1.css)({
    color: palette_1.palette.gray.base,
    marginTop: tokens_1.spacing[1],
    fontStyle: 'italic',
    fontWeight: 'normal',
    fontSize: 12,
});
const infoLinkStyles = (0, emotion_1.css)({
    '&:link, &:active, &:hover': {
        textDecoration: 'none',
    },
});
const labelIconStyles = (0, emotion_1.css)({
    display: 'inline-block',
    verticalAlign: 'middle',
    fontSize: 'inherit',
    textRendering: 'auto',
    margin: '0 0 0 5px',
    cursor: 'pointer',
    color: palette_1.palette.gray.light1,
    '&:link, &:active': {
        color: palette_1.palette.gray.light1,
    },
    '&:link, &:active, &:hover': {
        textDecoration: 'none',
    },
    '&:hover': {
        color: palette_1.palette.yellow.base,
    },
});
const disabledDescriptionLightStyles = (0, emotion_1.css)({
    color: palette_1.palette.gray.dark1,
});
const disabledDescriptionDarkStyles = (0, emotion_1.css)({
    color: palette_1.palette.gray.light1,
});
exports.FileInputBackendContext = (0, react_1.createContext)(null);
function useFileSystemBackend() {
    const fileInputBackendContext = (0, react_1.useContext)(exports.FileInputBackendContext);
    const fileInputBackend = (0, react_1.useRef)(fileInputBackendContext ? fileInputBackendContext() : null);
    return fileInputBackend.current;
}
const FileInputBackendProvider = ({ children, createFileInputBackend }) => {
    const createFileInputBackendRef = (0, react_1.useRef)(createFileInputBackend);
    return (react_1.default.createElement(exports.FileInputBackendContext.Provider, { value: createFileInputBackendRef.current }, children));
};
exports.FileInputBackendProvider = FileInputBackendProvider;
function createElectronFileInputBackend(electron) {
    return () => {
        const listeners = [];
        return {
            openFileChooser(options) {
                const window = electron.getCurrentWindow();
                let properties = [...(options.properties ?? [])];
                if (!properties.includes('openFile') &&
                    !properties.includes('openDirectory')) {
                    properties.push('openFile');
                }
                if (options.multi) {
                    if (!properties.includes('multiSelect')) {
                        properties.push('multiSelect');
                    }
                }
                else {
                    properties = properties.filter((prop) => prop !== 'multiSelect');
                }
                const filters = [...(options.filters ?? [])];
                for (let acceptEntry of options.accept?.split(',') ?? []) {
                    acceptEntry = acceptEntry.trim().toLowerCase();
                    if (!acceptEntry.startsWith('.')) {
                        continue;
                    }
                    const extension = acceptEntry.slice(1);
                    if (!filters.some((filter) => filter.extensions.includes(extension))) {
                        filters.push({
                            name: `${acceptEntry} file`,
                            extensions: [extension],
                        });
                    }
                }
                electron.dialog[options.mode === 'open' ? 'showOpenDialog' : 'showSaveDialog'](window, {
                    properties,
                    filters,
                    ...(options.title ? { title: options.title } : {}),
                    ...(options.defaultPath ? { defaultPath: options.defaultPath } : {}),
                    ...(options.buttonLabel ? { buttonLabel: options.buttonLabel } : {}),
                })
                    .then((result) => {
                    const files = result.canceled
                        ? []
                        : 'filePaths' in result
                            ? result.filePaths
                            : result.filePath
                                ? [result.filePath]
                                : [];
                    for (const listener of listeners)
                        listener(files);
                })
                    .catch(() => {
                });
            },
            onFilesChosen(listener) {
                listeners.push(listener);
                return () => {
                    const index = listeners.indexOf(listener);
                    if (index !== -1)
                        listeners.splice(index, 1);
                };
            },
        };
    };
}
exports.createElectronFileInputBackend = createElectronFileInputBackend;
function FileInput({ autoOpen = false, id, label, dataTestId, onChange, disabled, optional = false, optionalMessage, error = false, errorMessage, variant = 'default', showFileOnNewLine = false, link, description, values, className, multi = false, mode = 'save', accept, title, defaultPath, filters, buttonLabel, properties, }) {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const inputRef = react_1.default.useRef(null);
    const backend = useFileSystemBackend();
    const buttonText = react_1.default.useMemo(() => {
        if (Array.isArray(values) && values.length > 0) {
            return values.map((file) => path_1.default.basename(file)).join(', ');
        }
        return multi ? 'Select files...' : 'Select a file...';
    }, [values, multi]);
    const onFilesChanged = react_1.default.useCallback((evt) => {
        const fileList = Array.from(evt.currentTarget.files ?? []);
        const files = fileList.map((file) => {
            return file.path;
        });
        onChange(files);
    }, [onChange]);
    const handleOpenFileInput = (0, react_1.useCallback)(() => {
        if (disabled)
            return;
        if (backend) {
            backend.openFileChooser({
                multi,
                mode,
                accept,
                title,
                defaultPath,
                filters,
                buttonLabel,
                properties,
            });
        }
        else if (inputRef.current) {
            inputRef.current.click();
        }
    }, [
        disabled,
        backend,
        multi,
        mode,
        accept,
        title,
        defaultPath,
        filters,
        buttonLabel,
        properties,
    ]);
    const initialAutoOpen = (0, react_1.useRef)(() => {
        if (autoOpen) {
            handleOpenFileInput();
        }
    });
    (0, react_1.useEffect)(() => {
        initialAutoOpen.current();
    }, []);
    (0, react_1.useEffect)(() => {
        return backend?.onFilesChosen?.(onChange);
    }, [backend, onChange]);
    const renderDescription = () => {
        if (!link && !description) {
            return null;
        }
        if (!link) {
            return (react_1.default.createElement(leafygreen_1.Description, { "data-testid": 'file-input-description' }, description));
        }
        return (react_1.default.createElement(leafygreen_1.Link, { "data-testid": 'file-input-link', href: link, className: (0, emotion_1.cx)(description ? infoLinkStyles : labelIconStyles), hideExternalIcon: !description }, description ?? ''));
    };
    const valuesAsString = (0, react_1.useMemo)(() => JSON.stringify(values), [values]);
    const leftGlyph = variant === 'small' ? undefined : (react_1.default.createElement(leafygreen_1.Icon, { glyph: "AddFile", title: null, fill: "currentColor" }));
    const rightGlyph = variant === 'small' ? (react_1.default.createElement(leafygreen_1.Icon, { glyph: "Edit", title: null, fill: "currentColor" })) : undefined;
    return (react_1.default.createElement("div", { className: (0, emotion_1.cx)(containerStyles, className) },
        react_1.default.createElement("div", { className: (0, emotion_1.cx)({
                [formItemSmallStyles]: variant === 'small',
                [formItemHorizontalStyles]: variant === 'default',
            }) },
            react_1.default.createElement("div", { className: (0, emotion_1.cx)({
                    [labelHorizontalStyles]: variant === 'default',
                }) },
                react_1.default.createElement(leafygreen_1.Label, { htmlFor: `${id}_file_input`, disabled: disabled },
                    react_1.default.createElement("span", { className: (0, emotion_1.cx)({
                            [darkMode
                                ? disabledDescriptionDarkStyles
                                : disabledDescriptionLightStyles]: disabled,
                        }) }, label)),
                optional && (react_1.default.createElement("div", { className: optionalLabelStyles }, optionalMessage ? optionalMessage : 'Optional')),
                renderDescription()),
            react_1.default.createElement("input", { "data-testid": dataTestId ?? 'file-input', ref: inputRef, id: `${id}_file_input`, name: id, type: "file", multiple: multi, onChange: onFilesChanged, style: { display: 'none' }, key: valuesAsString, "data-filenames": valuesAsString, accept: accept }),
            react_1.default.createElement(leafygreen_1.Button, { id: id, "data-testid": "file-input-button", className: variant === 'small' ? buttonSmallStyles : buttonDefaultStyles, disabled: disabled, onClick: handleOpenFileInput, title: "Select a file", leftGlyph: leftGlyph, rightGlyph: rightGlyph },
                react_1.default.createElement("span", { className: buttonTextStyle }, buttonText))),
        showFileOnNewLine &&
            values &&
            values.length > 0 &&
            values.map((value, index) => (react_1.default.createElement("div", { className: removeFileLineStyles, key: value },
                react_1.default.createElement("div", null, value),
                react_1.default.createElement(leafygreen_1.IconButton, { className: removeFileButtonStyles, "aria-label": "Remove file", onClick: () => {
                        const newValues = [...values];
                        newValues.splice(index, 1);
                        onChange(newValues);
                    } },
                    react_1.default.createElement(leafygreen_1.Icon, { glyph: "X" }))))),
        error && errorMessage && (react_1.default.createElement(leafygreen_1.Label, { "data-testid": 'file-input-error', className: errorMessageStyles, htmlFor: '' }, errorMessage))));
}
exports.default = FileInput;
//# sourceMappingURL=file-input.js.map