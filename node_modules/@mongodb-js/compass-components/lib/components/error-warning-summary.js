"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WarningSummary = exports.ErrorSummary = void 0;
const react_1 = __importStar(require("react"));
const banner_1 = require("@leafygreen-ui/banner");
const emotion_1 = require("@leafygreen-ui/emotion");
const inline_definition_1 = require("./inline-definition");
const leafygreen_1 = require("./leafygreen");
const bannerStyle = (0, emotion_1.css)({
    width: '100%',
    overflowWrap: 'anywhere',
});
const listStyle = (0, emotion_1.css)({
    padding: 0,
    margin: 0,
    listStylePosition: 'inside',
});
const summaryStyles = (0, emotion_1.css)({
    display: 'flex',
});
const actionButtonStyles = (0, emotion_1.css)({
    marginLeft: 'auto',
});
function Summary({ messages }) {
    if (messages.length === 1) {
        return react_1.default.createElement("div", null, messages[0]);
    }
    if (messages.length === 2) {
        return (react_1.default.createElement("div", null,
            react_1.default.createElement("ol", { className: listStyle }, messages.map((message, i) => (react_1.default.createElement("li", { key: i }, message))))));
    }
    const tooltipErrors = (react_1.default.createElement("ol", { className: listStyle }, messages.map((message, i) => (react_1.default.createElement("li", { key: i }, message)))));
    const firstMessageNoDot = messages[0].endsWith('.')
        ? messages[0].slice(0, messages[0].length - 1)
        : messages[0];
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("span", null,
            firstMessageNoDot,
            ", and other ",
            messages.length - 1,
            " problems."),
        ' ',
        react_1.default.createElement(inline_definition_1.InlineDefinition, { tooltipProps: {
                align: 'top',
                justify: 'start',
                delay: 500,
            }, definition: tooltipErrors }, "View all")));
}
const BannerWithSummary = ({ ['data-testid']: dataTestId, messages, onAction, actionText, variant, className, }) => {
    const _messages = (0, react_1.useMemo)(() => {
        return !Array.isArray(messages) ? [messages] : messages;
    }, [messages]);
    return (react_1.default.createElement(leafygreen_1.Banner, { "data-testid": dataTestId, variant: variant, className: (0, emotion_1.cx)(bannerStyle, className) },
        react_1.default.createElement("div", { className: summaryStyles },
            react_1.default.createElement(Summary, { messages: _messages }),
            onAction && actionText && (react_1.default.createElement(leafygreen_1.Button, { "data-testid": "banner-action", size: "xsmall", onClick: onAction, className: actionButtonStyles }, actionText)))));
};
const ErrorSummary = ({ className, errors, ...props }) => {
    return (react_1.default.createElement(BannerWithSummary, { className: className, messages: errors, variant: banner_1.Variant.Danger, ...props }));
};
exports.ErrorSummary = ErrorSummary;
const WarningSummary = ({ className, warnings, ...props }) => {
    return (react_1.default.createElement(BannerWithSummary, { className: className, messages: warnings, variant: banner_1.Variant.Warning, ...props }));
};
exports.WarningSummary = WarningSummary;
//# sourceMappingURL=error-warning-summary.js.map