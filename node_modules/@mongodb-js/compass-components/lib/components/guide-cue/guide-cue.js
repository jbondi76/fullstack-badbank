"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuideCue = exports.GuideCueProvider = void 0;
const react_1 = __importStar(require("react"));
const guide_cue_service_1 = require("./guide-cue-service");
const guide_cue_1 = require("@leafygreen-ui/guide-cue");
const guide_cue_groups_1 = require("./guide-cue-groups");
const __1 = require("../..");
const rafraf_1 = require("../../utils/rafraf");
const use_stacked_component_1 = require("../../hooks/use-stacked-component");
const LGGuideCue = (0, use_stacked_component_1.withStackedComponentPopoverStyles)(guide_cue_1.GuideCue);
const hiddenPopoverStyles = (0, __1.css)({
    display: 'none !important',
    opacity: '0 !important',
    transition: 'none !important',
});
const GuideCueContext = react_1.default.createContext({});
const GuideCueProvider = ({ children, ...callbacks }) => {
    const callbacksRef = (0, react_1.useRef)(callbacks);
    callbacksRef.current = callbacks;
    const value = (0, react_1.useMemo)(() => ({
        onNext(cue) {
            callbacksRef.current.onNext?.(cue);
        },
        onNextGroup(groupCue) {
            callbacksRef.current.onNextGroup?.(groupCue);
        },
    }), []);
    return (react_1.default.createElement(GuideCueContext.Provider, { value: value }, children));
};
exports.GuideCueProvider = GuideCueProvider;
const getDataCueId = ({ cueId, groupId, }) => {
    return `guide-cue-${cueId}${groupId ? `-${groupId}` : ''}`;
};
const GuideCue = ({ description, trigger, cueId, groupId, step, onPrimaryButtonClick, onDismiss, onOpenChange, ...restOfCueProps }) => {
    const [isCueOpen, setIsCueOpen] = (0, react_1.useState)(false);
    const [isIntersecting, setIsIntersecting] = (0, react_1.useState)(true);
    const refEl = (0, react_1.useRef)(null);
    const [readyToRender, setReadyToRender] = (0, react_1.useState)(false);
    const context = (0, react_1.useContext)(GuideCueContext);
    const cueData = (0, react_1.useMemo)(() => {
        if (!groupId) {
            return { cueId, step: 1 };
        }
        return { cueId, groupId, step };
    }, [cueId, groupId, step]);
    const setOpen = (0, react_1.useCallback)((open) => {
        setIsCueOpen(open);
        onOpenChange?.(open);
    }, [onOpenChange]);
    (0, react_1.useEffect)(() => {
        if (!refEl.current) {
            return;
        }
        const observerCallback = (entries) => {
            const [entry] = entries;
            setIsIntersecting(entry.isIntersecting);
            if (!entry.isIntersecting) {
                setOpen(false);
            }
            guide_cue_service_1.guideCueService.onCueIntersectionChange(entry.isIntersecting, cueData.cueId, cueData.groupId);
        };
        const node = refEl.current;
        const observer = new IntersectionObserver(observerCallback, {
            threshold: 0.5,
        });
        observer.observe(node);
        return () => {
            observer.unobserve(node);
            observer.disconnect();
        };
    }, [cueData, setOpen]);
    (0, react_1.useEffect)(() => {
        const listener = ({ detail }) => {
            setOpen(cueData.cueId === detail.cueId &&
                cueData.groupId === detail.groupId &&
                isIntersecting);
        };
        guide_cue_service_1.guideCueService.addEventListener('show-cue', listener);
        return () => {
            guide_cue_service_1.guideCueService.removeEventListener('show-cue', listener);
        };
    }, [cueData, isIntersecting, setOpen]);
    (0, react_1.useEffect)(() => {
        if (!refEl.current) {
            return;
        }
        guide_cue_service_1.guideCueService.addCue({
            ...cueData,
            isIntersecting,
        });
        return () => {
            guide_cue_service_1.guideCueService.removeCue(cueData.cueId, cueData.groupId);
        };
    }, [cueData, isIntersecting]);
    (0, react_1.useEffect)(() => {
        return (0, rafraf_1.rafraf)(() => {
            setReadyToRender(true);
        });
    }, []);
    const onNextGroup = (0, react_1.useCallback)(() => {
        if (!cueData.groupId) {
            return;
        }
        guide_cue_service_1.guideCueService.markGroupAsVisited(cueData.groupId);
        guide_cue_service_1.guideCueService.onNext();
        context.onNextGroup?.({
            ...cueData,
            groupSteps: guide_cue_groups_1.GROUP_STEPS_MAP.get(cueData.groupId) ?? 0,
        });
    }, [cueData, context.onNextGroup]);
    const onNext = (0, react_1.useCallback)(() => {
        guide_cue_service_1.guideCueService.markCueAsVisited(cueData.cueId, cueData.groupId);
        guide_cue_service_1.guideCueService.onNext();
        context.onNext?.(cueData);
    }, [cueData, context.onNext]);
    (0, react_1.useEffect)(() => {
        if (!isCueOpen || !refEl.current) {
            return;
        }
        const listener = (event) => {
            const popover = document.querySelector(`[data-cueid="${getDataCueId(cueData)}"]`);
            if (!popover) {
                return;
            }
            if (event.composedPath().includes(popover)) {
                return;
            }
            if (event.composedPath().includes(refEl.current)) {
                setOpen(false);
                return onNext();
            }
            guide_cue_service_1.guideCueService.markAllCuesAsVisited();
            setOpen(false);
        };
        document.addEventListener('mousedown', listener);
        return () => {
            document.removeEventListener('mousedown', listener);
        };
    }, [isCueOpen, cueData, onNext, setOpen]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        readyToRender && (react_1.default.createElement(LGGuideCue, { ...restOfCueProps, open: isCueOpen, numberOfSteps: guide_cue_service_1.guideCueService.getCountOfSteps(cueData.groupId), onDismiss: () => {
                onDismiss?.();
                onNextGroup();
            }, onPrimaryButtonClick: () => {
                onPrimaryButtonClick?.();
                onNext();
            }, setOpen: () => setOpen(false), currentStep: cueData.step || 1, refEl: refEl, "data-cueid": getDataCueId(cueData), tooltipClassName: (0, __1.cx)(!isIntersecting && hiddenPopoverStyles) }, description)),
        trigger({ ref: refEl })));
};
exports.GuideCue = GuideCue;
//# sourceMappingURL=guide-cue.js.map