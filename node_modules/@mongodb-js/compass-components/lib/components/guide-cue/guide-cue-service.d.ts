import { type GroupName } from './guide-cue-groups';
import { type GuideCueStorage } from './guide-cue-storage';
export type ShowCueEventDetail = CustomEvent<{
    cueId: string;
    groupId?: GroupName;
}>;
interface GuideCueEventMap {
    'show-cue': ShowCueEventDetail;
}
export interface GuideCueService extends EventTarget {
    addEventListener<K extends keyof GuideCueEventMap>(type: K, listener: (this: GuideCueEventMap, ev: GuideCueEventMap[K]) => void): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject): void;
    removeEventListener<K extends keyof GuideCueEventMap>(type: K, listener: (this: GuideCueEventMap, ev: GuideCueEventMap[K]) => void): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject): void;
}
export type Cue = {
    groupId?: GroupName;
    step: number;
    cueId: string;
    isIntersecting: boolean;
    isVisited: boolean;
};
export declare class GuideCueService extends EventTarget {
    private readonly _storage;
    private _cues;
    private _activeGroupId;
    private _activeCue;
    constructor(_storage: GuideCueStorage);
    addCue(cue: Omit<Cue, 'isVisited'>): boolean | undefined;
    private dispatchShowCueEvent;
    private validateCueData;
    removeCue(cueId: string, groupId?: GroupName): void;
    onNext(): boolean | undefined;
    getCountOfSteps(groupId?: GroupName): number;
    private findNextCue;
    private getNextCueFromGroup;
    private getNextCueFromNextGroup;
    private getCueIndex;
    markCueAsVisited(cueId: string, groupId?: GroupName): void;
    markGroupAsVisited(groupId: GroupName): void;
    markAllCuesAsVisited(): void;
    onCueIntersectionChange(isIntersecting: boolean, cueId: string, groupId?: GroupName): boolean | undefined;
}
export declare const guideCueService: GuideCueService;
export {};
//# sourceMappingURL=guide-cue-service.d.ts.map