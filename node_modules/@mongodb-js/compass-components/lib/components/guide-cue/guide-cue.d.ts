import React from 'react';
import { GuideCue as UnwrappedGuideCue } from '@leafygreen-ui/guide-cue';
import type { GroupName } from './guide-cue-groups';
declare const LGGuideCue: typeof UnwrappedGuideCue;
export type Cue = {
    cueId: string;
    step: number;
    groupId?: GroupName;
};
export type GroupCue = Cue & {
    groupSteps: number;
    groupId: GroupName;
};
type GuideCueContextValue = {
    onNext?: (cue: Cue) => void;
    onNextGroup?: (groupCue: GroupCue) => void;
};
export declare const GuideCueProvider: React.FC<GuideCueContextValue>;
type LGGuideCueProps = React.ComponentProps<typeof LGGuideCue>;
type GroupAndStep = {
    groupId: GroupName;
    step: number;
} | {
    groupId?: never;
    step?: never;
};
export type GuideCueProps<T> = Omit<LGGuideCueProps, 'currentStep' | 'refEl' | 'numberOfSteps' | 'open' | 'setOpen' | 'children'> & GroupAndStep & {
    cueId: string;
    description: React.ReactChild;
    trigger: ({ ref }: {
        ref: React.Ref<T>;
    }) => React.ReactElement;
    onOpenChange?: (isOpen: boolean) => void;
};
export declare const GuideCue: <T extends HTMLElement>({ description, trigger, cueId, groupId, step, onPrimaryButtonClick, onDismiss, onOpenChange, ...restOfCueProps }: GuideCueProps<T>) => JSX.Element;
export {};
//# sourceMappingURL=guide-cue.d.ts.map