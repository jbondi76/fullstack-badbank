"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Accordion = void 0;
const react_1 = __importStar(require("react"));
const tokens_1 = require("@leafygreen-ui/tokens");
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const utils_1 = require("@react-aria/utils");
const use_theme_1 = require("../hooks/use-theme");
const leafygreen_1 = require("./leafygreen");
const buttonStyles = (0, emotion_1.css)({
    fontWeight: 'bold',
    fontSize: '14px',
    display: 'flex',
    alignItems: 'flex-start',
    paddingLeft: 0,
    paddingRight: 0,
    border: 'none',
    background: 'none',
    borderRadius: '6px',
    boxShadow: 'none',
    transition: 'box-shadow 150ms ease-in-out',
    '&:hover': {
        cursor: 'pointer',
    },
    '&:focus-visible': {
        outline: 'none',
        boxShadow: `0 0 0 3px ${palette_1.palette.blue.light1}`,
    },
});
const buttonLightThemeStyles = (0, emotion_1.css)({
    color: palette_1.palette.gray.dark2,
});
const buttonDarkThemeStyles = (0, emotion_1.css)({
    color: palette_1.palette.white,
});
const buttonIconContainerStyles = (0, emotion_1.css)({
    padding: tokens_1.spacing[1] / 2,
    paddingLeft: 0,
});
const buttonTextStyles = (0, emotion_1.css)({
    textAlign: 'left',
});
const buttonHintStyles = (0, emotion_1.css)({
    margin: 0,
    marginLeft: tokens_1.spacing[1],
    padding: 0,
    display: 'inline',
});
function Accordion({ text, hintText, open: _open, setOpen: _setOpen, ...props }) {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const [localOpen, setLocalOpen] = (0, react_1.useState)(_open ?? false);
    const setOpenRef = (0, react_1.useRef)(_setOpen);
    setOpenRef.current = _setOpen;
    const onOpenChange = (0, react_1.useCallback)(() => {
        setLocalOpen((prevValue) => {
            const newValue = !prevValue;
            setOpenRef.current?.(newValue);
            return newValue;
        });
    }, []);
    const regionId = (0, utils_1.useId)();
    const labelId = (0, utils_1.useId)();
    const open = typeof _open !== 'undefined' ? _open : localOpen;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("button", { ...props, className: (0, emotion_1.cx)(darkMode ? buttonDarkThemeStyles : buttonLightThemeStyles, buttonStyles), id: labelId, type: "button", "aria-expanded": open ? 'true' : 'false', "aria-controls": regionId, onClick: onOpenChange },
            react_1.default.createElement("span", { className: buttonIconContainerStyles },
                react_1.default.createElement(leafygreen_1.Icon, { glyph: open ? 'ChevronDown' : 'ChevronRight' })),
            react_1.default.createElement("div", { className: buttonTextStyles },
                text,
                hintText && (react_1.default.createElement(leafygreen_1.Description, { className: buttonHintStyles }, hintText)))),
        open && (react_1.default.createElement("div", { role: "region", "aria-labelledby": labelId, id: regionId }, props.children))));
}
exports.Accordion = Accordion;
//# sourceMappingURL=accordion.js.map