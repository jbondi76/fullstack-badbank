"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSortedItems = exports.useSortControls = void 0;
const react_1 = __importStar(require("react"));
const utils_1 = require("@react-aria/utils");
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const leafygreen_1 = require("../components/leafygreen");
const controlsContainer = (0, emotion_1.css)({
    display: 'flex',
    alignItems: 'center',
    gap: tokens_1.spacing[2],
});
const label = (0, emotion_1.css)({
    margin: '0 !important',
    padding: '0 !important',
});
const select = (0, emotion_1.css)({
    '& > button': {
        margin: 0,
    },
});
function useSortControls(items, options) {
    const labelId = (0, utils_1.useId)('Sort by');
    const controlId = (0, utils_1.useId)();
    const [sortState, dispatch] = (0, react_1.useReducer)((state, action) => {
        if (action.type === 'change-name' && action.name !== state.name) {
            return {
                ...state,
                name: action.name,
            };
        }
        if (action.type === 'change-order') {
            return {
                ...state,
                order: (state.order * -1),
            };
        }
        return state;
    }, { name: items[0]?.name ?? null, order: 1 });
    const sortControls = (0, react_1.useMemo)(() => {
        const glyph = sortState.order === -1
            ? 'SortDescending'
            : sortState.order === 1
                ? 'SortAscending'
                : 'Unsorted';
        const longestLabel = Math.max(...items.map((item) => item.label.length));
        return (react_1.default.createElement("div", { className: controlsContainer },
            react_1.default.createElement(leafygreen_1.Label, { id: labelId, htmlFor: controlId, className: label }, "Sort by"),
            react_1.default.createElement(leafygreen_1.Select, { disabled: options?.isDisabled, id: controlId, "aria-labelledby": labelId, allowDeselect: false, className: select, style: { minWidth: `calc(${longestLabel}ch + ${tokens_1.spacing[6]}px)` }, onChange: (value) => {
                    dispatch({ type: 'change-name', name: value || null });
                }, defaultValue: sortState.name ?? undefined }, items.map((item) => (react_1.default.createElement(leafygreen_1.Option, { key: item.name, value: item.name }, item.label)))),
            react_1.default.createElement(leafygreen_1.Button, { "aria-label": glyph, title: glyph, rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { glyph: glyph }), onClick: () => {
                    dispatch({ type: 'change-order' });
                }, disabled: sortState.name === null || options?.isDisabled })));
    }, [sortState, items, labelId, controlId, options?.isDisabled]);
    return [
        sortControls,
        options?.isDisabled ? { name: null, order: 1 } : sortState,
    ];
}
exports.useSortControls = useSortControls;
function sortUnknown(a, b, order) {
    return (a === b ? 0 : a < b ? -1 : 1) * order;
}
function sortString(a, b, order) {
    return a.localeCompare(b) * order;
}
function useSortedItems(items, { name, order, }, sortFn = null) {
    return (0, react_1.useMemo)(() => {
        return [...items].sort((a, b) => {
            if (!name) {
                return 0;
            }
            if (typeof a[name] === 'undefined') {
                return 1;
            }
            const sort = sortFn && sortFn[name];
            if (sort) {
                return sort(a[name], b[name], order);
            }
            if (typeof a[name] === 'string') {
                return sortString(a[name], b[name], order);
            }
            return sortUnknown(a[name], b[name], order);
        });
    }, [items, name, sortFn, order]);
}
exports.useSortedItems = useSortedItems;
//# sourceMappingURL=use-sort.js.map