"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useToast = exports.ToastArea = exports.closeToast = exports.openToast = void 0;
const react_1 = __importStar(require("react"));
const leafygreen_1 = require("../components/leafygreen");
const use_stacked_component_1 = require("./use-stacked-component");
const __1 = require("..");
const defaultToastProperties = {
    dismissible: true,
};
class GlobalToastState {
    constructor() {
        this.timeouts = new Map();
        this.toasts = new Map();
        this.onToastsChange = () => {
        };
    }
    openToast(id, props) {
        this.clearTimeout(id);
        const toastProps = {
            ...defaultToastProperties,
            ...props,
            'data-testid': `toast-${id}`,
            onClose: (e) => {
                this.closeToast(id);
                props.onClose?.(e);
            },
        };
        this.toasts.set(id, toastProps);
        if (toastProps.timeout) {
            const timeoutId = setTimeout(() => {
                this.closeToast(id);
            }, toastProps.timeout);
            this.timeouts.set(id, timeoutId);
            timeoutId.unref?.();
        }
        this.onToastsChange('push', { id, ...toastProps }, this.toasts);
    }
    closeToast(id) {
        this.clearTimeout(id);
        this.toasts.delete(id);
        this.onToastsChange('pop', { id }, this.toasts);
    }
    clearTimeout(id) {
        if (id) {
            if (this.timeouts.has(id)) {
                clearTimeout(this.timeouts.get(id));
                this.timeouts.delete(id);
            }
        }
        else {
            this.timeouts.forEach((id) => {
                clearTimeout(id);
            });
            this.timeouts.clear();
        }
    }
    clear() {
        this.clearTimeout();
        const ids = Array.from(this.toasts.keys());
        this.toasts.clear();
        return ids;
    }
}
const toastState = new GlobalToastState();
exports.openToast = toastState.openToast.bind(toastState);
exports.closeToast = toastState.closeToast.bind(toastState);
const toastActions = { openToast: exports.openToast, closeToast: exports.closeToast };
const ToastContext = (0, react_1.createContext)({
    openToast: () => {
    },
    closeToast: () => {
    },
});
const _ToastArea = ({ children }) => {
    const toastRef = (0, react_1.useRef)((0, leafygreen_1.useToast)());
    const toastStateRef = (0, react_1.useRef)();
    if (!toastStateRef.current) {
        toastStateRef.current = toastState;
        toastStateRef.current.onToastsChange = (action, toast) => {
            if (action === 'push') {
                toastRef.current.pushToast({
                    ...toast,
                    timeout: null,
                });
            }
            if (action === 'pop') {
                toastRef.current.popToast(toast.id);
            }
        };
    }
    (0, react_1.useEffect)(() => {
        return () => {
            const ids = toastStateRef.current?.clear();
            ids?.forEach((id) => {
                toastRef.current.popToast(id);
            });
        };
    }, []);
    return (react_1.default.createElement(ToastContext.Provider, { value: toastActions }, children));
};
const ToastAreaMountedContext = react_1.default.createContext(false);
const ToastArea = ({ children }) => {
    const stackedContext = (0, use_stacked_component_1.useStackedComponent)();
    const stackedElemStyles = (0, react_1.useMemo)(() => {
        const zIndex = stackedContext?.zIndex ? stackedContext.zIndex + 1 : 1;
        return (0, __1.css)({ zIndex });
    }, [stackedContext]);
    if ((0, react_1.useContext)(ToastAreaMountedContext)) {
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    }
    return (react_1.default.createElement(ToastAreaMountedContext.Provider, { value: true },
        react_1.default.createElement(leafygreen_1.ToastProvider, { portalClassName: stackedElemStyles },
            react_1.default.createElement(_ToastArea, null, children))));
};
exports.ToastArea = ToastArea;
function useToast(namespace) {
    const { openToast: openGlobalToast, closeToast: closeGlobalToast } = (0, react_1.useContext)(ToastContext);
    const openToast = (0, react_1.useCallback)((toastId, toastProperties) => {
        openGlobalToast(`${namespace}--${toastId}`, toastProperties);
    }, [namespace, openGlobalToast]);
    const closeToast = (0, react_1.useCallback)((toastId) => {
        closeGlobalToast(`${namespace}--${toastId}`);
    }, [namespace, closeGlobalToast]);
    return {
        openToast,
        closeToast,
    };
}
exports.useToast = useToast;
//# sourceMappingURL=use-toast.js.map