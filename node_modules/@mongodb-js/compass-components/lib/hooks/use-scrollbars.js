"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withPortalScrollbars = exports.useScrollbars = exports.getScrollbarStyles = void 0;
const polished_1 = require("polished");
const palette_1 = require("@leafygreen-ui/palette");
const emotion_1 = require("@leafygreen-ui/emotion");
const react_1 = __importStar(require("react"));
const is_electron_renderer_1 = __importDefault(require("is-electron-renderer"));
const use_theme_1 = require("./use-theme");
const scrollbarSize = 10;
const scrollbarStyles = (0, emotion_1.css)({
    '*::-webkit-scrollbar-thumb': {
        backgroundColor: 'transparent',
        borderRadius: `${scrollbarSize}px`,
    },
    '*::-webkit-scrollbar-track': {
        backgroundColor: 'transparent',
    },
    '*::-webkit-scrollbar': {
        width: `${scrollbarSize}px`,
        '&:horizontal': {
            height: `${scrollbarSize}px`,
        },
    },
    '*::-webkit-scrollbar-corner': {
        background: 'transparent',
    },
});
const scrollbarLightModeStyles = (0, emotion_1.css)({
    '*:active::-webkit-scrollbar-thumb, *:focus::-webkit-scrollbar-thumb, *:hover::-webkit-scrollbar-thumb': {
        backgroundColor: (0, polished_1.rgba)(palette_1.palette.black, 0.12),
        '&:hover': {
            backgroundColor: (0, polished_1.rgba)(palette_1.palette.black, 0.2),
        },
    },
    '*::-webkit-scrollbar-thumb': {
        '&:horizontal': {
            backgroundColor: (0, polished_1.rgba)(palette_1.palette.black, 0.12),
        },
    },
    '*::-webkit-scrollbar-track': {
        '&:hover': {
            backgroundColor: (0, polished_1.rgba)(palette_1.palette.black, 0.04),
        },
    },
}, scrollbarStyles);
const scrollbarDarkModeStyles = (0, emotion_1.css)({
    '*:active::-webkit-scrollbar-thumb, *:focus::-webkit-scrollbar-thumb, *:hover::-webkit-scrollbar-thumb': {
        backgroundColor: (0, polished_1.rgba)(palette_1.palette.white, 0.2),
        '&:hover': {
            backgroundColor: (0, polished_1.rgba)(palette_1.palette.white, 0.25),
        },
    },
    '*::-webkit-scrollbar-thumb': {
        '&:horizontal': {
            backgroundColor: (0, polished_1.rgba)(palette_1.palette.white, 0.2),
        },
    },
    '*::-webkit-scrollbar-track': {
        '&:hover': {
            backgroundColor: (0, polished_1.rgba)(palette_1.palette.white, 0.1),
        },
    },
}, scrollbarStyles);
function getScrollbarStyles(darkMode) {
    return darkMode ? scrollbarDarkModeStyles : scrollbarLightModeStyles;
}
exports.getScrollbarStyles = getScrollbarStyles;
function useScrollbars() {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const scrollbarStylesClass = (0, react_1.useMemo)(() => {
        if (!is_electron_renderer_1.default) {
            return undefined;
        }
        return getScrollbarStyles(!!darkMode);
    }, [darkMode]);
    return {
        className: scrollbarStylesClass,
    };
}
exports.useScrollbars = useScrollbars;
const withPortalScrollbars = (WrappedComponent) => {
    const ComponentWithScrollbars = (props) => {
        const { className } = useScrollbars();
        const appliedClassName = is_electron_renderer_1.default ? className : undefined;
        return (react_1.default.createElement(WrappedComponent, { ...props, portalClassName: (0, emotion_1.cx)(appliedClassName, props.portalClassName) }));
    };
    return ComponentWithScrollbars;
};
exports.withPortalScrollbars = withPortalScrollbars;
//# sourceMappingURL=use-scrollbars.js.map