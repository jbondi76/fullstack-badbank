"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFocusRing = exports.focusRing = void 0;
const tokens_1 = require("@leafygreen-ui/tokens");
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const react_1 = require("react");
const use_theme_1 = require("./use-theme");
const focusRingStyles = (0, emotion_1.css)({
    position: 'relative',
    outline: 'none',
    '&::after': {
        position: 'absolute',
        content: '""',
        pointerEvents: 'none',
        top: 3,
        right: 3,
        bottom: 3,
        left: 3,
        borderRadius: tokens_1.spacing[1],
        boxShadow: `0 0 0 0 transparent`,
        transition: 'box-shadow .16s ease-in',
        zIndex: 1,
    },
});
const focusRingVisibleStyles = (0, emotion_1.css)({
    '&::after': {
        boxShadow: `0 0 0 3px ${palette_1.palette.blue.light1} !important`,
        transitionTimingFunction: 'ease-out',
    },
});
const focusRingHoverVisibleStyles = (darkMode) => (0, emotion_1.css)({
    '&::after': {
        boxShadow: `0 0 0 3px ${darkMode ? palette_1.palette.gray.dark2 : palette_1.palette.gray.light2}`,
        transitionTimingFunction: 'ease-out',
    },
});
exports.focusRing = (0, emotion_1.css)(focusRingStyles, {
    '&:focus-visible': focusRingVisibleStyles,
});
const focusRingOuter = (0, emotion_1.css)({
    '&::after': {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
    },
});
const focusRingWithin = (0, emotion_1.css)({
    '&:focus-within': focusRingVisibleStyles,
});
const focusRingHover = (darkMode) => (0, emotion_1.css)({
    '&:hover': focusRingHoverVisibleStyles(darkMode),
});
function useFocusRing({ outer = false, focusWithin = false, hover = false, radius, } = {}) {
    const darkMode = (0, use_theme_1.useDarkMode)();
    const outerClass = (0, react_1.useMemo)(() => {
        return outer && focusRingOuter;
    }, [outer]);
    const radiusClass = (0, react_1.useMemo)(() => {
        return (typeof radius === 'number' &&
            (0, emotion_1.css)({
                '&::after': {
                    borderRadius: radius,
                },
            }));
    }, [radius]);
    const focusWithinClass = (0, react_1.useMemo)(() => {
        return focusWithin && focusRingWithin;
    }, [focusWithin]);
    const hoverClass = (0, react_1.useMemo)(() => {
        return hover && focusRingHover(!!darkMode);
    }, [hover, darkMode]);
    return {
        className: (0, emotion_1.cx)(exports.focusRing, outerClass, radiusClass, focusWithinClass, hoverClass),
    };
}
exports.useFocusRing = useFocusRing;
//# sourceMappingURL=use-focus-ring.js.map