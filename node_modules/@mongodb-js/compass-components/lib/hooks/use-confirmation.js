"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConfirmationModal = exports.ConfirmationModalArea = exports.showConfirmation = exports.ConfirmationModalVariant = void 0;
const react_1 = __importStar(require("react"));
const confirmation_modal_1 = require("@leafygreen-ui/confirmation-modal");
Object.defineProperty(exports, "ConfirmationModalVariant", { enumerable: true, get: function () { return confirmation_modal_1.Variant; } });
const confirmation_modal_2 = __importDefault(require("../components/modals/confirmation-modal"));
let confirmationId = 0;
class GlobalConfirmation extends EventTarget {
    showConfirmation(props) {
        return new Promise((resolve, reject) => {
            this.dispatchEvent(new CustomEvent('show-confirmation', {
                detail: {
                    props: { ...props, confirmationId: ++confirmationId },
                    resolve,
                    reject,
                },
            }));
        });
    }
}
const globalConfirmation = new GlobalConfirmation();
exports.showConfirmation = globalConfirmation.showConfirmation.bind(globalConfirmation);
const ConfirmationModalContext = react_1.default.createContext({
    isMounted: false,
    showConfirmation: exports.showConfirmation,
});
const ConfirmationModalArea = ({ children }) => {
    const hasParentContext = (0, react_1.useContext)(ConfirmationModalContext).isMounted;
    const [confirmationProps, setConfirmationProps] = (0, react_1.useState)({
        open: false,
        confirmationId: -1,
    });
    const callbackRef = (0, react_1.useRef)();
    const contextValue = react_1.default.useMemo(() => ({ showConfirmation: exports.showConfirmation, isMounted: true }), []);
    (0, react_1.useEffect)(() => {
        return () => {
            callbackRef.current?.(false);
        };
    }, []);
    (0, react_1.useEffect)(() => {
        const listener = ({ detail: { resolve, reject, props }, }) => {
            setConfirmationProps({ open: true, ...props });
            const onAbort = () => {
                setConfirmationProps({ open: false, ...props });
                reject(props.signal?.reason);
            };
            callbackRef.current = (confirmed) => {
                props.signal?.removeEventListener('abort', onAbort);
                resolve(confirmed);
            };
            props.signal?.addEventListener('abort', onAbort);
        };
        globalConfirmation.addEventListener('show-confirmation', listener);
        return () => {
            globalConfirmation.removeEventListener('show-confirmation', listener);
        };
    }, []);
    const handleConfirm = () => {
        onUserAction(true);
    };
    const handleCancel = () => {
        onUserAction(false);
    };
    const onUserAction = (value) => {
        setConfirmationProps((state) => ({ ...state, open: false }));
        callbackRef.current?.(value);
        callbackRef.current = undefined;
    };
    if (hasParentContext) {
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    }
    return (react_1.default.createElement(ConfirmationModalContext.Provider, { value: contextValue },
        children,
        react_1.default.createElement(confirmation_modal_2.default, { key: confirmationId, "data-testid": confirmationProps['data-testid'] ?? 'confirmation-modal', open: confirmationProps.open, title: confirmationProps.title ?? 'Are you sure?', variant: confirmationProps.variant ?? confirmation_modal_1.Variant.Default, buttonText: confirmationProps.buttonText ?? 'Confirm', requiredInputText: confirmationProps.requiredInputText ?? undefined, onConfirm: handleConfirm, onCancel: handleCancel }, confirmationProps.description)));
};
exports.ConfirmationModalArea = ConfirmationModalArea;
const useConfirmationModal = () => {
    const { isMounted, showConfirmation } = (0, react_1.useContext)(ConfirmationModalContext);
    if (!isMounted) {
        throw new Error('useConfirmationModal must be used within a ConfirmationModalArea');
    }
    return { showConfirmation };
};
exports.useConfirmationModal = useConfirmationModal;
//# sourceMappingURL=use-confirmation.js.map