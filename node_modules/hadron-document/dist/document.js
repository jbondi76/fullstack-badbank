'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Document = exports.Events = void 0;
const element_1 = require("./element");
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const bson_1 = require("bson");
const object_generator_1 = __importDefault(require("./object-generator"));
const utils_1 = require("./utils");
exports.Events = {
    Cancel: 'Document::Cancel',
    Expanded: 'Document::Expanded',
    Collapsed: 'Document::Collapsed',
};
const ID = '_id';
class Document extends eventemitter3_1.default {
    cancel() {
        for (const element of Array.from(this.elements)) {
            element.cancel();
        }
        this.emit(exports.Events.Cancel);
    }
    constructor(doc, cloned = false) {
        super();
        this.size = null;
        this.expanded = false;
        this.uuid = new bson_1.UUID().toHexString();
        this.doc = doc;
        this.cloned = cloned || false;
        this.isUpdatable = true;
        this.type = 'Document';
        this.currentType = 'Document';
        this.elements = this._generateElements();
    }
    apply(doc) {
        if (typeof doc?.generateObject === 'function') {
            doc = doc.generateObject();
        }
        const updatedKeys = [];
        let prevKey = null;
        for (const [key, value] of Object.entries(doc)) {
            if (this.get(key)) {
                this.get(key).edit(value);
            }
            else if (prevKey) {
                this.insertAfter(this.get(prevKey), key, value);
            }
            else {
                this.insertBeginning(key, value);
            }
            prevKey = key;
            updatedKeys.push(key);
        }
        for (const el of [...this.elements]) {
            if (!updatedKeys.includes(el.currentKey)) {
                el.remove();
            }
        }
    }
    generateObject(options) {
        return object_generator_1.default.generate(this.elements, options);
    }
    generateOriginalObject(options) {
        return object_generator_1.default.generateOriginal(this.elements, options);
    }
    generateUpdateUnlessChangedInBackgroundQuery(opts = {}) {
        const originalFieldsThatWillBeUpdated = object_generator_1.default.getQueryForOriginalKeysAndValuesForSpecifiedFields(this, opts, true);
        const query = {
            _id: this.getId(),
            ...originalFieldsThatWillBeUpdated,
        };
        const updateDoc = object_generator_1.default.generateUpdateDoc(this);
        return {
            query,
            updateDoc,
        };
    }
    get(key) {
        return this.elements.get(key);
    }
    getChild(path) {
        if (!path) {
            return undefined;
        }
        let element = this.elements.get(path[0]);
        let i = 1;
        while (i < path.length) {
            if (element === undefined) {
                return undefined;
            }
            element =
                element.currentType === 'Array'
                    ? element.at(path[i])
                    : element.get(path[i]);
            i++;
        }
        return element;
    }
    getId() {
        const element = this.get(ID);
        return element ? element.generateObject() : null;
    }
    getQueryForOriginalKeysAndValuesForSpecifiedKeys(opts = {}) {
        return object_generator_1.default.getQueryForOriginalKeysAndValuesForSpecifiedFields(this, opts, false);
    }
    getStringId() {
        const element = this.get(ID);
        if (!element) {
            return null;
        }
        else if (element.currentType === 'Array' ||
            element.currentType === 'Object') {
            return JSON.stringify(element.generateObject());
        }
        return String(element.value);
    }
    insertPlaceholder() {
        return this.insertEnd('', '');
    }
    insertBeginning(key, value) {
        const newElement = this.elements.insertBeginning(key, value);
        newElement._bubbleUp(element_1.Events.Added, newElement, this);
        return newElement;
    }
    insertEnd(key, value) {
        const newElement = this.elements.insertEnd(key, value);
        newElement._bubbleUp(element_1.Events.Added, newElement, this);
        return newElement;
    }
    insertAfter(element, key, value) {
        const newElement = this.elements.insertAfter(element, key, value);
        newElement?._bubbleUp(element_1.Events.Added, newElement, this);
        return newElement;
    }
    isAdded() {
        return false;
    }
    isModified() {
        for (const element of this.elements) {
            if (element.isModified()) {
                return true;
            }
        }
        return false;
    }
    isRemoved() {
        return false;
    }
    isRoot() {
        return true;
    }
    _generateElements() {
        return new element_1.ElementList(this, this.doc);
    }
    static get Events() {
        return exports.Events;
    }
    static FromEJSON(input) {
        const parsed = bson_1.EJSON.parse(input, { relaxed: false });
        return new Document(parsed);
    }
    static FromEJSONArray(input) {
        const parsed = bson_1.EJSON.parse(input, { relaxed: false });
        return Array.isArray(parsed)
            ? parsed.map((doc) => new Document(doc))
            : [new Document(parsed)];
    }
    toEJSON(source = 'current', options = {}) {
        const obj = source === 'original'
            ? this.generateOriginalObject()
            : this.generateObject();
        return (0, utils_1.objectToIdiomaticEJSON)(obj, options);
    }
    expand() {
        this.expanded = true;
        for (const element of this.elements) {
            element.expand(true);
        }
        this.emit(exports.Events.Expanded);
    }
    collapse() {
        this.expanded = false;
        for (const element of this.elements) {
            element.collapse();
        }
        this.emit(exports.Events.Collapsed);
    }
}
exports.Document = Document;
exports.default = Document;
//# sourceMappingURL=document.js.map