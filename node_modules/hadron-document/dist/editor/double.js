"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hadron_type_checker_1 = __importDefault(require("hadron-type-checker"));
const element_events_1 = __importDefault(require("../element-events"));
const utils_1 = require("../utils");
const standard_1 = __importDefault(require("./standard"));
class DoubleEditor extends standard_1.default {
    constructor(element) {
        super(element);
    }
    complete() {
        super.complete();
        if (this.element.isCurrentTypeValid()) {
            this.element.edit(hadron_type_checker_1.default.cast(this.element.currentValue, 'Double'));
        }
    }
    edit(value) {
        try {
            const double = hadron_type_checker_1.default.cast(value, 'Double');
            if (isNaN(double.value)) {
                this.element.setInvalid(value, 'Double', `${String(value)} is not a valid double format`);
            }
            else {
                this.element.currentValue = value;
                this.element.setValid();
                this.element._bubbleUp(element_events_1.default.Edited, this.element);
            }
        }
        catch (error) {
            this.element.setInvalid(value, this.element.currentType, error.message);
        }
    }
    size() {
        const currentValue = this.element.currentValue;
        return (0, utils_1.fieldStringLen)(typeof currentValue.valueOf === 'function'
            ? currentValue.valueOf()
            : currentValue);
    }
}
exports.default = DoubleEditor;
//# sourceMappingURL=double.js.map