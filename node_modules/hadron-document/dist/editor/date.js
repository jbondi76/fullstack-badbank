"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hadron_type_checker_1 = __importDefault(require("hadron-type-checker"));
const element_events_1 = __importDefault(require("../element-events"));
const utils_1 = require("../utils");
const standard_1 = __importDefault(require("./standard"));
class DateEditor extends standard_1.default {
    constructor(element) {
        super(element);
    }
    complete() {
        super.complete();
        if (this.element.isCurrentTypeValid()) {
            this.element.edit(hadron_type_checker_1.default.cast(this._formattedValue(), 'Date'));
        }
    }
    edit(value) {
        try {
            const date = hadron_type_checker_1.default.cast(value, 'Date');
            if (date.toString() === 'Invalid Date') {
                this.element.setInvalid(value, 'Date', `${String(value)} is not in a valid date format`);
            }
            else {
                this.element.currentValue = value;
                this.element.setValid();
                this.element._bubbleUp(element_events_1.default.Edited, this.element);
            }
        }
        catch (e) {
            this.element.setInvalid(value, this.element.currentType, e.message);
        }
    }
    size(editMode) {
        const value = this.element.currentValue;
        if (editMode) {
            return (0, utils_1.fieldStringLen)(value);
        }
        return this.element.isCurrentTypeValid()
            ? (0, utils_1.fieldStringLen)(this._formattedValue())
            : (0, utils_1.fieldStringLen)(value);
    }
    start() {
        super.start();
        if (this.element.isCurrentTypeValid()) {
            this.edit(this._formattedValue());
        }
    }
    value() {
        const value = this.element.currentValue;
        if (!this.editing && this.element.isCurrentTypeValid()) {
            return this._formattedValue();
        }
        return String(value);
    }
    _formattedValue() {
        const date = new Date(this.element.currentValue);
        try {
            return date.toISOString().replace('Z', '+00:00');
        }
        catch {
            return String(date);
        }
    }
}
exports.default = DateEditor;
//# sourceMappingURL=date.js.map