import type { Element } from './element';
import type { Document } from './document';
import type { BSONArray, BSONObject } from './utils';
export interface ObjectGeneratorOptions {
    excludeInternalFields?: boolean;
}
export interface KeyInclusionOptions {
    alwaysIncludeKeys?: string[][];
    includableEncryptedKeys?: string[][];
}
export declare class ObjectGenerator {
    static generate(elements: Iterable<Element>, options?: ObjectGeneratorOptions): Record<string, unknown>;
    static generateOriginal(elements: Iterable<Element>, options?: ObjectGeneratorOptions): Record<string, unknown>;
    static generateArray(elements: Iterable<Element>, options?: ObjectGeneratorOptions): unknown[];
    static generateOriginalArray(elements: Iterable<Element>, options?: ObjectGeneratorOptions): unknown[];
    private static recursivelyGatherFieldsAndValuesForUpdate;
    private static createGetFieldExpr;
    private static createSetFieldExpr;
    static getQueryForOriginalKeysAndValuesForSpecifiedFields(target: Document | Element, keyInclusionOptions: Readonly<KeyInclusionOptions>, includeUpdatedFields: boolean): BSONObject;
    static generateUpdateDoc(target: Document | Element): {
        $set?: BSONObject;
        $unset?: BSONObject;
    } | BSONArray;
}
export default ObjectGenerator;
//# sourceMappingURL=object-generator.d.ts.map