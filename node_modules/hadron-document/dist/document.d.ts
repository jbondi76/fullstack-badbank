import type { Element } from './element';
import { ElementList } from './element';
import EventEmitter from 'eventemitter3';
import type { KeyInclusionOptions, ObjectGeneratorOptions } from './object-generator';
import type { BSONArray, BSONObject, BSONValue } from './utils';
import type { HadronEJSONOptions } from './utils';
export declare const Events: {
    Cancel: string;
    Expanded: string;
    Collapsed: string;
};
export declare class Document extends EventEmitter {
    uuid: string;
    doc: BSONObject;
    cloned: boolean;
    isUpdatable: boolean;
    elements: ElementList;
    type: 'Document';
    currentType: 'Document';
    size: number | null;
    expanded: boolean;
    cancel(): void;
    constructor(doc: BSONObject, cloned?: boolean);
    apply(doc: BSONObject | Document): void;
    generateObject(options?: ObjectGeneratorOptions): BSONObject;
    generateOriginalObject(options?: ObjectGeneratorOptions): BSONObject;
    generateUpdateUnlessChangedInBackgroundQuery(opts?: Readonly<KeyInclusionOptions>): {
        query: BSONObject;
        updateDoc: {
            $set?: BSONObject;
            $unset?: BSONObject;
        } | BSONArray;
    };
    get(key: string): Element | undefined;
    getChild(path: (string | number)[]): Element | undefined;
    getId(): BSONValue;
    getQueryForOriginalKeysAndValuesForSpecifiedKeys(opts?: Readonly<KeyInclusionOptions>): BSONObject;
    getStringId(): null | string;
    insertPlaceholder(): Element;
    insertBeginning(key: string | number, value: BSONValue): Element;
    insertEnd(key: string | number, value: BSONValue): Element;
    insertAfter(element: Element, key: string | number, value: BSONValue): Element | undefined;
    isAdded(): boolean;
    isModified(): boolean;
    isRemoved(): boolean;
    isRoot(): this is Document;
    _generateElements(): ElementList;
    static get Events(): typeof Events;
    static FromEJSON(input: string): Document;
    static FromEJSONArray(input: string): Document[];
    toEJSON(source?: 'original' | 'current', options?: HadronEJSONOptions): string;
    expand(): void;
    collapse(): void;
}
export default Document;
//# sourceMappingURL=document.d.ts.map