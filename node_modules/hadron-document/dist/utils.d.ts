import type { TypeCastMap, TypeCastTypes } from 'hadron-type-checker';
export declare function fieldStringLen(value: unknown): number;
export type BSONObject = TypeCastMap['Object'];
export type BSONArray = TypeCastMap['Array'];
export type BSONValue = TypeCastMap[TypeCastTypes];
export interface HadronEJSONOptions {
    indent?: number | string;
}
export declare function objectToIdiomaticEJSON(value: any, options?: HadronEJSONOptions): string;
export declare function getDefaultValueForType(type: keyof TypeCastMap): string | boolean | Date | Record<string, unknown> | unknown[] | import("bson").Binary | import("bson").Code | import("bson").Decimal128 | import("bson").Double | import("bson").Int32 | import("bson").Long | import("bson").MaxKey | import("bson").MinKey | import("bson").ObjectId | import("bson").BSONRegExp | import("bson").BSONSymbol | import("bson").Timestamp | null | undefined;
//# sourceMappingURL=utils.d.ts.map