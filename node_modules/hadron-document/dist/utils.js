"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultValueForType = exports.objectToIdiomaticEJSON = exports.fieldStringLen = void 0;
const bson_1 = require("bson");
const hadron_type_checker_1 = __importDefault(require("hadron-type-checker"));
const UNCASTED_EMPTY_TYPE_VALUE = {
    Array: [],
    Object: {},
    Decimal128: 0,
    Int32: 0,
    Int64: 0,
    Double: 0,
    MaxKey: 0,
    MinKey: 0,
    Timestamp: 0,
    Date: 0,
    String: '',
    Code: '',
    Binary: '',
    ObjectId: '',
    BSONRegExp: '',
    BSONSymbol: '',
    Boolean: false,
    Undefined: undefined,
    Null: null,
};
const maxFourYearDate = new Date('9999-12-31T23:59:59.999Z').valueOf();
function fieldStringLen(value) {
    const length = String(value).length;
    return length === 0 ? 1 : length;
}
exports.fieldStringLen = fieldStringLen;
function objectToIdiomaticEJSON(value, options = {}) {
    const serialized = bson_1.EJSON.serialize(value, {
        relaxed: false,
    });
    makeEJSONIdiomatic(serialized);
    return JSON.stringify(serialized, null, 'indent' in options ? options.indent : 2);
}
exports.objectToIdiomaticEJSON = objectToIdiomaticEJSON;
function makeEJSONIdiomatic(value) {
    if (!value || typeof value !== 'object')
        return;
    for (const key of Object.keys(value)) {
        const entry = value[key];
        if (typeof entry !== 'object' || entry === null) {
            continue;
        }
        if (entry.$numberInt) {
            value[key] = +entry.$numberInt;
            continue;
        }
        if (entry.$numberDouble) {
            if (Number.isFinite(+entry.$numberDouble) &&
                !Object.is(+entry.$numberDouble, -0)) {
                value[key] = +entry.$numberDouble;
            }
            continue;
        }
        if (entry.$date && entry.$date.$numberLong) {
            const number = entry.$date.$numberLong;
            if (number >= 0 && number <= maxFourYearDate) {
                entry.$date = new Date(+number).toISOString();
            }
        }
        makeEJSONIdiomatic(entry);
    }
}
function getDefaultValueForType(type) {
    return hadron_type_checker_1.default.cast(UNCASTED_EMPTY_TYPE_VALUE[type], type);
}
exports.getDefaultValueForType = getDefaultValueForType;
//# sourceMappingURL=utils.js.map