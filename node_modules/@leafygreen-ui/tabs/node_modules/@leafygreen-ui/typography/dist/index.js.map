{"version":3,"file":"index.js","sources":["../src/styles.tsx","../src/Body/Body.tsx","../src/utils/useUpdatedBaseFontSize.ts","../src/constants.ts","../src/Description/Description.styles.ts","../src/Disclaimer/Disclaimer.styles.ts","../src/Description/Description.tsx","../src/Error/Error.styles.ts","../src/Disclaimer/Disclaimer.tsx","../src/H1/H1.styles.ts","../src/H2/H2.styles.ts","../src/Error/Error.tsx","../src/H1/H1.tsx","../src/H3/H3.styles.ts","../src/H2/H2.tsx","../src/InlineCode/InlineCode.styles.ts","../src/H3/H3.tsx","../src/InlineKeyCode/InlineKeyCode.styles.ts","../src/InlineCode/InlineCode.tsx","../src/Label/Label.styles.ts","../src/InlineKeyCode/InlineKeyCode.tsx","../src/Link/shared.styles.ts","../src/Label/Label.tsx","../src/Link/BackLink/BackLink.styles.ts","../src/Link/Link/Link.styles.ts","../src/Overline/Overline.styles.ts","../src/Subtitle/Subtitle.styles.ts","../src/Link/BackLink/BackLink.tsx","../src/Link/Link/Link.types.ts","../src/Link/Link/Link.tsx","../src/Overline/Overline.tsx","../src/Subtitle/Subtitle.tsx","../src/utils/StaticWidthText.tsx"],"sourcesContent":["import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport {\n  BaseFontSize,\n  color,\n  fontFamilies,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const baseTypographyStyles = css`\n  margin: unset;\n  font-family: ${fontFamilies.default};\n  color: ${color.light.text.primary.default};\n`;\n\nexport const bodyTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: ${typeScales.body2.lineHeight}px;\n  `,\n} as const;\n\nexport const codeTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.code1.fontSize}px;\n    line-height: ${typeScales.code1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.code2.fontSize}px;\n    line-height: ${typeScales.code2.lineHeight}px;\n  `,\n} as const;\n\nexport const defaultTextColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${color.light.text.primary.default};\n  `,\n  [Theme.Dark]: css`\n    color: ${color.dark.text.primary.default};\n  `,\n};\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\nimport { fontWeights as fontWeightTokens } from '@leafygreen-ui/tokens';\n\nimport {\n  baseTypographyStyles,\n  bodyTypeScaleStyles,\n  defaultTextColor,\n} from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport { BaseBodyProps } from './Body.types';\n\nconst Body = Polymorphic<BaseBodyProps>(\n  ({\n    baseFontSize: baseFontSizeOverride,\n    darkMode: darkModeProp,\n    className,\n    weight = 'regular',\n    as = 'p' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = usePolymorphic(as);\n\n    // Currently hardcoding selectors to keys; could consider a dynamic solution that runs once\n    const fontWeight = css`\n      font-weight: ${fontWeightTokens[weight]};\n      strong,\n      b {\n        font-weight: ${fontWeightTokens.bold};\n      }\n    `;\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          bodyTypeScaleStyles[baseFontSize],\n          defaultTextColor[theme],\n          fontWeight,\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nBody.displayName = 'Body';\n\nexport default Body;\n","import { useBaseFontSize } from '@leafygreen-ui/leafygreen-provider';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\n/**\n * A temporary wrapper around {@link useBaseFontSize}\n *\n * Returns a font size token consistent with the visual brand refresh.\n *\n * Once all components have been updated for the refresh,\n * this hook will be removed, and {@link useBaseFontSize} updated\n * to return the updated tokens.\n *\n * @param override: If the calling component accepts a `baseFontSize` prop, pass that prop into this hook to respect it\n * @deprecated\n * @internal\n * @returns - {@link BaseFontSize}\n */\nexport const useUpdatedBaseFontSize = (\n  override?: BaseFontSize | 14,\n): BaseFontSize => {\n  const baseFontSize = useBaseFontSize();\n  if (override)\n    return override === 16 ? BaseFontSize.Body2 : BaseFontSize.Body1;\n  return baseFontSize === 16 ? BaseFontSize.Body2 : BaseFontSize.Body1;\n};\n","export const LGIDS_TYPOGRAPHY = {\n  label: 'lg-label',\n  description: 'lg-description',\n} as const;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport {\n  BaseFontSize,\n  color,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const getDescriptionStyle = (theme: Theme) => {\n  return css`\n    color: ${color[theme].text.secondary.default};\n\n    font-family: ${fontFamilies.default};\n    font-weight: ${fontWeights.regular};\n    margin-top: 0;\n    margin-bottom: 0;\n  `;\n};\n\nexport const getDisabledDescriptionColorStyle = (theme: Theme) => {\n  return css`\n    color: ${color[theme].text.disabled.default};\n  `;\n};\n\nexport const descriptionTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: 20px; // Hardcoding because it does not match body2 lineHeight\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { color } from '@leafygreen-ui/tokens';\n\nexport const disclaimerTextColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${color.light.text.secondary.default};\n  `,\n  [Theme.Dark]: css`\n    color: ${color.dark.text.secondary.default};\n  `,\n};\n\nexport const disclaimerStyles = css`\n  display: block;\n  font-size: 11px;\n  line-height: 16px;\n  letter-spacing: 0.2px;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { LGIDS_TYPOGRAPHY } from '../constants';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  descriptionTypeScaleStyles,\n  getDescriptionStyle,\n  getDisabledDescriptionColorStyle,\n} from './Description.styles';\nimport { DescriptionProps } from './Description.types';\n\nexport const Description = ({\n  baseFontSize: baseFontSizeOverride,\n  'data-lgid': dataLgId = LGIDS_TYPOGRAPHY.description,\n  darkMode: darkModeProp,\n  disabled = false,\n  children,\n  className,\n  ...rest\n}: DescriptionProps) => {\n  const { theme } = useDarkMode(darkModeProp);\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n\n  return (\n    <p\n      data-lgid={dataLgId}\n      className={cx(\n        getDescriptionStyle(theme),\n        descriptionTypeScaleStyles[baseFontSize],\n        {\n          [getDisabledDescriptionColorStyle(theme)]: disabled,\n        },\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </p>\n  );\n};\n\nDescription.displayName = 'Description';\n\nexport default Description;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport {\n  BaseFontSize,\n  color,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const getErrorMessageStyle = ({\n  theme,\n  baseFontSize,\n}: {\n  theme: Theme;\n  baseFontSize: BaseFontSize;\n}) => {\n  const fontSize =\n    baseFontSize === BaseFontSize.Body1\n      ? typeScales.body1.fontSize\n      : typeScales.body2.fontSize;\n  const lineHeight =\n    baseFontSize === BaseFontSize.Body1 ? typeScales.body1.lineHeight : 20;\n\n  return css`\n    font-family: ${fontFamilies.default};\n    font-weight: ${fontWeights.regular};\n    font-size: inherit;\n    line-height: inherit;\n\n    /* Unsets browser defaults */\n    margin-block-start: 0;\n    margin-block-end: 0;\n\n    /* Variable Styles */\n    color: ${color[theme].text.error.default};\n    font-size: ${fontSize}px;\n    line-height: ${lineHeight}px;\n  `;\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { disclaimerStyles, disclaimerTextColor } from './Disclaimer.styles';\nimport { DisclaimerProps } from './Disclaimer.types';\n\nexport function Disclaimer({\n  darkMode: darkModeProp,\n  children,\n  className,\n  ...rest\n}: DisclaimerProps) {\n  const { theme } = useDarkMode(darkModeProp);\n\n  return (\n    <small\n      {...rest}\n      className={cx(\n        baseTypographyStyles,\n        disclaimerStyles,\n        disclaimerTextColor[theme],\n        className,\n      )}\n    >\n      {children}\n    </small>\n  );\n}\n\nDisclaimer.displayName = 'Disclaimer';\n\nexport default Disclaimer;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h1Styles = css`\n  font-weight: ${fontWeights.regular};\n  font-size: 48px;\n  line-height: 64px;\n  font-family: ${fontFamilies.serif};\n`;\n\nexport const h1Color: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.green.dark2};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h2Styles = css`\n  font-size: 32px;\n  line-height: 40px;\n  font-weight: ${fontWeights.regular};\n  font-family: ${fontFamilies.serif};\n`;\n\nexport const h2Color: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.green.dark2};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport { getErrorMessageStyle } from './Error.styles';\nimport { BaseErrorProps } from './Error.types';\n\nconst Error = Polymorphic<BaseErrorProps>(\n  ({\n    as = 'p' as PolymorphicAs,\n    darkMode: darkModeProp,\n    children,\n    className,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize();\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        {...rest}\n        className={cx(getErrorMessageStyle({ theme, baseFontSize }), className)}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nexport default Error;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { h1Color, h1Styles } from './H1.styles';\nimport { BaseH1Props } from './H1.types';\n\nconst H1 = Polymorphic<BaseH1Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h1' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h1Styles,\n          h1Color[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH1.displayName = 'H1';\n\nexport default H1;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h3Styles = css`\n  font-size: 24px;\n  line-height: 32px;\n  font-weight: ${fontWeights.medium};\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { h2Color, h2Styles } from './H2.styles';\nimport { BaseH2Props } from './H2.types';\n\nconst H2 = Polymorphic<BaseH2Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h2' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h2Styles,\n          h2Color[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH2.displayName = 'H2';\n\nexport default H2;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { color, focusRing, fontFamilies } from '@leafygreen-ui/tokens';\n\nexport const anchorClassName = createUniqueClassName();\n\nexport const code = css`\n  display: inline;\n  transition: all 0.15s ease-in-out;\n  border-radius: 3px;\n  font-family: ${fontFamilies.code};\n  line-height: 20px;\n\n  .${anchorClassName}:hover > & {\n    text-decoration: none;\n  }\n`;\n\nexport const codeModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${color.light.background.secondary.default};\n    border: 1px solid ${color.light.border.secondary.default};\n    color: ${palette.gray.dark3};\n\n    .${anchorClassName}:hover > & {\n      box-shadow: 0 0 0 3px ${palette.gray.light2};\n      border: 1px solid ${palette.gray.light1};\n    }\n  `,\n\n  [Theme.Dark]: css`\n    background-color: ${color.dark.background.secondary.default};\n    border: 1px solid ${palette.gray.dark2};\n    color: ${palette.gray.light1};\n\n    .${anchorClassName}:hover > & {\n      box-shadow: 0 0 0 3px ${palette.gray.dark2};\n      border: 1px solid ${palette.gray.dark1};\n    }\n  `,\n};\n\nexport const codeFocusModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    .${anchorClassName}:focus-visible > & {\n      box-shadow: ${focusRing[Theme.Light].default};\n      border: 1px solid ${palette.blue.base};\n    }\n  `,\n\n  [Theme.Dark]: css`\n    .${anchorClassName}:focus-visible > & {\n      box-shadow: ${focusRing[Theme.Dark].default};\n      border: 1px solid ${palette.blue.base};\n    }\n  `,\n};\n\nexport const codeLinkStyleModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.blue.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.blue.light1};\n  `,\n};\n\nexport const codeLinkWrapper = css`\n  text-decoration: none;\n  margin: 0;\n  padding: 0;\n  line-height: 20px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const nowrap = css`\n  white-space: nowrap;\n`;\n\nexport const normal = css`\n  white-space: normal;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { h3Styles } from './H3.styles';\nimport { BaseH3Props } from './H3.types';\n\nconst H3 = Polymorphic<BaseH3Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h3' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h3Styles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH3.displayName = 'H3';\n\nexport default H3;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { color, fontFamilies } from '@leafygreen-ui/tokens';\n\nexport const inlineKeyCodeStyles = css`\n  font-family: ${fontFamilies.code};\n  border: 1px solid;\n  border-radius: 3px;\n  padding-left: 5px;\n  padding-right: 5px;\n`;\n\nexport const inlineKeyCodeColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${color.light.text.primary.default};\n    border-color: ${palette.gray.dark3};\n    background-color: ${palette.white};\n  `,\n  [Theme.Dark]: css`\n    color: ${color.dark.text.primary.default};\n    border-color: ${palette.gray.base};\n    background-color: ${palette.gray.dark3};\n  `,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\nimport { codeTypeScaleStyles } from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  anchorClassName,\n  code,\n  codeFocusModes,\n  codeLinkStyleModes,\n  codeLinkWrapper,\n  codeModes,\n  normal,\n  nowrap,\n} from './InlineCode.styles';\nimport { BaseInlineCodeProps } from './InlineCode.types';\n\nconst InlineCode = InferredPolymorphic<BaseInlineCodeProps, 'code'>(\n  (\n    {\n      children,\n      className,\n      darkMode: darkModeProp,\n      baseFontSize: baseFontSizeOverride,\n      as,\n      ...rest\n    },\n    forwardedRef,\n  ) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = useInferredPolymorphic(as, rest, 'code');\n\n    const whiteSpace =\n      ((typeof children === 'string' && children.match(/./gu)?.length) ?? 0) <=\n      30\n        ? nowrap\n        : normal;\n    const needsWrapper = Component !== 'code';\n\n    const renderedInlineCode = (\n      <code\n        ref={forwardedRef}\n        className={cx(\n          codeTypeScaleStyles[baseFontSize],\n          code,\n          codeModes[theme],\n          codeFocusModes[theme],\n          whiteSpace,\n          {\n            [codeLinkStyleModes[theme]]: needsWrapper,\n          },\n          className,\n        )}\n      >\n        {children}\n      </code>\n    );\n\n    if (needsWrapper) {\n      return (\n        <Component\n          className={cx(anchorClassName, codeLinkWrapper, className)}\n          {...rest}\n        >\n          {renderedInlineCode}\n        </Component>\n      );\n    }\n\n    return React.cloneElement(renderedInlineCode, rest);\n  },\n);\n\nInlineCode.displayName = 'InlineCode';\nInlineCode.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  darkMode: PropTypes.bool,\n  baseFontSize: PropTypes.oneOf(Object.values(BaseFontSize)),\n};\n\nexport default InlineCode;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport {\n  BaseFontSize,\n  color,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const getLabelStyles = (theme: Theme) => {\n  return css`\n    color: ${color[theme].text.primary.default};\n\n    font-family: ${fontFamilies.default};\n    font-weight: ${fontWeights.bold};\n  `;\n};\n\nexport const getDisabledLabelColorStyle = (theme: Theme) => {\n  return css`\n    color: ${color[theme].text.disabled.default};\n  `;\n};\n\nexport const labelTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: 20px; // Hardcoding because it does not match body2 lineHeight\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { codeTypeScaleStyles } from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  inlineKeyCodeColor,\n  inlineKeyCodeStyles,\n} from './InlineKeyCode.styles';\nimport { InlineKeyCodeProps } from './InlineKeyCode.types';\n\nfunction InlineKeyCode({\n  baseFontSize: baseFontSizeOverride,\n  darkMode: darkModeProp,\n  children,\n  className,\n  ...rest\n}: InlineKeyCodeProps) {\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n  const { theme } = useDarkMode(darkModeProp);\n\n  return (\n    <code\n      className={cx(\n        inlineKeyCodeStyles,\n        inlineKeyCodeColor[theme],\n        codeTypeScaleStyles[baseFontSize],\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </code>\n  );\n}\n\nInlineKeyCode.displayName = 'InlineKeyCode';\n\nexport default InlineKeyCode;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  BaseFontSize,\n  fontFamilies,\n  fontWeights,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nimport { bodyTypeScaleStyles } from '../styles';\n\nexport const anchorClassName = createUniqueClassName();\n\nexport const linkStyles = css`\n  font-family: ${fontFamilies.default};\n  display: inline;\n  align-items: center;\n  text-decoration: none;\n  text-decoration-color: transparent;\n  cursor: pointer;\n  font-size: inherit;\n  line-height: inherit;\n  appearance: none;\n  background: none;\n  border: none;\n  padding: 0;\n\n  &:hover,\n  &[data-hover='true'],\n  &:focus-visible,\n  &[data-focus='true'] {\n    text-decoration: underline;\n    transition: text-decoration ${transitionDuration.default}ms ease-in-out;\n    text-underline-offset: 4px;\n    text-decoration-thickness: 2px;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const linkModeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.blue.base};\n    font-weight: ${fontWeights.regular};\n\n    &:hover,\n    &[data-hover='true'] {\n      text-decoration-color: ${palette.gray.light2};\n    }\n\n    &:focus-visible,\n    &[data-focus='true'] {\n      text-decoration-color: ${palette.blue.base};\n    }\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.blue.light1};\n    font-weight: ${fontWeights.bold};\n\n    &:hover,\n    &[data-hover='true'] {\n      text-decoration-color: ${palette.gray.dark2};\n    }\n\n    &:focus-visible,\n    &[data-focus='true'] {\n      text-decoration-color: ${palette.blue.base};\n    }\n  `,\n};\n\nexport const linkScaleStyles = (baseFontSize?: BaseFontSize) => {\n  if (baseFontSize) {\n    return bodyTypeScaleStyles[baseFontSize];\n  }\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { LGIDS_TYPOGRAPHY } from '../constants';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  getDisabledLabelColorStyle,\n  getLabelStyles,\n  labelTypeScaleStyles,\n} from './Label.styles';\nimport { BaseLabelProps } from './Label.types';\n\nexport const Label = Polymorphic<BaseLabelProps>(\n  ({\n    baseFontSize: baseFontSizeOverride,\n    darkMode: darkModeProp,\n    className,\n    children,\n    disabled = false,\n    as = 'label' as PolymorphicAs,\n    'data-lgid': dataLgId = LGIDS_TYPOGRAPHY.label,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        data-lgid={dataLgId}\n        className={cx(\n          getLabelStyles(theme),\n          labelTypeScaleStyles[baseFontSize],\n          { [getDisabledLabelColorStyle(theme)]: disabled },\n          className,\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nLabel.displayName = 'Label';\n\nexport default Label;\n","import { css } from '@leafygreen-ui/emotion';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const backLinkBaseStyles = css`\n  gap: ${spacing[100]}px;\n  display: inline-flex;\n`;\n","import { css } from '@leafygreen-ui/emotion';\n\nimport { anchorClassName } from '../shared.styles';\n\nexport const arrowRightIconPersist = css`\n  transform: translate3d(3px, 0, 0);\n  top: 1px;\n  position: relative;\n`;\n\nexport const arrowRightIconHover = css`\n  opacity: 0;\n  transform: translate3d(-3px, 0, 0);\n  transition: 100ms ease-in;\n  transition-property: opacity, transform;\n  top: 1px;\n  position: relative;\n\n  .${anchorClassName}:hover &, .${anchorClassName}[data-hover='true'] & {\n    opacity: 1;\n    transform: translate3d(3px, 0, 0);\n  }\n`;\n\nexport const openInNewTabStyles = css`\n  position: relative;\n  bottom: 2px;\n  left: -1px;\n  height: 12px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const overlineStyles = css`\n  font-size: 12px;\n  font-weight: ${fontWeights.bold};\n  text-transform: uppercase;\n  line-height: 20px;\n  letter-spacing: 0.4px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const subtitleStyles = css`\n  font-size: 18px;\n  line-height: 24px;\n  font-weight: ${fontWeights.bold};\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport ArrowLeftIcon from '@leafygreen-ui/icon/dist/ArrowLeft';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../../utils/useUpdatedBaseFontSize';\nimport {\n  anchorClassName,\n  linkModeStyles,\n  linkScaleStyles,\n  linkStyles,\n} from '../shared.styles';\n\nimport { backLinkBaseStyles } from './BackLink.styles';\nimport { BaseBackLinkProps } from './BackLink.types';\n\nconst BackLink = InferredPolymorphic<BaseBackLinkProps, 'span'>(\n  (\n    {\n      children,\n      className,\n      baseFontSize: baseFontSizeOverride,\n      darkMode: darkModeProp,\n      as,\n      ...rest\n    },\n    fwdRef,\n  ) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = useInferredPolymorphic(as, rest, 'span');\n\n    return (\n      <Component\n        className={cx(\n          anchorClassName,\n          linkStyles,\n          linkScaleStyles(baseFontSize),\n          linkModeStyles[theme],\n          backLinkBaseStyles,\n          className,\n        )}\n        ref={fwdRef}\n        {...rest}\n      >\n        <ArrowLeftIcon role=\"presentation\" />\n\n        {children}\n      </Component>\n    );\n  },\n);\n\nexport default BackLink;\n","import {\n  InferredPolymorphicProps,\n  PolymorphicAs,\n} from '@leafygreen-ui/polymorphic';\n\nimport { ResponsiveTypographyProps } from '../../types';\n\nconst ArrowAppearance = {\n  Hover: 'hover',\n  Persist: 'persist',\n  None: 'none',\n} as const;\n\ntype ArrowAppearance = (typeof ArrowAppearance)[keyof typeof ArrowAppearance];\n\nexport { ArrowAppearance };\n\nexport interface BaseLinkProps extends ResponsiveTypographyProps {\n  /**\n   * Displays a right arrow adjacent to the anchor tag. When set to `persist` the arrow will always be present. When set to `hover`, the arrow will only appear when hovering over the arrow.\n   */\n  arrowAppearance?: ArrowAppearance;\n  /**\n   * Hides the external icon when the current host name is different from the host of the destination URL\n   */\n  hideExternalIcon?: boolean;\n}\n\n// For external consumption only\nexport type LinkProps<T extends PolymorphicAs = PolymorphicAs> =\n  InferredPolymorphicProps<T, BaseLinkProps>;\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport ArrowRightIcon from '@leafygreen-ui/icon/dist/ArrowRight';\nimport OpenNewTabIcon from '@leafygreen-ui/icon/dist/OpenNewTab';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  hasAnchorProps,\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../../utils/useUpdatedBaseFontSize';\nimport {\n  anchorClassName,\n  linkModeStyles,\n  linkScaleStyles,\n  linkStyles,\n} from '../shared.styles';\n\nimport {\n  arrowRightIconHover,\n  arrowRightIconPersist,\n  openInNewTabStyles,\n} from './Link.styles';\nimport { ArrowAppearance, BaseLinkProps } from './Link.types';\n\nconst Link = InferredPolymorphic<BaseLinkProps, 'span'>(\n  (\n    {\n      children,\n      className,\n      arrowAppearance = ArrowAppearance.None,\n      hideExternalIcon = false,\n      baseFontSize: baseFontSizeOverride,\n      darkMode: darkModeProp,\n      as: asProp,\n      ...props\n    },\n    fwdRef,\n  ) => {\n    const [currentHostname, setCurrentHostname] = useState('');\n    useEffect(() => {\n      setCurrentHostname(window.location.hostname);\n    }, []);\n\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component, as, rest } = useInferredPolymorphic(\n      asProp,\n      props,\n      'span',\n    );\n\n    const hrefHostname = useMemo(() => {\n      if (hasAnchorProps(as, rest)) {\n        const httpRegex = /^http(s)?:\\/\\//;\n        return httpRegex.test(rest.href)\n          ? new URL(rest.href).hostname\n          : currentHostname;\n      }\n    }, [as, rest, currentHostname]);\n\n    let icon;\n\n    const defaultAnchorProps: Pick<\n      JSX.IntrinsicElements['a'],\n      'target' | 'rel'\n    > = {\n      target: undefined,\n      rel: undefined,\n    };\n\n    if (rest.target || rest.rel) {\n      defaultAnchorProps.target = rest.target;\n      defaultAnchorProps.rel = rest.rel;\n    } else if (Component === 'a') {\n      // Sets defaults for target and rel props when Component is an anchor tag\n      if (hrefHostname === currentHostname) {\n        defaultAnchorProps.target = '_self';\n      } else {\n        // Open in new tab\n        defaultAnchorProps.target = '_blank';\n        defaultAnchorProps.rel = 'noopener noreferrer';\n      }\n    }\n\n    if (defaultAnchorProps.target === '_blank' && !hideExternalIcon) {\n      icon = (\n        <OpenNewTabIcon role=\"presentation\" className={openInNewTabStyles} />\n      );\n    } else if (arrowAppearance !== ArrowAppearance.None) {\n      icon = (\n        <ArrowRightIcon\n          role=\"presentation\"\n          size={12}\n          className={cx({\n            [arrowRightIconHover]: arrowAppearance === ArrowAppearance.Hover,\n            [arrowRightIconPersist]:\n              arrowAppearance === ArrowAppearance.Persist,\n          })}\n        />\n      );\n    }\n\n    return (\n      <Component\n        className={cx(\n          anchorClassName,\n          linkStyles,\n          linkScaleStyles(baseFontSize),\n          linkModeStyles[theme],\n          className,\n        )}\n        ref={fwdRef}\n        {...defaultAnchorProps}\n        {...rest}\n      >\n        <span>{children}</span>\n\n        {icon}\n      </Component>\n    );\n  },\n);\n\nexport default Link;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { overlineStyles } from './Overline.styles';\nimport { BaseOverlineProps } from './Overline.types';\n\nexport const Overline = Polymorphic<BaseOverlineProps>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'div' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          overlineStyles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nOverline.displayName = 'Overline';\n\nexport default Overline;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { subtitleStyles } from './Subtitle.styles';\nimport { BaseSubtitleProps } from './Subtitle.types';\n\nconst Subtitle = Polymorphic<BaseSubtitleProps>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h6' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          subtitleStyles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nSubtitle.displayName = 'Subtitle';\n\nexport default Subtitle;\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { getNodeTextContent } from '@leafygreen-ui/lib';\nimport {\n  Polymorph,\n  PolymorphicAs,\n  PolymorphicPropsWithRef,\n} from '@leafygreen-ui/polymorphic';\n\ninterface LocalProps {\n  /**\n   * The maximum future weight of the text. Determines the width of the component.\n   * @default 700\n   */\n  maxFontWeight?: React.CSSProperties['fontWeight'];\n  /**\n   * Defines the pseudo element used to force the element width\n   */\n  pseudoElement?: 'before' | 'after';\n}\n\ntype StaticWidthTextProps<T extends PolymorphicAs> = PolymorphicPropsWithRef<\n  T,\n  LocalProps\n>;\n\nconst staticWidthTextStyle = ({\n  pseudoElement,\n  maxFontWeight,\n}: Pick<StaticWidthTextProps<any>, 'pseudoElement' | 'maxFontWeight'>) => {\n  const pseudoSelector = `&:${pseudoElement}`;\n\n  return css`\n    /* Inherit relevant properties from the parent */\n    font-weight: inherit;\n    font-size: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    position: relative;\n    display: inline-flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: center;\n    text-decoration: none;\n    min-width: 0;\n    max-width: 100%;\n\n    ${pseudoSelector} {\n      content: attr(data-text);\n      height: 0;\n      font-weight: ${maxFontWeight};\n      visibility: hidden;\n      overflow: hidden;\n      user-select: none;\n      pointer-events: none;\n    }\n  `;\n};\n\nconst childWrapper = css`\n  flex: 1;\n  min-width: 0;\n  max-width: 100%;\n\n  white-space: inherit;\n  overflow: inherit;\n  text-overflow: inherit;\n`;\n\n/**\n *\n * A wrapper component to ensure that updating the font weight does not affect the width of the element,\n * and prevents layout shift should the font weight change.\n *\n * Useful for showing a bold effect on hover, focus, or active (See `Tabs`, `MenuItem`).\n *\n * Will add an ellipsis if the text would extend beyond the parent,\n * or if the bold text is significantly larger than the regular text\n * (This is rare, and will only occur with _very_ long text)\n *\n * Note: does not support wrapped text (i.e. text within a paragraph)\n *\n * @internal\n *\n */\nexport function StaticWidthText<T extends PolymorphicAs = 'span'>({\n  as,\n  children,\n  maxFontWeight = 700,\n  pseudoElement = 'after',\n  className,\n  ...rest\n}: StaticWidthTextProps<T>) {\n  // calling getNodeTextContent in case a node gets passed in without TS\n  const textContent = getNodeTextContent(children);\n  return (\n    <Polymorph\n      className={cx(\n        staticWidthTextStyle({ pseudoElement, maxFontWeight }),\n        className,\n      )}\n      as={as ?? ('span' as PolymorphicAs)}\n      data-text={textContent}\n      {...rest}\n    >\n      <span className={childWrapper}>{children}</span>\n    </Polymorph>\n  );\n}\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","baseTypographyStyles","css","_taggedTemplateLiteral","fontFamilies","default","color","light","text","primary","bodyTypeScaleStyles","_defineProperty","BaseFontSize","Body1","typeScales","body1","fontSize","lineHeight","Body2","body2","codeTypeScaleStyles","code1","code2","defaultTextColor","Theme","Light","Dark","dark","useUpdatedBaseFontSize","override","baseFontSize","useBaseFontSize","_excluded","Body","Polymorphic","_ref","baseFontSizeOverride","darkModeProp","darkMode","className","_ref$weight","weight","_ref$as","as","rest","_objectWithoutProperties","theme","useDarkMode","Component","usePolymorphic","fontWeight","fontWeightTokens","fontWeights","bold","React","createElement","_extends","cx","displayName","LGIDS_TYPOGRAPHY","label","description","getDescriptionStyle","secondary","regular","getDisabledDescriptionColorStyle","disabled","descriptionTypeScaleStyles","Description","_ref$dataLgid","dataLgId","_ref$disabled","children","disclaimerTextColor","disclaimerStyles","Disclaimer","getErrorMessageStyle","error","Error","h1Styles","serif","h1Color","palette","green","dark2","gray","light2","H1","h2Styles","h2Color","H2","_templateObject8","_templateObject9","_templateObject10","h3Styles","medium","H3","anchorClassName","createUniqueClassName","code","codeModes","background","border","dark3","light1","dark1","codeFocusModes","focusRing","blue","base","codeLinkStyleModes","codeLinkWrapper","nowrap","normal","InlineCode","InferredPolymorphic","forwardedRef","_ref2","_children$match","useInferredPolymorphic","whiteSpace","match","length","needsWrapper","renderedInlineCode","ref","cloneElement","propTypes","PropTypes","node","string","bool","oneOf","Object","values","inlineKeyCodeStyles","inlineKeyCodeColor","white","InlineKeyCode","getLabelStyles","getDisabledLabelColorStyle","labelTypeScaleStyles","Label","linkStyles","transitionDuration","linkModeStyles","linkScaleStyles","backLinkBaseStyles","spacing","BackLink","fwdRef","ArrowLeftIcon","role","arrowRightIconPersist","arrowRightIconHover","openInNewTabStyles","ArrowAppearance","Link","_ref$arrowAppearance","arrowAppearance","_ref$hideExternalIcon","hideExternalIcon","asProp","props","_useState2","_slicedToArray","useState","currentHostname","setCurrentHostname","useEffect","window","location","hostname","icon","_useInferredPolymorph","hrefHostname","useMemo","hasAnchorProps","test","href","URL","defaultAnchorProps","target","undefined","rel","ArrowRightIcon","size","OpenNewTabIcon","overlineStyles","Overline","subtitleStyles","Subtitle","staticWidthTextStyle","pseudoElement","maxFontWeight","pseudoSelector","concat","childWrapper","_ref2$maxFontWeight","_ref2$pseudoElement","textContent","getNodeTextContent","Polymorph"],"mappings":"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"}