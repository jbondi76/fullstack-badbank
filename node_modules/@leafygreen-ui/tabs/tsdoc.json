[
  {
    "tags": {
      "param": "props.children Content that will appear inside of Tab panel.\nprops.disabled Boolean that determines if the Tab is disabled.\nprops.name Name that will appear in Tab List.\nprops.className Adds a className to the root element.\nprops.default If Tabs component is uncontrolled, this determines what Tab will be selected on first render.\nprops.href Destination when name is rendered as `a` tag.\nprops.to Destination when name is rendered as `Link` tag."
    },
    "description": "# Tab\n\nTab panel component\n\n```\n<Tab name='First Tab'>Tab 1</Tab>\n```",
    "methods": [],
    "displayName": "Tab",
    "props": {
      "TabProps": {
        "name": {
          "name": "name",
          "defaultValue": null,
          "description": "Content that will appear as the title in the Tab list.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Content that will appear inside of Tab panel.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "disabled": {
          "name": "disabled",
          "defaultValue": {
            "value": "false"
          },
          "description": "Boolean that determines if the Tab is disabled.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "default": {
          "name": "default",
          "defaultValue": null,
          "description": "If Tabs component is uncontrolled, this determines what Tab will be selected on first render.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "Adds a className to the root element.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "href": {
          "name": "href",
          "defaultValue": null,
          "description": "Destination when name is rendered as `a` tag.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "to": {
          "name": "to",
          "defaultValue": null,
          "description": "Destination when name is rendered as `Link` tag.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "selected": {
          "name": "selected",
          "defaultValue": null,
          "description": "Whether this tab is currently selected",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes"
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of Tabs component.\nprops.setSelected Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.\nprops.selected Index of the Tab that should appear active. If value passed, component will be controlled by consumer.\nprops.className className applied to Tabs container.\nprops.as HTML Element that wraps name in Tab List."
    },
    "description": "# Tabs\n\nTabs component\n\n```\n<Tabs selected={0} setSelected={() => execute callback when new Tab is selected}>\n<Tab name='First Tab'>Tab 1</Tab>\n<Tab name='Second Tab'>Tab 2</Tab>\n</Tabs>\n```",
    "methods": [],
    "displayName": "Tabs",
    "props": {
      "TabsProps": {
        "as": {
          "name": "as",
          "defaultValue": null,
          "description": "HTML Element that wraps title in Tab List.",
          "required": false,
          "type": {
            "name": "HTMLElement | React.Component"
          },
          "tags": {
            "type": "HTMLElement | React.Component"
          }
        },
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "determines if component will appear for Dark Mode",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Content that will appear inside of Tabs component.\nShould be comprised of at least two `<Tab />` components.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "selected": {
          "name": "selected",
          "defaultValue": null,
          "description": "Index of the Tab that should appear active. If value passed to selected prop, component will be controlled by consumer.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "inlineChildren": {
          "name": "inlineChildren",
          "defaultValue": null,
          "description": "Content that will appear inline after the `<Tab />` components. `inlineChildren` are wrapped in a flexbox container.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "setSelected": {
          "name": "setSelected",
          "defaultValue": null,
          "description": "Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.",
          "required": false,
          "type": {
            "name": "(index: number) => void"
          },
          "tags": {
            "type": "(index: number) => void"
          }
        },
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": null,
          "description": "The base font size of the title and text rendered in children.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BaseFontSize",
            "value": [
              {
                "value": "13"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {}
        },
        "aria-label": {
          "name": "aria-label",
          "defaultValue": null,
          "description": "Accessible label that describes the set of tabs",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "aria-labelledby": {
          "name": "aria-labelledby",
          "defaultValue": null,
          "description": "References id of label external to the component that describes the set of tabs",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "LgIdProps": {
        "data-lgid": {
          "name": "data-lgid",
          "defaultValue": null,
          "description": "LG test id passed to the component wrapper.",
          "required": false,
          "type": {
            "name": "`lg-${string}`"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "getTestUtils",
    "props": {
      "String": "",
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => string"
          },
          "tags": {}
        }
      }
    }
  }
]