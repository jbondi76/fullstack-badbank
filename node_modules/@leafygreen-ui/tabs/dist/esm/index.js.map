{"version":3,"file":"index.js","sources":["../../src/TabTitle/TabTitle.styles.ts","../../src/TabTitle/TabTitle.tsx","../../src/Tab/InternalTab.tsx","../../src/Tab/Tab.tsx","../../src/constants.ts","../../src/Tabs/Tabs.styles.ts","../../src/Tabs/Tabs.tsx","../../src/utils/getTestUtils/getTestUtils.ts"],"sourcesContent":["import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  BaseFontSize,\n  fontFamilies,\n  fontWeights,\n  transitionDuration,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\ninterface ListTitleMode {\n  base: string;\n  hover: string;\n  focus: string;\n  selected: string;\n  disabled: string;\n}\n\nexport const listTitleModeStyles: Record<Theme, ListTitleMode> = {\n  light: {\n    base: css`\n      color: ${palette.gray.dark1};\n    `,\n    hover: css`\n      &:hover {\n        cursor: pointer;\n        color: ${palette.gray.dark3};\n        &:after {\n          background-color: ${palette.gray.light2};\n        }\n      }\n    `,\n    focus: css`\n      &:focus-visible {\n        color: ${palette.blue.base};\n\n        &:after {\n          background-color: ${palette.blue.light1};\n        }\n      }\n    `,\n    selected: css`\n      &,\n      &:hover {\n        color: ${palette.green.dark2};\n        font-weight: ${fontWeights.bold};\n\n        &:after {\n          transform: scaleX(1);\n          background-color: ${palette.green.dark1};\n        }\n      }\n    `,\n    disabled: css`\n      cursor: not-allowed;\n      color: ${palette.gray.light1};\n    `,\n  },\n\n  dark: {\n    base: css`\n      color: ${palette.gray.light1};\n    `,\n    hover: css`\n      &:hover {\n        cursor: pointer;\n        color: ${palette.white};\n\n        &:after {\n          background-color: ${palette.gray.dark2};\n        }\n      }\n    `,\n    focus: css`\n      &:focus-visible {\n        color: ${palette.blue.light1};\n\n        &:after {\n          background-color: ${palette.blue.light1};\n        }\n      }\n    `,\n    selected: css`\n      &,\n      &:hover {\n        color: ${palette.gray.light2};\n        font-weight: ${fontWeights.bold};\n\n        &:after {\n          transform: scaleX(1);\n          background-color: ${palette.green.dark1};\n        }\n      }\n    `,\n    disabled: css`\n      cursor: not-allowed;\n      color: ${palette.gray.dark2};\n    `,\n  },\n};\n\nexport const listTitleFontSize: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: ${typeScales.body2.lineHeight}px;\n  `,\n};\n\nexport const listTitleStyles = css`\n  font-family: ${fontFamilies.default};\n  font-weight: ${fontWeights.medium};\n  position: relative;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  max-width: 300px;\n  padding: 12px 16px;\n  background-color: transparent;\n  border: 0px;\n  margin: 0;\n  text-decoration: none;\n  transition: ${transitionDuration.default}ms color ease-in-out;\n\n  &:focus:not(:disabled) {\n    outline: none;\n    font-weight: ${fontWeights.bold};\n  }\n\n  // We create a pseudo element that's the width of the bolded text\n  // This way there's no layout shift on hover when the text is bolded.\n  &:before {\n    content: attr(data-text);\n    height: 0;\n    font-weight: ${fontWeights.bold};\n    visibility: hidden;\n    overflow: hidden;\n    user-select: none;\n    pointer-events: none;\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: 4px;\n    border-radius: 4px 4px 0 0;\n    transition: all ${transitionDuration.default}ms ease-in-out;\n    background-color: transparent;\n    transform: scaleX(0.8);\n  }\n\n  &:hover:after {\n    transform: scaleX(0.95);\n  }\n\n  &:active:after {\n    &:after {\n      transform: scaleX(1);\n    }\n  }\n`;\n\nexport const listTitleChildrenStyles = css`\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  // Cannot use flexbox here to center children because it breaks text-overflow: ellipsis\n  > svg {\n    vertical-align: text-bottom;\n    margin-right: 4px;\n  }\n`;\n","import React, { RefObject, useEffect, useRef } from 'react';\n\nimport Box, { ExtendableBox } from '@leafygreen-ui/box';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { getNodeTextContent, Theme } from '@leafygreen-ui/lib';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport { useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport {\n  listTitleChildrenStyles,\n  listTitleFontSize,\n  listTitleModeStyles,\n  listTitleStyles,\n} from './TabTitle.styles';\nimport { BaseTabTitleProps } from './TabTitle.types';\n\nconst TabTitle: ExtendableBox<BaseTabTitleProps, 'button'> = ({\n  selected = false,\n  disabled = false,\n  children,\n  className,\n  darkMode,\n  parentRef,\n  ...rest\n}: BaseTabTitleProps) => {\n  const titleRef = useRef<HTMLAnchorElement | HTMLButtonElement>(null);\n  const baseFontSize: BaseFontSize = useUpdatedBaseFontSize();\n\n  const theme = darkMode ? Theme.Dark : Theme.Light;\n\n  // Checks to see if the current activeElement is a part of the same tab set\n  // as the current TabTitle. If so, and the current TabTitle is not disabled\n  // and is selected, we manually move focus to that TabTitle.\n  useEffect(() => {\n    const tabsList = Array.from(parentRef?.children ?? []);\n    const activeEl = document.activeElement;\n\n    if (\n      activeEl &&\n      tabsList.indexOf(activeEl) !== -1 &&\n      !disabled &&\n      selected &&\n      titleRef.current\n    ) {\n      titleRef.current.focus();\n    }\n  }, [parentRef, disabled, selected, titleRef]);\n\n  const nodeText = getNodeTextContent(rest.name);\n\n  const sharedTabProps = {\n    ...rest,\n    className: cx(\n      listTitleFontSize[baseFontSize],\n      listTitleStyles,\n      listTitleModeStyles[theme].base,\n      {\n        [listTitleModeStyles[theme].selected]: selected,\n        [listTitleModeStyles[theme].hover]: !disabled && !selected,\n        [listTitleModeStyles[theme].disabled]: disabled,\n      },\n      listTitleModeStyles[theme].focus,\n      className,\n    ),\n    role: 'tab',\n    tabIndex: selected ? 0 : -1,\n    ['aria-selected']: selected,\n    name: nodeText,\n    ['data-text']: nodeText,\n    disabled,\n  } as const;\n\n  if (typeof rest.href === 'string') {\n    return (\n      <Box\n        as=\"a\"\n        ref={titleRef as RefObject<HTMLAnchorElement>}\n        {...sharedTabProps}\n      >\n        <div className={listTitleChildrenStyles}>{children}</div>\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      as=\"button\"\n      ref={titleRef as RefObject<HTMLButtonElement>}\n      {...sharedTabProps}\n    >\n      <div className={listTitleChildrenStyles}>{children}</div>\n    </Box>\n  );\n};\n\nTabTitle.displayName = 'TabTitle';\n\nexport default TabTitle;\n","import React, { useMemo } from 'react';\n\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport Portal from '@leafygreen-ui/portal';\n\nimport TabTitle from '../TabTitle';\n\nimport { InternalTabProps } from './Tab.types';\n\nconst InternalTab = React.memo(\n  ({ child, selected, tabRef, panelRef, ...tabProps }: InternalTabProps) => {\n    const { id: idProp, name } = child.props;\n\n    const panelId = useIdAllocator({ prefix: 'tab-panel' });\n    const tabId = useIdAllocator({ prefix: 'tab', id: idProp });\n\n    const tab = (\n      <TabTitle\n        {...tabProps}\n        selected={selected}\n        id={tabId}\n        aria-controls={panelId}\n      >\n        {name}\n      </TabTitle>\n    );\n\n    const panel = useMemo(\n      () =>\n        React.cloneElement(child, {\n          id: panelId,\n          selected: selected,\n          ['aria-labelledby']: tabId,\n        }),\n      [child, panelId, selected, tabId],\n    );\n\n    return (\n      <>\n        <Portal container={tabRef}>{tab}</Portal>\n        <Portal container={panelRef}>{panel}</Portal>\n      </>\n    );\n  },\n);\n\nInternalTab.displayName = 'InternalTab';\n\nexport default InternalTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TabProps } from './Tab.types';\n\n/**\n * # Tab\n *\n * Tab panel component\n *\n * ```\n  <Tab name='First Tab'>Tab 1</Tab>\n```\n * @param props.children Content that will appear inside of Tab panel.\n * @param props.disabled Boolean that determines if the Tab is disabled.\n * @param props.name Name that will appear in Tab List.\n * @param props.className Adds a className to the root element.\n * @param props.default If Tabs component is uncontrolled, this determines what Tab will be selected on first render.\n * @param props.href Destination when name is rendered as `a` tag.\n * @param props.to Destination when name is rendered as `Link` tag.\n *\n */\nfunction Tab({ selected, children, ...rest }: TabProps) {\n  // default and name are not an HTML properties\n  // onClick applies to TabTitle component, not Tab component\n  delete rest.default, delete rest.name, delete rest.onClick, delete rest.href;\n\n  return (\n    <div {...rest} role=\"tabpanel\">\n      {selected ? children : null}\n    </div>\n  );\n}\n\nTab.displayName = 'Tab';\n\nTab.propTypes = {\n  selected: PropTypes.bool,\n  children: PropTypes.node,\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  content: PropTypes.node,\n  disabled: PropTypes.bool,\n  ariaControl: PropTypes.string,\n};\n\nexport default Tab;\n","const LGID_ROOT = 'lg-tabs';\n\nexport const LGIDS_TABS = {\n  root: LGID_ROOT,\n  tabList: `${LGID_ROOT}-tab_list`,\n  tabPanels: `${LGID_ROOT}-tab_panels`,\n} as const;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\n// Using a background allows the \"border\" to appear underneath the individual tab color\nexport const modeColors = {\n  [Theme.Light]: {\n    underlineColor: css`\n      background: linear-gradient(\n        0deg,\n        ${palette.gray.light2} 1px,\n        rgb(255 255 255 / 0%) 1px\n      );\n    `,\n  },\n\n  [Theme.Dark]: {\n    underlineColor: css`\n      background: linear-gradient(\n        0deg,\n        ${palette.gray.dark2} 1px,\n        rgb(255 255 255 / 0%) 1px\n      );\n    `,\n  },\n};\n\nexport const tabContainerStyle = css`\n  display: flex;\n  align-items: stretch;\n  justify-content: space-between;\n`;\n\nexport const inlineChildrenContainerStyle = css`\n  display: flex;\n`;\n\nexport const inlineChildrenWrapperStyle = css`\n  display: flex;\n  align-items: center;\n`;\n\nexport const listStyle = css`\n  list-style: none;\n  padding: 0;\n  display: flex;\n  width: 100%;\n  overflow-x: auto;\n\n  /* Remove scrollbar */\n\n  /* Chrome, Edge, Safari and Opera */\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  -ms-overflow-style: none; /* IE */\n  scrollbar-width: none; /* Firefox */\n`;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { validateAriaLabelProps } from '@leafygreen-ui/a11y';\nimport { cx } from '@leafygreen-ui/emotion';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { isComponentType, keyMap } from '@leafygreen-ui/lib';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport { useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport { LGIDS_TABS } from '../constants';\nimport { InternalTab } from '../Tab';\n\nimport {\n  inlineChildrenContainerStyle,\n  inlineChildrenWrapperStyle,\n  listStyle,\n  modeColors,\n  tabContainerStyle,\n} from './Tabs.styles';\nimport { AccessibleTabsProps } from './Tabs.types';\n\n/**\n * # Tabs\n *\n * Tabs component\n *\n * ```\n<Tabs selected={0} setSelected={() => execute callback when new Tab is selected}>\n  <Tab name='First Tab'>Tab 1</Tab>\n  <Tab name='Second Tab'>Tab 2</Tab>\n</Tabs>\n```\n * @param props.children Content to appear inside of Tabs component.\n * @param props.setSelected Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.\n * @param props.selected Index of the Tab that should appear active. If value passed, component will be controlled by consumer.\n * @param props.className className applied to Tabs container.\n * @param props.as HTML Element that wraps name in Tab List.\n */\nfunction Tabs(props: AccessibleTabsProps) {\n  validateAriaLabelProps(props, 'Tabs');\n\n  const {\n    children,\n    inlineChildren,\n    className,\n    as = 'button',\n    baseFontSize: baseFontSizeProp,\n    setSelected: setControlledSelected,\n    selected: controlledSelected,\n    darkMode: darkModeProp,\n    'data-lgid': dataLgId = LGIDS_TABS.root,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    ...rest\n  } = props;\n  const baseFontSize: BaseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n  const { theme, darkMode } = useDarkMode(darkModeProp);\n\n  const [tabNode, setTabNode] = useState<HTMLDivElement | null>(null);\n  const [panelNode, setPanelNode] = useState<HTMLDivElement | null>(null);\n\n  const accessibilityProps = {\n    ['aria-label']: ariaLabel,\n    ['aria-labelledby']: ariaLabelledby,\n  };\n\n  const childrenArray = useMemo(\n    () => React.Children.toArray(children) as Array<React.ReactElement>,\n    [children],\n  );\n\n  const isControlled = typeof controlledSelected === 'number';\n  const [uncontrolledSelected, setUncontrolledSelected] = useState(\n    childrenArray.findIndex(child => child.props.default || 0),\n  );\n  const selected = isControlled ? controlledSelected : uncontrolledSelected;\n  const setSelected = isControlled\n    ? setControlledSelected\n    : setUncontrolledSelected;\n\n  const handleChange = useCallback(\n    (e: React.SyntheticEvent<Element, MouseEvent>, index: number) => {\n      setSelected?.(index);\n    },\n    [setSelected],\n  );\n\n  const getEnabledIndexes: () => [Array<number>, number] = useCallback(() => {\n    const enabledIndexes = childrenArray\n      .filter(child => !child.props.disabled)\n      .map(child => childrenArray.indexOf(child));\n\n    return [enabledIndexes, enabledIndexes.indexOf(selected!)];\n  }, [childrenArray, selected]);\n\n  const handleArrowKeyPress = useCallback(\n    (e: KeyboardEvent) => {\n      if (!(e.metaKey || e.ctrlKey)) {\n        if (e.key === keyMap.ArrowRight) {\n          const [enabledIndexes, current] = getEnabledIndexes();\n          setSelected?.(enabledIndexes[(current + 1) % enabledIndexes.length]);\n        } else if (e.key === keyMap.ArrowLeft) {\n          const [enabledIndexes, current] = getEnabledIndexes();\n          setSelected?.(\n            enabledIndexes[\n              (current - 1 + enabledIndexes.length) % enabledIndexes.length\n            ],\n          );\n        }\n      }\n    },\n    [getEnabledIndexes, setSelected],\n  );\n\n  const renderedTabs = React.Children.map(children, (child, index) => {\n    if (!isComponentType(child, 'Tab')) {\n      return child;\n    }\n\n    const isTabSelected = index === selected;\n    const { disabled, onClick, onKeyDown, className, ...rest } = child.props;\n\n    const tabProps = {\n      as,\n      disabled,\n      darkMode,\n      parentRef: tabNode,\n      className,\n      onKeyDown: (event: KeyboardEvent) => {\n        onKeyDown?.(event);\n        handleArrowKeyPress(event);\n      },\n      onClick: !disabled\n        ? (event: React.MouseEvent) => {\n            onClick?.(event);\n            handleChange(event, index);\n          }\n        : undefined,\n      ...rest,\n    };\n\n    return (\n      // Since the <Tab /> children contain both the tab title and content,\n      // and since we want these elements to be in different places in the DOM\n      // we use a Portal in InternalTab to place the conten in the correct spot\n      <InternalTab\n        child={child}\n        selected={isTabSelected}\n        tabRef={tabNode}\n        panelRef={panelNode}\n        {...tabProps}\n      />\n    );\n  });\n\n  return (\n    <LeafyGreenProvider baseFontSize={baseFontSize === 16 ? 16 : 14}>\n      <div {...rest} className={className} data-lgid={dataLgId}>\n        {/* render the portaled contents */}\n        {renderedTabs}\n\n        <div className={tabContainerStyle}>\n          {/* renderedTabs portals the tab title into this element */}\n          <div\n            className={cx(listStyle, modeColors[theme].underlineColor)}\n            data-lgid={LGIDS_TABS.tabList}\n            role=\"tablist\"\n            ref={setTabNode}\n            aria-orientation=\"horizontal\"\n            {...accessibilityProps}\n          />\n          <div className={inlineChildrenContainerStyle}>\n            <div className={inlineChildrenWrapperStyle}>{inlineChildren}</div>\n          </div>\n        </div>\n\n        {/* renderedTabs portals the contents into this element */}\n        <div data-lgid={LGIDS_TABS.tabPanels} ref={setPanelNode} />\n      </div>\n    </LeafyGreenProvider>\n  );\n}\n\nTabs.displayName = 'Tabs';\n\nTabs.propTypes = {\n  children: PropTypes.node,\n  setSelected: PropTypes.func,\n  selected: PropTypes.number,\n  className: PropTypes.string,\n  as: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    PropTypes.elementType,\n    PropTypes.element,\n  ]),\n};\n\nexport default Tabs;\n","import { getByLgId, queryBySelector } from '@lg-tools/test-harnesses';\n\nimport { LGIDS_TABS } from '../../constants';\n\nimport { TestUtilsReturnType } from './getTestUtils.types';\n\nexport const getTestUtils = (\n  lgId: string = LGIDS_TABS.root,\n): TestUtilsReturnType => {\n  /**\n   * Queries the DOM for the element using the `data-lgid` data attribute.\n   * Will throw if no element is found.\n   */\n  const element = getByLgId!(lgId);\n\n  /**\n   * Queries the `element` for the tab list element. Will throw if no element is found.\n   *\n   * Then, finds and returns all elements with role=tab. Will throw if no tabs are found.\n   */\n  const getAllTabsInTabList = (): Array<HTMLElement> => {\n    const tabList = queryBySelector<HTMLElement>(\n      element,\n      `[data-lgid=${LGIDS_TABS.tabList}]`,\n    );\n\n    if (!tabList) {\n      throw new Error('Unable to find tab list');\n    }\n\n    const allTabs = tabList.querySelectorAll<HTMLElement>('[role=\"tab\"]');\n\n    if (allTabs.length === 0) {\n      throw new Error('Unable to find any tabs in tab list');\n    }\n\n    return Array.from(allTabs);\n  };\n\n  /**\n   * Gets all tabs in tab list and queries for a tab with matching name\n   * Returns utils to read tab, to check if tab is selected, and to check if tab is disabled\n   */\n  const getTabUtilsByName = (name: string) => {\n    const allTabs = getAllTabsInTabList();\n\n    const foundTab = allTabs.find(tab => tab.textContent === name);\n\n    if (!foundTab) return null;\n\n    return {\n      getTab: () => foundTab,\n      isSelected: () => foundTab.getAttribute('aria-selected') === 'true',\n      isDisabled: () => foundTab.hasAttribute('disabled'),\n    };\n  };\n\n  /**\n   * Queries the `element` for the selected panel. Returns null if selected panel is not found.\n   */\n  const getSelectedPanel = () => {\n    return queryBySelector<HTMLElement>(\n      element,\n      '[role=\"tabpanel\"]:not(:empty)',\n    );\n  };\n\n  return {\n    getAllTabsInTabList: () => getAllTabsInTabList(),\n    getTabUtilsByName: (name: string) => getTabUtilsByName(name),\n    getSelectedPanel: () => getSelectedPanel(),\n  };\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","listTitleModeStyles","light","base","css","_taggedTemplateLiteral","palette","gray","dark1","hover","dark3","light2","focus","blue","light1","selected","green","dark2","fontWeights","bold","disabled","dark","white","listTitleFontSize","_defineProperty","BaseFontSize","Body1","typeScales","body1","fontSize","lineHeight","Body2","body2","listTitleStyles","fontFamilies","default","medium","transitionDuration","listTitleChildrenStyles","_excluded","TabTitle","_ref","_ref$selected","_ref$disabled","children","className","darkMode","parentRef","rest","_objectWithoutProperties","titleRef","useRef","baseFontSize","useUpdatedBaseFontSize","theme","Theme","Dark","Light","useEffect","_parentRef$children","tabsList","Array","from","activeEl","document","activeElement","indexOf","current","nodeText","getNodeTextContent","name","sharedTabProps","_objectSpread","cx","role","tabIndex","href","React","createElement","Box","_extends","as","ref","displayName","InternalTab","memo","child","tabRef","panelRef","tabProps","_child$props","props","idProp","id","panelId","useIdAllocator","prefix","tabId","tab","panel","useMemo","cloneElement","Fragment","Portal","container","Tab","onClick","propTypes","PropTypes","bool","node","oneOfType","string","content","ariaControl","LGID_ROOT","LGIDS_TABS","root","tabList","concat","tabPanels","modeColors","underlineColor","tabContainerStyle","inlineChildrenContainerStyle","inlineChildrenWrapperStyle","listStyle","_excluded2","Tabs","validateAriaLabelProps","inlineChildren","_props$as","baseFontSizeProp","setControlledSelected","setSelected","controlledSelected","darkModeProp","_props$dataLgid","dataLgId","ariaLabelledby","ariaLabel","_useDarkMode","useDarkMode","_useState2","_slicedToArray","useState","tabNode","setTabNode","_useState4","panelNode","setPanelNode","accessibilityProps","childrenArray","Children","toArray","isControlled","_useState6","findIndex","uncontrolledSelected","setUncontrolledSelected","handleChange","useCallback","e","index","getEnabledIndexes","enabledIndexes","filter","map","handleArrowKeyPress","metaKey","ctrlKey","key","keyMap","ArrowRight","_getEnabledIndexes2","length","ArrowLeft","_getEnabledIndexes4","_enabledIndexes","_current","renderedTabs","isComponentType","isTabSelected","_onKeyDown","onKeyDown","event","undefined","LeafyGreenProvider","func","number","elementType","element","getTestUtils","getByLgId","arguments","_getAllTabsInTabList","queryBySelector","Error","allTabs","querySelectorAll","getAllTabsInTabList","getTabUtilsByName","foundTab","find","textContent","getTab","isSelected","getAttribute","isDisabled","hasAttribute","_getTabUtilsByName","getSelectedPanel"],"mappings":"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"}