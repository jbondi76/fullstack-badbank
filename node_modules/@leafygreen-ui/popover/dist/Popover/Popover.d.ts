import React from 'react';
import { Align, Justify } from '../Popover.types';
export declare const contentClassName: string;
/**
 *
 * React Component that handles positioning of content relative to another element.
 *
 * ```
 * <button>
 *  <Popover active={true}>Hello world!</Popover>
 * </button>
 * ```
 * @param props.active Boolean to describe whether or not Popover is active.
 * @param props.spacing The spacing (in pixels) between the reference element, and the popover.
 * @param props.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.
 * @param props.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.
 * @param props.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).
 * @param props.children Content to appear inside of Popover container.
 * @param props.className Classname applied to Popover container.
 * @param props.popoverZIndex Number that controls the z-index of the popover element directly.
 * @param props.refEl Reference element that Popover component should be positioned against.
 * @param props.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.
 * @param props.portalClassName Classname applied to root element of the portal.
 * @param props.portalContainer HTML element that the popover is portaled within.
 * @param props.portalRef A ref for the Portal element.
 * @param props.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers.
 */
export declare const Popover: React.ForwardRefExoticComponent<(Omit<Omit<import("@leafygreen-ui/lib").HTMLElementProps<"div", never>, "children"> & {
    children: React.ReactNode | ((Options: import("../Popover.types").ChildrenFunctionParameters) => React.ReactNode);
    active?: boolean | undefined;
    className?: string | undefined;
    contentClassName?: string | undefined;
    align?: Align | undefined;
    justify?: Justify | undefined;
    refEl?: React.RefObject<HTMLElement> | undefined;
    spacing?: number | undefined;
    adjustOnMutation?: boolean | undefined;
    onClick?: React.MouseEventHandler<Element> | undefined;
    popoverZIndex?: number | undefined;
} & {
    usePortal?: true | undefined;
    portalClassName?: string | undefined;
    portalContainer?: HTMLElement | null | undefined;
    portalRef?: React.MutableRefObject<HTMLElement | null> | undefined;
    scrollContainer?: HTMLElement | null | undefined;
} & {
    onEnter?: ((isAppearing: boolean) => void) | undefined;
    onEntering?: ((isAppearing: boolean) => void) | undefined;
    onEntered?: ((isAppearing: boolean) => void) | undefined;
    onExit?: (() => void) | undefined;
    onExiting?: (() => void) | undefined;
    onExited?: (() => void) | undefined;
}, "ref"> | Omit<Omit<import("@leafygreen-ui/lib").HTMLElementProps<"div", never>, "children"> & {
    children: React.ReactNode | ((Options: import("../Popover.types").ChildrenFunctionParameters) => React.ReactNode);
    active?: boolean | undefined;
    className?: string | undefined;
    contentClassName?: string | undefined;
    align?: Align | undefined;
    justify?: Justify | undefined;
    refEl?: React.RefObject<HTMLElement> | undefined;
    spacing?: number | undefined;
    adjustOnMutation?: boolean | undefined;
    onClick?: React.MouseEventHandler<Element> | undefined;
    popoverZIndex?: number | undefined;
} & {
    usePortal: false;
    portalClassName?: undefined;
    portalContainer?: null | undefined;
    portalRef?: undefined;
    scrollContainer?: null | undefined;
} & {
    onEnter?: ((isAppearing: boolean) => void) | undefined;
    onEntering?: ((isAppearing: boolean) => void) | undefined;
    onEntered?: ((isAppearing: boolean) => void) | undefined;
    onExit?: (() => void) | undefined;
    onExiting?: (() => void) | undefined;
    onExited?: (() => void) | undefined;
}, "ref">) & React.RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=Popover.d.ts.map