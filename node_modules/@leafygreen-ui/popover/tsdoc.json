[
  {
    "tags": {
      "param": "props.active Boolean to describe whether or not Popover is active.\nprops.spacing The spacing (in pixels) between the reference element, and the popover.\nprops.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.\nprops.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.\nprops.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\nprops.children Content to appear inside of Popover container.\nprops.className Classname applied to Popover container.\nprops.popoverZIndex Number that controls the z-index of the popover element directly.\nprops.refEl Reference element that Popover component should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.portalClassName Classname applied to root element of the portal.\nprops.portalContainer HTML element that the popover is portaled within.\nprops.portalRef A ref for the Portal element.\nprops.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers."
    },
    "description": "\nReact Component that handles positioning of content relative to another element.\n\n```\n<button>\n <Popover active={true}>Hello world!</Popover>\n</button>\n```",
    "methods": [],
    "displayName": "Popover",
    "props": {
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "PopoverProps": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Content that will appear inside of the popover component.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((Options: ChildrenFunctionParameters) => ReactNode)",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(Options: ChildrenFunctionParameters) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "active": {
          "name": "active",
          "defaultValue": {
            "value": false
          },
          "description": "Determines the active state of the popover component\n\ndefault: `false`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "spacing": {
          "name": "spacing",
          "defaultValue": {
            "value": 10
          },
          "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "align": {
          "name": "align",
          "defaultValue": {
            "value": "bottom"
          },
          "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Align",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"center-vertical\""
              },
              {
                "value": "\"center-horizontal\""
              }
            ]
          },
          "tags": {}
        },
        "justify": {
          "name": "justify",
          "defaultValue": {
            "value": "start"
          },
          "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Justify",
            "value": [
              {
                "value": "\"start\""
              },
              {
                "value": "\"middle\""
              },
              {
                "value": "\"end\""
              },
              {
                "value": "\"fit\""
              }
            ]
          },
          "tags": {}
        },
        "adjustOnMutation": {
          "name": "adjustOnMutation",
          "defaultValue": {
            "value": false
          },
          "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "popoverZIndex": {
          "name": "popoverZIndex",
          "defaultValue": null,
          "description": "Number that controls the z-index of the popover element directly.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "refEl": {
          "name": "refEl",
          "defaultValue": null,
          "description": "A reference to the element against which the popover component will be positioned.",
          "required": false,
          "type": {
            "name": "RefObject<HTMLElement>"
          },
          "tags": {}
        },
        "usePortal": {
          "name": "usePortal",
          "defaultValue": {
            "value": true
          },
          "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "portalClassName": {
          "name": "portalClassName",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "portalContainer": {
          "name": "portalContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "portalRef": {
          "name": "portalRef",
          "defaultValue": null,
          "description": "A ref for the portal element",
          "required": false,
          "type": {
            "name": "MutableRefObject<HTMLElement>"
          },
          "tags": {}
        },
        "scrollContainer": {
          "name": "scrollContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "contentClassName": {
          "name": "contentClassName",
          "defaultValue": null,
          "description": "Class name applied to the popover content container",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      },
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "BaseTransitionProps": {
        "onEnter": {
          "name": "onEnter",
          "defaultValue": null,
          "description": "Callback fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntering": {
          "name": "onEntering",
          "defaultValue": null,
          "description": "Callback fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntered": {
          "name": "onEntered",
          "defaultValue": null,
          "description": "Callback fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onExit": {
          "name": "onExit",
          "defaultValue": null,
          "description": "Callback fired before the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExiting": {
          "name": "onExiting",
          "defaultValue": null,
          "description": "Callback fired after the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExited": {
          "name": "onExited",
          "defaultValue": null,
          "description": "Callback fired after the \"exited\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {
      "param": "props.active Boolean to describe whether or not Popover is active.\nprops.spacing The spacing (in pixels) between the reference element, and the popover.\nprops.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.\nprops.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.\nprops.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\nprops.children Content to appear inside of Popover container.\nprops.className Classname applied to Popover container.\nprops.popoverZIndex Number that controls the z-index of the popover element directly.\nprops.refEl Reference element that Popover component should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.portalClassName Classname applied to root element of the portal.\nprops.portalContainer HTML element that the popover is portaled within.\nprops.portalRef A ref for the Portal element.\nprops.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers."
    },
    "description": "\nReact Component that handles positioning of content relative to another element.\n\n```\n<button>\n <Popover active={true}>Hello world!</Popover>\n</button>\n```",
    "methods": [],
    "displayName": "LeafygreenUiPopover",
    "props": {
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "SrcProps": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Content that will appear inside of the popover component.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((Options: ChildrenFunctionParameters) => ReactNode)",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(Options: ChildrenFunctionParameters) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "active": {
          "name": "active",
          "defaultValue": {
            "value": false
          },
          "description": "Determines the active state of the popover component\n\ndefault: `false`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "spacing": {
          "name": "spacing",
          "defaultValue": {
            "value": 10
          },
          "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "align": {
          "name": "align",
          "defaultValue": {
            "value": "bottom"
          },
          "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Align",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"center-vertical\""
              },
              {
                "value": "\"center-horizontal\""
              }
            ]
          },
          "tags": {}
        },
        "justify": {
          "name": "justify",
          "defaultValue": {
            "value": "start"
          },
          "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Justify",
            "value": [
              {
                "value": "\"start\""
              },
              {
                "value": "\"middle\""
              },
              {
                "value": "\"end\""
              },
              {
                "value": "\"fit\""
              }
            ]
          },
          "tags": {}
        },
        "adjustOnMutation": {
          "name": "adjustOnMutation",
          "defaultValue": {
            "value": false
          },
          "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "popoverZIndex": {
          "name": "popoverZIndex",
          "defaultValue": null,
          "description": "Number that controls the z-index of the popover element directly.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "refEl": {
          "name": "refEl",
          "defaultValue": null,
          "description": "A reference to the element against which the popover component will be positioned.",
          "required": false,
          "type": {
            "name": "RefObject<HTMLElement>"
          },
          "tags": {}
        },
        "usePortal": {
          "name": "usePortal",
          "defaultValue": {
            "value": true
          },
          "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "portalClassName": {
          "name": "portalClassName",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "portalContainer": {
          "name": "portalContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "portalRef": {
          "name": "portalRef",
          "defaultValue": null,
          "description": "A ref for the portal element",
          "required": false,
          "type": {
            "name": "MutableRefObject<HTMLElement>"
          },
          "tags": {}
        },
        "scrollContainer": {
          "name": "scrollContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "contentClassName": {
          "name": "contentClassName",
          "defaultValue": null,
          "description": "Class name applied to the popover content container",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      },
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "BaseTransitionProps": {
        "onEnter": {
          "name": "onEnter",
          "defaultValue": null,
          "description": "Callback fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntering": {
          "name": "onEntering",
          "defaultValue": null,
          "description": "Callback fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntered": {
          "name": "onEntered",
          "defaultValue": null,
          "description": "Callback fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onExit": {
          "name": "onExit",
          "defaultValue": null,
          "description": "Callback fired before the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExiting": {
          "name": "onExiting",
          "defaultValue": null,
          "description": "Callback fired after the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExited": {
          "name": "onExited",
          "defaultValue": null,
          "description": "Callback fired after the \"exited\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        }
      }
    }
  }
]