{"version":3,"file":"index.js","sources":["../../src/constants.ts","../../src/TextArea/TextArea.styles.ts","../../src/TextArea/TextArea.types.ts","../../src/TextArea/TextArea.tsx","../../src/utils/getTestUtils/getTestUtils.ts"],"sourcesContent":["const LGID_ROOT = 'lg-text_area';\n\nexport const LGIDS_TEXT_AREA = {\n  root: LGID_ROOT,\n  errorMessage: `${LGID_ROOT}-error_message`,\n} as const;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  focusRing,\n  fontFamilies,\n  fontWeights,\n  hoverRing,\n  spacing,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nexport const containerStyles = css`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const textAreaStyle = css`\n  font-family: ${fontFamilies.default};\n  width: 100%;\n  min-height: ${spacing[6]}px;\n  resize: none;\n  margin: 0;\n  padding: 8px 12px 1px 12px;\n  font-size: 14px;\n  font-weight: ${fontWeights.regular};\n  line-height: 16px;\n  border: 1px solid;\n  border-radius: 6px;\n  transition: ${transitionDuration.default}ms ease-in-out;\n  transition-property: border-color, box-shadow;\n  margin-top: 4px;\n\n  &:focus {\n    outline: none;\n    border-color: transparent;\n    box-shadow: ${focusRing[Theme.Light].input};\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n\nexport const errorContainerStyle = css`\n  display: flex;\n  height: 20px;\n  margin-top: 5px;\n  align-items: center;\n  font-weight: ${fontWeights.regular};\n`;\n\nexport const errorMessageLabelStyles = css`\n  line-height: 1;\n`;\n\nexport const errorIconStyle = css`\n  margin-right: 3px;\n`;\n\ninterface ColorSets {\n  textArea: string;\n  errorBorder: string;\n  errorIcon: string;\n}\n\nexport const colorSets: Record<Theme, ColorSets> = {\n  [Theme.Light]: {\n    textArea: css`\n      color: ${palette.gray.dark3};\n      background-color: ${palette.white};\n      border-color: ${palette.gray.base};\n\n      &:hover:not(:disabled):not(:focus) {\n        border-color: ${palette.gray.base};\n        box-shadow: ${hoverRing[Theme.Light].gray};\n      }\n\n      &:disabled {\n        color: ${palette.gray.base};\n        background-color: ${palette.gray.light2};\n        border-color: ${palette.gray.light1};\n\n        &::placeholder {\n          color: inherit;\n        }\n      }\n    `,\n\n    errorBorder: css`\n      border-color: ${palette.red.base};\n\n      &:hover:not(:disabled):not(:focus) {\n        border-color: ${palette.red.base};\n        box-shadow: ${hoverRing[Theme.Light].red};\n      }\n\n      &:disabled {\n        border-color: ${palette.gray.light1};\n      }\n    `,\n\n    errorIcon: css`\n      color: ${palette.red.base};\n    `,\n  },\n  [Theme.Dark]: {\n    textArea: css`\n      color: ${palette.gray.light3};\n      background-color: ${palette.gray.dark4};\n      border-color: ${palette.gray.base};\n\n      &:hover:not(:disabled):not(:focus) {\n        border-color: ${palette.gray.base};\n        box-shadow: ${hoverRing[Theme.Dark].gray};\n      }\n\n      &:disabled {\n        color: ${palette.gray.dark1};\n        background-color: ${palette.gray.dark3};\n        border-color: ${palette.gray.dark2};\n\n        &::placeholder {\n          color: inherit;\n        }\n      }\n    `,\n\n    errorBorder: css`\n      border-color: ${palette.red.light1};\n\n      &:hover:not(:disabled):not(:focus) {\n        border-color: ${palette.red.light1};\n        box-shadow: ${hoverRing[Theme.Dark].red};\n      }\n\n      &:disabled {\n        border-color: ${palette.gray.dark2};\n      }\n    `,\n\n    errorIcon: css`\n      color: ${palette.red.light1};\n    `,\n  },\n};\n","import React from 'react';\n\nimport {\n  DarkModeProps,\n  Either,\n  HTMLElementProps,\n  LgIdProps,\n} from '@leafygreen-ui/lib';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\nexport const State = {\n  None: 'none',\n  Error: 'error',\n} as const;\n\nexport type State = (typeof State)[keyof typeof State];\n\nexport interface BaseTextAreaProps\n  extends HTMLElementProps<'textarea', HTMLTextAreaElement>,\n    DarkModeProps,\n    LgIdProps {\n  /**\n   * ID associated with the TextArea component.\n   */\n  id?: string;\n\n  /**\n   * Text shown in bold above the input element.\n   *\n   * Optional if `aria-labelledby` is provided\n   */\n  label?: string | null;\n\n  /**\n   * Text that gives more detail about the requirements for the input.\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Whether or not the field is currently disabled.\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * The placeholder text shown in the input field before the user begins typing.\n   */\n  placeholder?: string;\n\n  /**\n   * The current state of the TextArea. This can be `none` or `error`.\n   * @default \"none\"\n   */\n  state?: State;\n\n  /**\n   * The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\n   */\n  value?: string;\n\n  /**\n   * The message shown below the input element if the value is invalid.\n   */\n  errorMessage?: string;\n\n  /**\n   * Callback called whenever validation should be run.\n   *\n   * See [Form Validation & Error Handling](https://www.mongodb.design/foundation/forms/#form-validation--error-handling) for more\n   */\n  handleValidation?: (value: string) => void;\n\n  /**\n   * Callback to be executed when the input stops being focused.\n   */\n  onBlur?: React.FocusEventHandler<HTMLTextAreaElement>;\n\n  /**\n   * Callback to be executed when the value of the input field changes.\n   */\n  onChange?: React.ChangeEventHandler<HTMLTextAreaElement>;\n\n  /**\n   * Override the global `baseFontSize` set in LeafygreenProvider. This will only change the font size of the input text, not the label or description\n   */\n  baseFontSize?: BaseFontSize;\n\n  /**\n   * Screen-reader label element\n   *\n   * Optional if `label` is provided\n   */\n  ['aria-labelledby']: string;\n}\n\nexport type AriaLabels = 'label' | 'aria-labelledby';\nexport type TextAreaProps = Either<BaseTextAreaProps, AriaLabels>;\n","import React, { forwardRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useIdAllocator, useValidation } from '@leafygreen-ui/hooks';\nimport Warning from '@leafygreen-ui/icon/dist/Warning';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport {\n  bodyTypeScaleStyles,\n  Description,\n  Error,\n  Label,\n  useUpdatedBaseFontSize,\n} from '@leafygreen-ui/typography';\n\nimport { LGIDS_TEXT_AREA } from '../constants';\n\nimport {\n  colorSets,\n  containerStyles,\n  errorContainerStyle,\n  errorIconStyle,\n  errorMessageLabelStyles,\n  textAreaStyle,\n} from './TextArea.styles';\nimport { State, TextAreaProps } from './TextArea.types';\n\n/**\n * # TextArea\n *\n * TextArea component\n *\n * ```\n<TextArea label='Input Label' onChange={() => execute when value of input field changes}/>\n```\n * @param props.id ID associated with the TextArea component.\n * @param props.label Text shown in bold above the input element.\n * @param props.description Text that gives more detail about the requirements for the input.\n * @param props.disabled Whether or not the field is currently disabled.\n * @param props.onChange Callback to be executed when the value of the input field changes.\n * @param props.onBlur Callback to be executed when the input stops being focused.\n * @param props.placeholder The placeholder text shown in the input field before the user begins typing.\n * @param props.errorMessage The error message shown below the input element if the value is invalid.\n * @param props.state The current state of the TextArea. This can be `none` or `error`.\n * @param props.value The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\n * @param props.className ClassName supplied to the TextArea container.\n * @param props.darkMode Determines whether or not the component appears in dark theme.\n * @param props.handleValidation Validation callback used to validate input.\n * @param props.baseFontSize Override the global `baseFontSize` set in LeafygreenProvider. This will only change the font size of the input text, not the label or description.\n * @param props.defaultValue The default value of the input field. Unlike value, component will not be controlled if defaultValue is passed.\n */\n\ntype TextArea = React.ForwardRefExoticComponent<TextAreaProps>;\nexport const TextArea: TextArea = forwardRef<\n  HTMLTextAreaElement,\n  TextAreaProps\n>(function TextArea(\n  {\n    label,\n    description,\n    className,\n    errorMessage,\n    darkMode: darkModeProp,\n    disabled = false,\n    state = State.None,\n    id: idProp,\n    value: controlledValue,\n    onChange,\n    onBlur,\n    handleValidation,\n    'aria-labelledby': ariaLabelledby,\n    baseFontSize: baseFontSizeProp,\n    'data-lgid': dataLgId = LGIDS_TEXT_AREA.root,\n    defaultValue = '',\n    ...rest\n  }: TextAreaProps,\n  forwardedRef: React.Ref<HTMLTextAreaElement>,\n) {\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n  const id = useIdAllocator({ prefix: 'textarea', id: idProp });\n  const { darkMode, theme } = useDarkMode(darkModeProp);\n\n  const isControlled = typeof controlledValue === 'string';\n  const [uncontrolledValue, setValue] = useState(defaultValue);\n  const value = isControlled ? controlledValue : uncontrolledValue;\n\n  // Validation\n  const validation = useValidation<HTMLTextAreaElement>(handleValidation);\n\n  const onBlurHandler: React.FocusEventHandler<HTMLTextAreaElement> = e => {\n    if (onBlur) {\n      onBlur(e);\n    }\n\n    validation.onBlur(e);\n  };\n\n  const onValueChange: React.ChangeEventHandler<HTMLTextAreaElement> = e => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (!isControlled) {\n      setValue(e.target.value);\n    }\n\n    validation.onChange(e);\n  };\n\n  if (!label && !ariaLabelledby) {\n    console.error(\n      'For screen-reader accessibility, label or aria-labelledby must be provided to TextArea.',\n    );\n  }\n\n  return (\n    <LeafyGreenProvider\n      darkMode={darkMode}\n      // TODO: We cannot simply pass baseFontSize to the Provider, since the updatedBaseFontSize values are not in line with those accepted by the Provider.\n      // Once we fix this in this Provider, we should update to pass baseFontSize here rather than coercing the value.\n      // This works as-is because all of the Typography elements are using useUpdatedBaseFontSize to convert 14 to 13px.\n      baseFontSize={baseFontSize === 16 ? 16 : 14}\n    >\n      <div className={cx(containerStyles, className)} data-lgid={dataLgId}>\n        {label && (\n          <Label htmlFor={id} disabled={disabled}>\n            {label}\n          </Label>\n        )}\n        {description && (\n          <Description disabled={disabled}>{description}</Description>\n        )}\n        <textarea\n          {...rest}\n          aria-labelledby={ariaLabelledby}\n          ref={forwardedRef}\n          title={label != null ? label : undefined}\n          id={id}\n          className={cx(\n            textAreaStyle,\n            bodyTypeScaleStyles[baseFontSize],\n            colorSets[theme].textArea,\n            {\n              [colorSets[theme].errorBorder]:\n                state === State.Error && !disabled,\n            },\n          )}\n          disabled={disabled}\n          onChange={onValueChange}\n          onBlur={onBlurHandler}\n          value={value}\n          aria-invalid={state === State.Error}\n        />\n        {!disabled && state === State.Error && errorMessage && (\n          <div className={errorContainerStyle}>\n            <Warning\n              className={cx(errorIconStyle, colorSets[theme].errorIcon)}\n            />\n            <Error\n              className={cx(\n                bodyTypeScaleStyles[baseFontSize],\n                errorMessageLabelStyles,\n              )}\n              data-lgid={LGIDS_TEXT_AREA.errorMessage}\n            >\n              {errorMessage}\n            </Error>\n          </div>\n        )}\n      </div>\n    </LeafyGreenProvider>\n  );\n});\n\nTextArea.displayName = 'TextArea';\n\nTextArea.propTypes = {\n  id: PropTypes.string,\n  darkMode: PropTypes.bool,\n  label: PropTypes.string,\n  description: PropTypes.string,\n  errorMessage: PropTypes.string,\n  state: PropTypes.oneOf(Object.values(State)),\n};\n","import { getByLgId, queryBySelector } from '@lg-tools/test-harnesses';\n\nimport { LGIDS_TYPOGRAPHY } from '@leafygreen-ui/typography';\n\nimport { LGIDS_TEXT_AREA } from '../../constants';\n\nimport { TestUtilsReturnType } from './getTestUtils.types';\n\nexport const getTestUtils = (\n  lgId: string = LGIDS_TEXT_AREA.root,\n): TestUtilsReturnType => {\n  /**\n   * Queries the DOM for the element using the `data-lgid` data attribute.\n   * Will throw if no element is found.\n   */\n  const element = getByLgId!(lgId);\n\n  /**\n   * Queries the `element` for the label element. Will return `null` if the label is not found.\n   */\n  const getLabel = queryBySelector<HTMLLabelElement>(\n    element,\n    `[data-lgid=${LGIDS_TYPOGRAPHY.label}]`,\n  );\n\n  /**\n   * Queries the `element` for the description element. Will return `null` if the desription is not found.\n   */\n  const getDescription = queryBySelector<HTMLElement>(\n    element,\n    `[data-lgid=${LGIDS_TYPOGRAPHY.description}]`,\n  );\n\n  /**\n   * Queries the `element` for the input element. Will return `null` if the input is not found.\n   */\n  const getInput = queryBySelector<HTMLTextAreaElement>(\n    element,\n    `textarea`,\n  ) as HTMLTextAreaElement;\n\n  /**\n   * Queries the `element` for the error message element. Will return `null` if the error message is not found.\n   */\n  const getErrorMessage = queryBySelector<HTMLElement>(\n    element,\n    `[data-lgid=\"${LGIDS_TEXT_AREA.errorMessage}\"]`,\n  );\n\n  /**\n   * Returns the disabled attribute on the input.\n   */\n  const isInputDisabled = () => {\n    return getInput.disabled;\n  };\n\n  /**\n   * Returns the input value.\n   */\n  const getInputValue = () => {\n    return getInput.value;\n  };\n\n  /**\n   * Queries the `element` for `aria-invalid`.\n   */\n  const isError = () => {\n    const ariaInvalid = queryBySelector<SVGElement>(\n      element,\n      'textarea[aria-invalid=\"true\"]',\n    );\n\n    return !!ariaInvalid;\n  };\n\n  return {\n    getLabel: () => getLabel,\n    getDescription: () => getDescription,\n    getInput: () => getInput,\n    getErrorMessage: () => getErrorMessage,\n    isDisabled: () => isInputDisabled(),\n    isError: () => isError(),\n    getInputValue: () => getInputValue(),\n  };\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","LGID_ROOT","LGIDS_TEXT_AREA","root","errorMessage","concat","containerStyles","css","_taggedTemplateLiteral","textAreaStyle","fontFamilies","default","spacing","fontWeights","regular","transitionDuration","focusRing","Theme","Light","input","errorContainerStyle","errorMessageLabelStyles","errorIconStyle","colorSets","_defineProperty","textArea","palette","gray","dark3","white","base","hoverRing","light2","light1","errorBorder","red","errorIcon","Dark","light3","dark4","dark1","dark2","State","None","Error","_excluded","TextArea","forwardRef","_ref","forwardedRef","label","description","className","darkModeProp","darkMode","_ref$disabled","disabled","_ref$state","state","idProp","id","controlledValue","value","onChange","onBlur","handleValidation","ariaLabelledby","baseFontSizeProp","baseFontSize","_ref$dataLgid","dataLgId","_ref$defaultValue","defaultValue","rest","_objectWithoutProperties","useUpdatedBaseFontSize","useIdAllocator","prefix","_useDarkMode","useDarkMode","theme","isControlled","_useState2","_slicedToArray","useState","uncontrolledValue","setValue","validation","useValidation","console","error","React","createElement","LeafyGreenProvider","cx","Label","htmlFor","Description","_extends","ref","title","undefined","bodyTypeScaleStyles","e","target","Warning","displayName","propTypes","PropTypes","string","bool","oneOf","Object","values","getTestUtils","element","getByLgId","arguments","length","_getLabel","queryBySelector","LGIDS_TYPOGRAPHY","_getDescription","_getInput","_getErrorMessage","getLabel","getDescription","getInput","getErrorMessage","isDisabled","isError","getInputValue"],"mappings":"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"}