{"version":3,"file":"index.js","sources":["../../src/constants.ts","../../src/Select/Select.types.ts","../../src/Option/Option.tsx","../../src/OptionGroup/OptionGroup.styles.ts","../../src/SelectContext.tsx","../../src/styleSets.ts","../../src/Option/Options.styles.ts","../../src/OptionGroup/OptionGroup.tsx","../../src/utils/utils.tsx","../../src/ListMenu/ListMenu.styles.ts","../../src/ListMenu/ListMenu.tsx","../../src/MenuButton/MenuButton.styles.ts","../../src/MenuButton/MenuButton.tsx","../../src/Select/Select.styles.ts","../../src/Select/Select.tsx","../../src/utils/getTestUtils/getTestUtils.ts"],"sourcesContent":["const LGID_ROOT = 'lg-select';\n\nexport const LGIDS_SELECT = {\n  root: LGID_ROOT,\n  errorMessage: `${LGID_ROOT}-error_message`,\n  popover: `${LGID_ROOT}-popover`,\n  buttonText: `${LGID_ROOT}-button_text`,\n} as const;\n","import React from 'react';\n\nimport { ButtonProps } from '@leafygreen-ui/button';\nimport { FormFieldState } from '@leafygreen-ui/form-field';\nimport {\n  DarkModeProps,\n  Either,\n  HTMLElementProps,\n  LgIdProps,\n} from '@leafygreen-ui/lib';\nimport { PopoverProps } from '@leafygreen-ui/popover';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\nexport const Size = {\n  XSmall: 'xsmall',\n  Small: 'small',\n  Default: 'default',\n  Large: 'large',\n} as const;\nexport type Size = (typeof Size)[keyof typeof Size];\n\nexport const State = FormFieldState;\nexport type State = (typeof State)[keyof typeof State];\n\nexport const DropdownWidthBasis = {\n  Trigger: 'trigger',\n  Option: 'option',\n} as const;\n\nexport type DropdownWidthBasis =\n  (typeof DropdownWidthBasis)[keyof typeof DropdownWidthBasis];\n\nexport interface BaseSelectProps\n  extends Omit<\n      HTMLElementProps<'button', HTMLButtonElement>,\n      'onChange' | 'onClick'\n    >,\n    Omit<PopoverProps, 'active' | 'spacing'>,\n    DarkModeProps,\n    LgIdProps {\n  /**\n   * Children rendered inside the component. Expected to be either `<Option>` or `<OptionGroup>`.\n   *\n   * @type `<Option />` | `<OptionGroup/>`\n   */\n  children: React.ReactNode;\n\n  /**\n   * HTML `id` property used to allow Javascript, form, or label to reference the input.\n   */\n  id?: string;\n\n  /**\n   * Determines the size in which the component will be rendered.\n   */\n  size?: Size;\n\n  /**\n   * When present, it specifies that the drop-down list should be disabled.\n   *\n   * A `disabled` drop-down list is unusable and un-clickable.\n   */\n  disabled?: boolean;\n\n  /**\n   * Secondary text rendered under the label to provide additional details about the select and its options.\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Text rendered in the Select component before a value is set.\n   */\n  placeholder?: string;\n\n  /**\n   * The `name` attribute specifies the name for a drop-down list.\n   *\n   * The `name` attribute is used to reference elements in a JavaScript, or to reference form data after a form is submitted.\n   */\n  name?: string;\n\n  /**\n   * Allows the user to unselect an option.\n   */\n  allowDeselect?: boolean;\n\n  /**\n   * Error message rendered when the `state` prop is set to `error`.\n   */\n  errorMessage?: React.ReactNode;\n\n  /**\n   * Success message rendered when the `state` prop is set to `valid`.\n   */\n  successMessage?: React.ReactNode;\n\n  /**\n   * Determines whether the component should be rendered in an error state.\n   */\n  state?: State;\n\n  /**\n   *  determines the base font size if sizeVariant is set to default.\n   */\n  baseFontSize?: BaseFontSize;\n\n  /**\n   *  Determines the width of the dropdown. `trigger` will make the dropdown width the width of the menu button. `option` will make the dropdown width as wide as the widest option.\n   *\n   * @default 'trigger'\n   */\n  dropdownWidthBasis?: DropdownWidthBasis;\n\n  /**\n   * @internal\n   */\n  __INTERNAL__menuButtonSlot__?: React.ForwardRefExoticComponent<\n    React.RefAttributes<unknown>\n  >;\n\n  /**\n   * @internal\n   */\n  __INTERNAL__menuButtonSlotProps__?: Partial<ButtonProps> &\n    Record<string, any>;\n}\n\nexport interface LabelProp {\n  label: string;\n  'aria-labelledby': string;\n  'aria-label': string;\n}\n\nexport type SelectProps = BaseSelectProps &\n  Either<LabelProp, 'label' | 'aria-labelledby' | 'aria-label'> &\n  (\n    | // Uncontrolled\n    ({\n        /**\n         * `value` makes the component a controlled component and using `defaultValue` makes it uncontrolled.\n         */\n        defaultValue?: string;\n        /**\n         * `value` makes the component a controlled component and using `defaultValue` makes it uncontrolled.\n         */\n        value?: undefined;\n      } & {\n        /**\n         * A function that takes in the value of the selected option, and the event that was used to select the value (i.e. React.MouseEvent | KeyboardEvent | React.KeyboardEvent).\n         *\n         * Note: This API is different from the native HTML `<select>` element's `onChange` prop given the current technical design of this component.\n         */\n        onChange?: (\n          value: string,\n          event: React.MouseEvent | KeyboardEvent | React.KeyboardEvent,\n        ) => void;\n        /**\n         * Indicates that the component's value cannot be changed.\n         */\n        readOnly?: false;\n      })\n    // Controlled\n    | ({ value: string; defaultValue?: undefined } & (\n        | {\n            /**\n             * A function that takes in the value of the selected option, and the event that was used to select the value (i.e. React.MouseEvent | KeyboardEvent | React.KeyboardEvent).\n             *\n             * Note: This API is different from the native HTML `<select>` element's `onChange` prop given the current technical design of this component.\n             */\n            onChange: (\n              value: string,\n              event: React.MouseEvent | KeyboardEvent | React.KeyboardEvent,\n            ) => void;\n            readOnly?: false;\n          }\n        | { readOnly: true; onChange?: undefined }\n      ))\n  );\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { usePrevious } from '@leafygreen-ui/hooks';\nimport { isComponentGlyph } from '@leafygreen-ui/icon';\nimport CheckmarkIcon from '@leafygreen-ui/icon/dist/Checkmark';\nimport { InputOption, InputOptionContent } from '@leafygreen-ui/input-option';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nimport { colorSets } from '../styleSets';\n\nimport { InternalProps, OptionProps } from './Option.types';\nimport { OptionClassName } from './Options.styles';\n\nexport function InternalOption({\n  children,\n  className,\n  glyph,\n  selected,\n  focused,\n  disabled,\n  onClick,\n  onFocus,\n  triggerScrollIntoView,\n  hasGlyphs,\n  description,\n  ...rest\n}: InternalProps) {\n  const { theme } = useDarkMode();\n\n  const { option: colorSet } = colorSets[theme];\n\n  const ref = useRef<HTMLLIElement>(null);\n\n  const scrollIntoView = useCallback(() => {\n    if (ref.current == null) {\n      return null;\n    }\n\n    const element = ref.current;\n    const parent = element?.offsetParent;\n\n    if (!parent) {\n      return null;\n    }\n\n    // Can't use Element.scrollIntoView because it might\n    // cause scrolling outside the immediate parent.\n    parent.scrollTop =\n      element.offsetTop + (element.clientHeight - parent.clientHeight) / 2;\n  }, [ref]);\n\n  const alreadyScrolledIntoView = usePrevious(triggerScrollIntoView);\n  const shouldScrollIntoView =\n    triggerScrollIntoView && !alreadyScrolledIntoView;\n\n  useEffect(() => {\n    if (shouldScrollIntoView) {\n      scrollIntoView();\n    }\n  }, [scrollIntoView, shouldScrollIntoView]);\n\n  const wasFocused = usePrevious(focused);\n  const shouldFocus = focused && !wasFocused;\n\n  useEffect(() => {\n    if (shouldFocus) {\n      ref.current!.focus();\n    }\n  }, [shouldFocus]);\n\n  if (glyph) {\n    if (!isComponentGlyph(glyph)) {\n      console.error(\n        '`Option` instance did not render icon because it is not a known glyph element.',\n      );\n    }\n  }\n\n  const glyphProp = glyph && isComponentGlyph(glyph) ? glyph : undefined;\n\n  const checkmark = selected ? (\n    <CheckmarkIcon\n      key=\"checkmark\"\n      className={cx(\n        css`\n          color: ${colorSet.icon.selected};\n        `,\n        {\n          [css`\n            color: ${colorSet.icon.disabled};\n          `]: disabled,\n        },\n      )}\n    />\n  ) : undefined;\n\n  const leftGlyph = hasGlyphs ? glyphProp : checkmark;\n  const rightGlyph = hasGlyphs ? checkmark : undefined;\n\n  return (\n    <InputOption\n      aria-label={typeof children === 'string' ? children : 'option'}\n      {...rest}\n      disabled={disabled}\n      role=\"option\"\n      tabIndex={-1}\n      ref={ref}\n      className={cx(OptionClassName, className)}\n      onClick={onClick}\n      onFocus={onFocus}\n      onKeyDown={undefined}\n      checked={selected}\n      highlighted={focused}\n    >\n      <InputOptionContent\n        leftGlyph={leftGlyph}\n        rightGlyph={rightGlyph}\n        description={description}\n      >\n        <span\n          className={cx({\n            [css`\n              font-weight: ${fontWeights.bold};\n            `]: selected,\n          })}\n        >\n          {children}\n        </span>\n      </InputOptionContent>\n    </InputOption>\n  );\n}\n\nInternalOption.displayName = 'Option';\n\nexport function Option(_: OptionProps): JSX.Element {\n  throw Error('`Option` must be a child of a `Select` instance');\n}\n\nOption.displayName = 'Option';\n\nOption.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  glyph: PropTypes.element,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  description: PropTypes.string,\n};\n\n// React.ReactComponentElement messes up the original\n// typing of props, so it is fixed up by overriding it.\nexport type OptionElement = Omit<\n  React.ReactComponentElement<typeof Option>,\n  'props'\n> & { props: OptionProps };\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights, spacing } from '@leafygreen-ui/tokens';\n\nexport const optionGroupStyle = css`\n  padding: ${spacing[2]}px 0;\n`;\n\nexport const optionGroupLabelStyle = css`\n  cursor: default;\n  width: 100%;\n  padding: 0 12px 2px;\n  outline: none;\n  overflow-wrap: anywhere;\n  font-size: 12px;\n  line-height: 16px;\n  font-weight: ${fontWeights.bold};\n  text-transform: uppercase;\n  letter-spacing: 0.4px;\n`;\n","import { createContext } from 'react';\n\nimport { Size } from './Select/Select.types';\n\ninterface SelectData {\n  size: Size;\n  open: boolean;\n  disabled: boolean;\n}\n\nexport const SelectContext = createContext<SelectData>({\n  size: Size.Default,\n  open: false,\n  disabled: false,\n});\n\nexport default SelectContext;\n","import { transparentize } from 'polished';\n\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nimport { Size } from './Select/Select.types';\n\ninterface ColorSet {\n  menu: {\n    shadow: string;\n    border?: string;\n  };\n  option: {\n    group: {\n      label: string;\n    };\n    background: {\n      base: string;\n      hovered: string;\n      focused: string;\n    };\n    text: {\n      base: string;\n      selected: string;\n      disabled: string;\n      focused: string;\n    };\n    icon: {\n      base: string;\n      selected: string;\n      disabled: string;\n    };\n    indicator: {\n      focused: string;\n    };\n  };\n}\n\nexport const colorSets: Record<Theme, ColorSet> = {\n  [Theme.Light]: {\n    menu: {\n      border: palette.gray.light2,\n      shadow: transparentize(0.75, palette.black),\n    },\n    option: {\n      group: {\n        label: palette.gray.dark1,\n      },\n      background: {\n        base: palette.white,\n        hovered: palette.gray.light2,\n        focused: palette.blue.light3,\n      },\n      text: {\n        base: palette.gray.dark3,\n        selected: palette.blue.base,\n        disabled: palette.gray.base,\n        focused: palette.blue.dark2,\n      },\n      icon: {\n        base: palette.gray.dark1,\n        selected: palette.blue.base,\n        disabled: palette.gray.base,\n      },\n      indicator: {\n        focused: palette.blue.base,\n      },\n    },\n  },\n\n  [Theme.Dark]: {\n    menu: {\n      border: palette.gray.dark2,\n      shadow: transparentize(0.85, '#000000'),\n    },\n    option: {\n      group: {\n        label: palette.gray.base,\n      },\n      background: {\n        base: palette.gray.dark3,\n        hovered: palette.gray.dark4,\n        focused: palette.blue.dark3,\n      },\n      text: {\n        base: palette.gray.light2,\n        selected: palette.gray.light2,\n        disabled: palette.gray.base,\n        focused: palette.blue.light3,\n      },\n      icon: {\n        base: palette.gray.base,\n        selected: palette.blue.light1,\n        disabled: palette.gray.base,\n      },\n      indicator: {\n        focused: palette.blue.light1,\n      },\n    },\n  },\n};\n\nexport interface SizeSet {\n  height: number;\n  text: number;\n  lineHeight?: number;\n  option: {\n    text: number;\n  };\n  warningIcon: number;\n  label?: {\n    text: number;\n    lineHeight: number;\n  };\n  description?: {\n    text: number;\n    lineHeight: number;\n  };\n}\n\nexport const sizeSets: Record<Size, SizeSet> = {\n  [Size.XSmall]: {\n    height: 22,\n    text: 13,\n    option: {\n      text: 13,\n    },\n    warningIcon: 16,\n  },\n  [Size.Small]: {\n    height: 28,\n    text: 13,\n    option: {\n      text: 13,\n    },\n    warningIcon: 16,\n  },\n  [Size.Default]: {\n    height: 36,\n    text: 13,\n    option: {\n      text: 13,\n    },\n    warningIcon: 16,\n  },\n  [Size.Large]: {\n    height: 48,\n    text: 18,\n    option: {\n      text: 16,\n    },\n    warningIcon: 16,\n  },\n};\n\ninterface MobileSizeSet {\n  height: number;\n  text: number;\n  label: {\n    text: number;\n    lineHeight: number;\n  };\n  description: {\n    text: number;\n    lineHeight: number;\n  };\n  option: {\n    text: number;\n  };\n  warningIcon: number;\n}\n\nexport const mobileSizeSet: MobileSizeSet = {\n  height: 36,\n  text: 16,\n  label: {\n    text: 16,\n    lineHeight: 19,\n  },\n  description: {\n    text: 16,\n    lineHeight: 22,\n  },\n  option: {\n    text: 16,\n  },\n  warningIcon: 14,\n};\n","import { createUniqueClassName } from '@leafygreen-ui/lib';\n\nexport const OptionClassName = createUniqueClassName('option');\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { colorSets } from '../styleSets';\n\nimport { optionGroupLabelStyle, optionGroupStyle } from './OptionGroup.styles';\nimport { InternalOptionProps, OptionGroupProps } from './OptionGroup.types';\n\nexport function InternalOptionGroup({\n  className,\n  label,\n  children,\n  ...rest\n}: InternalOptionProps) {\n  const { theme } = useDarkMode();\n  const colorSet = colorSets[theme].option;\n\n  const groupId = useIdAllocator({ prefix: 'select-option-group' });\n\n  return (\n    <div className={cx(optionGroupStyle, className)} {...rest}>\n      <div\n        id={groupId}\n        className={cx(\n          optionGroupLabelStyle,\n          css`\n            color: ${colorSet.group.label};\n          `,\n        )}\n      >\n        {label}\n      </div>\n      <div role=\"group\" aria-labelledby={groupId}>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nInternalOptionGroup.displayName = 'OptionGroup';\n\nexport function OptionGroup(_: OptionGroupProps): JSX.Element {\n  throw Error('`OptionGroup` must be a child of a `Select` instance');\n}\n\nOptionGroup.displayName = 'OptionGroup';\n\nOptionGroup.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.oneOf([false, null, undefined, '']),\n        PropTypes.element,\n      ]),\n    ),\n  ]).isRequired,\n  className: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n};\n\nexport type OptionGroupElement = React.ReactComponentElement<\n  typeof OptionGroup\n>;\n","import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { isFragment } from 'react-is';\n\nimport { consoleOnce, isComponentType } from '@leafygreen-ui/lib';\nimport { breakpoints } from '@leafygreen-ui/tokens';\n\nimport {\n  InternalOption,\n  InternalProps as InternalOptionProps,\n  OptionElement,\n  ReactEmpty,\n} from '../Option';\nimport { InternalOptionGroup, OptionGroupElement } from '../OptionGroup';\n\n// Any screen smaller than a tablet with no pointer, or a coarse pointer and no hover capability (i.e. touch screen)\n// For more details, see: https://css-tricks.com/touch-devices-not-judged-size/\nconst _baseQuery = `@media only screen and (max-width: ${breakpoints.Tablet}px) and (hover: none)`;\nexport const MobileMediaQuery = `${_baseQuery} and (pointer: coarse), ${_baseQuery} and (pointer: none)`;\n\nfunction isReactEmpty(value: React.ReactNode): value is ReactEmpty {\n  return (\n    value === undefined || value === null || value === false || value === ''\n  );\n}\n\nexport function traverseSelectChildren(\n  children: React.ReactNode,\n  optionFn: (child: OptionElement, group?: OptionGroupElement) => void,\n): void {\n  React.Children.forEach(children, child => {\n    if (isComponentType<OptionElement>(child, 'Option')) {\n      optionFn(child);\n    } else if (isComponentType<OptionGroupElement>(child, 'OptionGroup')) {\n      traverseSelectChildren(child.props.children, option =>\n        optionFn(option, child),\n      );\n    } else if (isFragment(child)) {\n      traverseSelectChildren(child.props.children, optionFn);\n    }\n  });\n}\n\nexport function convertToInternalElements(\n  children: React.ReactNode,\n  optionFn: (\n    child: OptionElement,\n    group?: OptionGroupElement,\n  ) => InternalOptionProps,\n  fallbackFn?: (child: React.ReactNode) => void,\n): React.ReactNode {\n  if (\n    !(\n      React.Children.toArray(children).every(child =>\n        isComponentType<OptionElement>(child, 'Option'),\n      ) ||\n      React.Children.toArray(children).every(child =>\n        isComponentType<OptionGroupElement>(child, 'OptionGroup'),\n      )\n    )\n  ) {\n    consoleOnce.warn(\n      `LeafyGreen Select: Combining grouped and ungrouped Select Options can cause styling issues`,\n    );\n  }\n\n  return React.Children.map(children, child => {\n    if (isComponentType<OptionElement>(child, 'Option')) {\n      return <InternalOption {...optionFn(child)} />;\n    } else if (isComponentType<OptionGroupElement>(child, 'OptionGroup')) {\n      const { children: options, ...rest } = child.props;\n      return (\n        <InternalOptionGroup className={undefined} {...rest}>\n          {convertToInternalElements(\n            options,\n            option => optionFn(option, child),\n            fallbackFn,\n          )}\n        </InternalOptionGroup>\n      );\n    } else if (isFragment(child)) {\n      return convertToInternalElements(\n        child.props.children,\n        optionFn,\n        fallbackFn,\n      );\n    } else if (!isReactEmpty(child)) {\n      fallbackFn?.(child);\n    }\n\n    return null;\n  });\n}\n\nexport function getOptionValue(option: OptionElement | null): string {\n  if (option === null) {\n    return '';\n  }\n\n  if (option.props.value !== undefined) {\n    return option.props.value;\n  }\n\n  if (Array.isArray(option.props.children)) {\n    return option.props.children.filter(child => !isReactEmpty(child)).join('');\n  }\n\n  if (option.props.children) {\n    return option.props.children.toString();\n  }\n\n  return '';\n}\n\nexport function isOptionDisabled(\n  option: OptionElement,\n  group: OptionGroupElement | undefined,\n): boolean {\n  return (option.props.disabled ?? false) || (group?.props?.disabled ?? false);\n}\n\nexport function isOptionSelectable(\n  option: OptionElement,\n  group: OptionGroupElement | undefined,\n  value: string,\n): boolean {\n  return getOptionValue(option) === value && !isOptionDisabled(option, group);\n}\n\n/**\n * Given the selected option from a previous render, attempts to find a\n * match among the options of the next render to become the next selected\n * option, so that the state of the component doesn't need to be lost.\n */\nexport function reconcileOption(\n  children: React.ReactNode,\n  previousOption: OptionElement,\n): OptionElement | null {\n  // we disregard `key`s because they should only be compared in\n  // the context of the same parent element, which we don't know\n  // and would be complex to track. we disregard which option\n  // group the previous option was in as well for simplicity.\n  let sameInstance: OptionElement | undefined;\n  let sameChildrenAndValue: OptionElement | undefined;\n  let sameExplicitValue: OptionElement | undefined;\n  let sameValue: OptionElement | undefined;\n\n  traverseSelectChildren(children, option => {\n    if (option === previousOption) {\n      sameInstance = previousOption;\n    } else if (\n      option.props.children === previousOption.props.children &&\n      option.props.value === previousOption.props.value\n    ) {\n      sameChildrenAndValue ??= option;\n    } else if (\n      option.props.value !== undefined &&\n      option.props.value === previousOption.props.value\n    ) {\n      sameExplicitValue ??= option;\n    } else if (getOptionValue(option) === getOptionValue(previousOption)) {\n      sameValue ??= option;\n    }\n  });\n\n  return (\n    sameInstance ??\n    sameChildrenAndValue ??\n    sameExplicitValue ??\n    sameValue ??\n    null\n  );\n}\n\nexport function useObservedRef<T>(\n  callback: (value: T) => void,\n  initialValue: T,\n  options: { initialValue: T; deps?: React.DependencyList },\n): React.MutableRefObject<T>;\nexport function useObservedRef<T>(\n  callback: (value: T) => void,\n  options?: { initialValue: T | null; deps?: React.DependencyList },\n): React.RefObject<T>;\nexport function useObservedRef<T>(\n  callback: (value: T | undefined) => void,\n  options?: { deps?: React.DependencyList },\n): React.MutableRefObject<T>;\nexport function useObservedRef<T>(\n  callback: (value: T | null | undefined) => void,\n  {\n    initialValue,\n    deps = [],\n  }: { initialValue?: T | null; deps?: React.DependencyList } = {},\n) {\n  const ref = useRef(initialValue);\n\n  return useMemo(\n    () => ({\n      get current() {\n        return ref.current;\n      },\n      set current(nextValue) {\n        ref.current = nextValue;\n        callback(nextValue);\n      },\n    }),\n    [\n      callback,\n      ref,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...deps,\n    ],\n  );\n}\n\ntype SettableRef<T> = React.RefCallback<T> | React.MutableRefObject<T>;\n\ntype ValueOrArray<T> = T | ReadonlyArray<T>;\n\nexport function useForwardedRef<T>(\n  forwardedRefOrRefs: ValueOrArray<SettableRef<T> | null>,\n  initialValue: T,\n): React.MutableRefObject<T>;\nexport function useForwardedRef<T>(\n  forwardedRefOrRefs: ValueOrArray<SettableRef<T | null> | null>,\n  initialValue: T | null,\n): React.RefObject<T>;\nexport function useForwardedRef<T>(\n  forwardedRefOrRefs: ValueOrArray<SettableRef<T | null | undefined> | null>,\n  initialValue?: T | null,\n): React.MutableRefObject<T | null | undefined> {\n  const forwardValueToRefs = useCallback(\n    <T,>(\n      forwardedRefOrRefs: ValueOrArray<SettableRef<T> | null>,\n      nextValue: T,\n    ) => {\n      if (Array.isArray(forwardedRefOrRefs)) {\n        forwardedRefOrRefs.forEach(forwardValueToRefs);\n      } else if (typeof forwardedRefOrRefs === 'function') {\n        forwardedRefOrRefs(nextValue);\n      } else if (forwardedRefOrRefs) {\n        // @ts-expect-error https://github.com/microsoft/TypeScript/issues/40527\n        forwardedRefOrRefs.current = nextValue;\n      }\n    },\n    [],\n  );\n\n  return useObservedRef(\n    useCallback(\n      value => forwardValueToRefs(forwardedRefOrRefs, value),\n      [forwardedRefOrRefs, forwardValueToRefs],\n    ),\n    { initialValue },\n  );\n}\n\n/**\n * TODO: Explore obsoleting `useElementNode` in favor of this\n */\nexport const useStateRef: typeof useRef = <T,>(initialValue?: T) => {\n  const [value, setValue] = useState(initialValue);\n  return useObservedRef(setValue, { initialValue, deps: [value] });\n};\n","import { css, cx } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { color, Size, spacing } from '@leafygreen-ui/tokens';\n\nimport { colorSets, sizeSets } from '../styleSets';\n\nexport const popoverClassName = createUniqueClassName('select-popover');\n\nexport const maxMenuHeight = 274;\nexport const menuMargin = spacing[2];\n\nexport const baseMenuStyle = css`\n  position: relative;\n  text-align: left;\n  width: 100%;\n  border-radius: 3px;\n  line-height: 16px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  overflow: auto;\n`;\n\nexport const autoWidthStyles = css`\n  width: max-content;\n`;\n\nexport const getMenuStyles = (theme: Theme, size: Size) => {\n  const sizeSet = sizeSets[size];\n  const colorSet = colorSets[theme];\n\n  return cx(\n    css`\n      min-height: ${sizeSet.height}px;\n      border-radius: 12px;\n      box-shadow: 0 4px 7px 0 ${colorSet.menu.shadow};\n      padding: ${spacing[200]}px 0;\n      background-color: ${color[theme].background.primary.default};\n      border: 1px solid ${color[theme].border.secondary.default};\n    `,\n  );\n};\n","import React, { useCallback, useContext } from 'react';\nimport isUndefined from 'lodash/isUndefined';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useAvailableSpace } from '@leafygreen-ui/hooks';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport Popover, { Align, Justify } from '@leafygreen-ui/popover';\n\nimport { LGIDS_SELECT } from '../constants';\nimport { DropdownWidthBasis } from '../Select/Select.types';\nimport SelectContext from '../SelectContext';\nimport { mobileSizeSet } from '../styleSets';\nimport { MobileMediaQuery, useForwardedRef } from '../utils/utils';\n\nimport {\n  autoWidthStyles,\n  baseMenuStyle,\n  getMenuStyles,\n  maxMenuHeight,\n  menuMargin,\n  popoverClassName,\n} from './ListMenu.styles';\nimport { ListMenuProps } from './ListMenu.types';\n\n/**\n * @internal\n */\nconst ListMenu = React.forwardRef<HTMLUListElement, ListMenuProps>(\n  function ListMenu(\n    {\n      children,\n      id,\n      referenceElement,\n      className,\n      labelId,\n      dropdownWidthBasis,\n      usePortal = true,\n      portalContainer,\n      portalRef,\n      scrollContainer,\n      portalClassName,\n      popoverZIndex,\n      onEntering,\n      onEnter,\n      onEntered,\n      onExiting,\n      onExit,\n      onExited,\n    }: ListMenuProps,\n    forwardedRef,\n  ) {\n    const { theme } = useDarkMode();\n    const { size, disabled, open } = useContext(SelectContext);\n\n    const ref = useForwardedRef(forwardedRef, null);\n\n    const availableSpace = useAvailableSpace(referenceElement, menuMargin);\n    const maxHeightValue = !isUndefined(availableSpace)\n      ? `${Math.min(availableSpace, maxMenuHeight)}px`\n      : 'unset';\n\n    const onClick = useCallback(\n      (event: React.MouseEvent) => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n        event.stopPropagation();\n      },\n      [ref],\n    );\n\n    const popoverProps = {\n      popoverZIndex,\n      onEntering,\n      onEnter,\n      onEntered,\n      onExiting,\n      onExit,\n      onExited,\n      ...(usePortal\n        ? {\n            usePortal,\n            portalClassName,\n            portalContainer,\n            portalRef,\n            scrollContainer,\n          }\n        : { usePortal }),\n    };\n\n    return (\n      <Popover\n        active={open && !disabled}\n        spacing={6}\n        align={Align.Bottom}\n        justify={Justify.Start}\n        adjustOnMutation\n        className={cx(popoverClassName, className, {\n          [autoWidthStyles]: dropdownWidthBasis === DropdownWidthBasis.Option,\n        })}\n        refEl={referenceElement}\n        {...popoverProps}\n      >\n        {/* Keyboard events handled in Select component through event listener hook */}\n        {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events */}\n        <ul\n          data-lgid={LGIDS_SELECT.popover}\n          aria-labelledby={labelId}\n          role=\"listbox\"\n          ref={ref}\n          tabIndex={-1}\n          onClick={onClick}\n          className={cx(\n            baseMenuStyle,\n            getMenuStyles(theme, size),\n            css`\n              max-height: ${maxHeightValue};\n              ${MobileMediaQuery} {\n                font-size: ${mobileSizeSet.option.text}px;\n              }\n            `,\n          )}\n          id={id}\n        >\n          {children}\n        </ul>\n      </Popover>\n    );\n  },\n);\n\nListMenu.displayName = 'ListMenu';\n\nexport default ListMenu;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  color,\n  focusRing,\n  fontWeights,\n  hoverRing,\n  Size,\n  spacing,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nimport { State } from '../Select/Select.types';\n\nexport const menuButtonTextClassName = createUniqueClassName('select-menu');\n\nexport const menuButtonStyleOverrides = css`\n  // Override button defaults\n  font-weight: ${fontWeights.regular};\n  > *:last-child {\n    grid-template-columns: 1fr 16px;\n    justify-content: flex-start;\n\n    > svg {\n      justify-self: right;\n      width: 16px;\n      height: 16px;\n    }\n  }\n`;\n\nexport const menuButtonSizeStyle: Record<Size, string> = {\n  [Size.Default]: css`\n    > *:last-child {\n      padding: 0 ${spacing[200]}px 0 ${spacing[300]}px;\n    }\n  `,\n  [Size.Large]: css`\n    > *:last-child {\n      padding: 0 ${spacing[200]}px 0 ${spacing[300]}px;\n    }\n  `,\n  [Size.Small]: css`\n    > *:last-child {\n      padding: 0 ${spacing[100]}px 0 ${spacing[200]}px;\n    }\n  `,\n  [Size.XSmall]: css`\n    text-transform: none;\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n    > *:last-child {\n      padding: 0 ${spacing[100]}px 0 ${spacing[200]}px;\n    }\n  `,\n};\n\nexport const menuButtonModeOverrides: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${color.light.background.primary.default};\n    // Override button default color\n    > *:last-child {\n      > svg {\n        color: ${color.light.icon.primary.default};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    border-color: ${color.dark.border.primary.default};\n    background-color: ${palette.gray.dark4};\n    color: ${color.dark.text.primary.default};\n\n    // Override button default color\n    > *:last-child {\n      > svg {\n        color: ${color.dark.icon.primary.default};\n      }\n    }\n\n    &:hover,\n    &:active,\n    &:focus {\n      background-color: ${palette.gray.dark4};\n      color: ${color.dark.text.primary.hover};\n    }\n  `,\n};\n\n// Override default button focus styles\nexport const menuButtonFocusStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    &:focus-visible {\n      box-shadow: ${focusRing['light'].input};\n      border-color: rgba(255, 255, 255, 0);\n    }\n  `,\n  [Theme.Dark]: css`\n    &:focus-visible {\n      background-color: ${palette.gray.dark4};\n      box-shadow: ${focusRing['dark'].input};\n      border-color: rgba(255, 255, 255, 0);\n    }\n  `,\n};\n\nexport const menuButtonDeselectedStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.dark1};\n\n    &:hover,\n    &:active,\n    &:focus {\n      color: ${palette.gray.light1};\n    }\n  `,\n};\n\nexport const getMenuButtonDisabledThemeStyles = (theme: Theme) => css`\n  cursor: not-allowed;\n  pointer-events: unset;\n  box-shadow: unset;\n\n  &:active {\n    pointer-events: none;\n  }\n\n  &[aria-disabled='true'] {\n    background-color: ${color[theme].background.disabled.default};\n    border-color: ${color[theme].border.disabled.default};\n    color: ${color[theme].text.disabled.default};\n\n    &:hover,\n    &:active {\n      box-shadow: inherit;\n    }\n\n    > *:last-child {\n      > svg {\n        color: ${color[theme].icon.disabled.default};\n      }\n    }\n  }\n`;\n\nexport const menuButtonTextWrapperStyle = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-grow: 1;\n  gap: ${spacing[100]}px;\n  overflow: hidden;\n`;\n\nexport const menuButtonTextStyle = css`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 100%;\n`;\n\nexport const getMenuButtonStateStyles = (theme: Theme) => ({\n  [State.Error]: css`\n    border-color: ${color[theme].border.error.default};\n\n    &:hover,\n    &:active {\n      border-color: ${color[theme].border.error.hover};\n      box-shadow: ${hoverRing[theme].red};\n    }\n  `,\n  [State.None]: css``,\n  [State.Valid]: css`\n    border-color: ${color[theme].border.success.default};\n\n    &:hover,\n    &:active {\n      border-color: ${color[theme].border.success.hover};\n      box-shadow: ${hoverRing[theme].green};\n    }\n  `,\n});\n","import React, { useCallback, useContext } from 'react';\n\nimport Button, { Size as ButtonSize, Variant } from '@leafygreen-ui/button';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport CaretDownIcon from '@leafygreen-ui/icon/dist/CaretDown';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { Theme } from '@leafygreen-ui/lib';\n\nimport { LGIDS_SELECT } from '../constants';\nimport { State } from '../Select/Select.types';\nimport SelectContext from '../SelectContext';\nimport { mobileSizeSet } from '../styleSets';\nimport { MobileMediaQuery, useForwardedRef } from '../utils/utils';\n\nimport {\n  getMenuButtonDisabledThemeStyles,\n  getMenuButtonStateStyles,\n  menuButtonDeselectedStyles,\n  menuButtonFocusStyle,\n  menuButtonModeOverrides,\n  menuButtonSizeStyle,\n  menuButtonStyleOverrides,\n  menuButtonTextClassName,\n  menuButtonTextStyle,\n  menuButtonTextWrapperStyle,\n} from './MenuButton.styles';\nimport { MenuButtonProps } from './MenuButton.types';\n\n/**\n * @internal\n */\nconst MenuButton = React.forwardRef<HTMLButtonElement, MenuButtonProps>(\n  function MenuButton(\n    {\n      children,\n      value,\n      text,\n      name,\n      deselected,\n      readOnly,\n      onClose,\n      onOpen,\n      state,\n      baseFontSize,\n      __INTERNAL__menuButtonSlot__,\n      __INTERNAL__menuButtonSlotProps__,\n      ...rest\n    }: MenuButtonProps,\n    forwardedRef,\n  ) {\n    const { theme } = useDarkMode();\n    const { open, size, disabled } = useContext(SelectContext);\n\n    const ref = useForwardedRef(forwardedRef, null);\n\n    const onClick = useCallback(() => {\n      if (open) {\n        onClose();\n      } else {\n        onOpen();\n      }\n      ref.current!.focus();\n    }, [onClose, onOpen, open, ref]);\n\n    const Component = __INTERNAL__menuButtonSlot__\n      ? __INTERNAL__menuButtonSlot__\n      : Button;\n\n    const buttonClassName = __INTERNAL__menuButtonSlot__\n      ? ''\n      : cx(\n          menuButtonStyleOverrides,\n          menuButtonModeOverrides[theme],\n          menuButtonSizeStyle[size],\n          menuButtonFocusStyle[theme],\n          {\n            [getMenuButtonStateStyles(theme)[state || State.None]]: !!state,\n            [menuButtonDeselectedStyles[theme]]: deselected,\n            [getMenuButtonDisabledThemeStyles(theme)]: disabled,\n            [css`\n              letter-spacing: initial;\n            `]: size === ButtonSize.XSmall,\n          },\n          css`\n            width: 100%;\n            ${MobileMediaQuery} {\n              height: ${mobileSizeSet.height}px;\n              font-size: ${mobileSizeSet.text}px;\n            }\n          `,\n        );\n\n    const testId =\n      (rest as any)['data-testid'] ?? 'leafygreen-ui-select-menubutton';\n\n    return (\n      <Component\n        {...rest}\n        {...__INTERNAL__menuButtonSlotProps__}\n        ref={ref}\n        name={name}\n        value={value}\n        disabled={disabled}\n        onClick={onClick}\n        variant={Variant.Default}\n        darkMode={theme === Theme.Dark}\n        rightGlyph={<CaretDownIcon />}\n        size={size}\n        data-testid={testId}\n        className={cx(\n          buttonClassName,\n          {\n            [css`\n              font-size: ${baseFontSize}px;\n            `]: size === ButtonSize.Default,\n          },\n          __INTERNAL__menuButtonSlotProps__?.className,\n        )}\n      >\n        <div className={menuButtonTextWrapperStyle}>\n          <div\n            data-lgid={LGIDS_SELECT.buttonText}\n            className={cx(menuButtonTextClassName, menuButtonTextStyle)}\n          >\n            {text}\n          </div>\n        </div>\n        {children}\n      </Component>\n    );\n  },\n);\n\nMenuButton.displayName = 'MenuButton';\n\nexport default MenuButton;\n","import { css } from '@leafygreen-ui/emotion';\nimport { spacing, typeScales } from '@leafygreen-ui/tokens';\n\nexport const labelDescriptionContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: ${spacing[1]}px;\n`;\n\nexport const wrapperStyle = css`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const largeLabelStyles = css`\n  font-size: ${typeScales.large.fontSize}px;\n  line-height: ${typeScales.large.lineHeight}px;\n`;\n","import React, {\n  ComponentProps,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  WeakValidationMap,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { DEFAULT_MESSAGES, FormFieldFeedback } from '@leafygreen-ui/form-field';\nimport {\n  useEventListener,\n  useForwardedRef,\n  useIdAllocator,\n  useViewportSize,\n} from '@leafygreen-ui/hooks';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { keyMap } from '@leafygreen-ui/lib';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport { Description, Label } from '@leafygreen-ui/typography';\n\nimport { LGIDS_SELECT } from '../constants';\nimport ListMenu from '../ListMenu';\nimport MenuButton from '../MenuButton';\nimport { InternalOption, OptionElement } from '../Option';\nimport SelectContext from '../SelectContext';\nimport { mobileSizeSet } from '../styleSets';\nimport {\n  convertToInternalElements,\n  getOptionValue,\n  isOptionDisabled,\n  isOptionSelectable,\n  MobileMediaQuery,\n  reconcileOption,\n  traverseSelectChildren,\n  useStateRef,\n} from '../utils/utils';\n\nimport {\n  labelDescriptionContainerStyle,\n  largeLabelStyles,\n  wrapperStyle,\n} from './Select.styles';\nimport { DropdownWidthBasis, SelectProps, Size, State } from './Select.types';\n\n/**\n * Select inputs are typically used alongside other form elements like toggles, radio boxes, or text inputs when a user needs to make a selection from a list of items.\n *\n * In a select input where there are less than 3-4 items, consider using radio boxes, or radio inputs instead.\n */\nexport const Select = forwardRef<HTMLDivElement, SelectProps>(\n  (\n    {\n      children,\n      darkMode: darkModeProp,\n      size = Size.Default,\n      disabled = false,\n      allowDeselect = true,\n      usePortal = true,\n      placeholder = 'Select',\n      errorMessage = DEFAULT_MESSAGES.error,\n      successMessage = DEFAULT_MESSAGES.success,\n      state = State.None,\n      dropdownWidthBasis = DropdownWidthBasis.Trigger,\n      baseFontSize = BaseFontSize.Body1,\n      'data-lgid': dataLgId = LGIDS_SELECT.root,\n      id: idProp,\n      'aria-labelledby': ariaLabelledby,\n      'aria-label': ariaLabel,\n      className,\n      label,\n      description,\n      name,\n      defaultValue,\n      value,\n      onChange,\n      readOnly,\n      portalContainer,\n      portalRef,\n      scrollContainer,\n      portalClassName,\n      popoverZIndex,\n      onEntering,\n      onEnter,\n      onEntered,\n      onExiting,\n      onExit,\n      onExited,\n      __INTERNAL__menuButtonSlot__,\n      ...rest\n    },\n    fwdRef,\n  ) => {\n    const id = useIdAllocator({ prefix: 'select', id: idProp });\n    const labelId = useMemo(\n      () => (ariaLabel && !label ? undefined : ariaLabelledby ?? `${id}-label`),\n      [ariaLabelledby, ariaLabel, label, id],\n    );\n\n    if (!label && !ariaLabelledby && !ariaLabel) {\n      console.error(\n        'For screen-reader accessibility, label, aria-label, or aria-labelledby must be provided to Select.',\n      );\n    }\n\n    const { darkMode } = useDarkMode(darkModeProp);\n\n    const descriptionId = `${id}-description`;\n    const menuId = `${id}-menu`;\n\n    const [open, setOpen] = useState(false);\n\n    const containerRef = useForwardedRef(fwdRef, null);\n    const menuButtonRef = useStateRef<HTMLButtonElement>(null);\n    const menuButtonId = useIdAllocator({ prefix: 'select' });\n    const listMenuRef = useStateRef<HTMLUListElement | null>(null);\n\n    const providerData = useMemo(() => {\n      return { size, open, disabled };\n    }, [size, open, disabled]);\n\n    useEffect(() => {\n      if (value !== undefined && onChange === undefined && readOnly !== true) {\n        console.warn(\n          'You provided a `value` prop to a form field without an `onChange` handler. ' +\n            'This will render a read-only field. ' +\n            'If the field should be mutable use `defaultValue`. ' +\n            'Otherwise, set either `onChange` or `readOnly`.',\n        );\n      }\n    }, [onChange, readOnly, value]);\n\n    /**\n     * Open / close state\n     */\n    const onOpen = useCallback(() => {\n      setOpen(true);\n    }, []);\n\n    const onClose = useCallback(() => {\n      setOpen(false);\n      menuButtonRef.current!.focus();\n    }, [menuButtonRef]);\n\n    useEffect(() => {\n      if (!open) {\n        return;\n      }\n\n      const onClickOutside = (event: MouseEvent) => {\n        const stillFocused =\n          menuButtonRef.current!.contains(event.target as Node) ||\n          listMenuRef.current!.contains(event.target as Node);\n        setOpen(stillFocused);\n      };\n\n      document.addEventListener('mousedown', onClickOutside);\n      return () => {\n        document.removeEventListener('mousedown', onClickOutside);\n      };\n    }, [listMenuRef, menuButtonRef, open]);\n\n    const initialUncontrolledSelectedOption = useMemo(() => {\n      let initialUncontrolledSelectedOption: OptionElement | null = null;\n\n      if (value === undefined && defaultValue !== undefined) {\n        traverseSelectChildren(children, (option, group) => {\n          if (isOptionSelectable(option, group, defaultValue)) {\n            initialUncontrolledSelectedOption = option;\n          }\n        });\n      }\n\n      return initialUncontrolledSelectedOption;\n    }, [children, defaultValue, value]);\n\n    /**\n     * Selection\n     */\n\n    // We store the option element instance rather than just the value in order\n    // to differentiate between multiple options that have the same value.\n    const [uncontrolledSelectedOption, setUncontrolledSelectedOption] =\n      useState<OptionElement | null>(initialUncontrolledSelectedOption);\n\n    // If the option instances have changed we'll do our best to preserve\n    // the state by checking if any of the new option instances sufficiently\n    // match the current state and use it instead.\n    useEffect(() => {\n      if (uncontrolledSelectedOption !== null) {\n        setUncontrolledSelectedOption(\n          reconcileOption(children, uncontrolledSelectedOption) ??\n            initialUncontrolledSelectedOption,\n        );\n      }\n    }, [\n      children,\n      initialUncontrolledSelectedOption,\n      uncontrolledSelectedOption,\n    ]);\n\n    const selectedOption = useMemo(() => {\n      if (value !== undefined) {\n        let selectedOption: OptionElement | null = null;\n\n        traverseSelectChildren(children, (option, group) => {\n          if (isOptionSelectable(option, group, value)) {\n            selectedOption = option;\n          }\n        });\n        return selectedOption;\n      } else {\n        return uncontrolledSelectedOption;\n      }\n    }, [children, uncontrolledSelectedOption, value]);\n\n    const onSelect = useCallback(\n      (\n        option: OptionElement | null,\n        event: React.MouseEvent | KeyboardEvent,\n      ) => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (value === undefined) {\n          setUncontrolledSelectedOption(option);\n        }\n        onChange?.(getOptionValue(option), event);\n        setFocusedOption(undefined);\n        onClose();\n      },\n      [onChange, onClose, value],\n    );\n\n    const getOptionClickHandler = useCallback(\n      (option: OptionElement | null, optionDisabled: boolean) => {\n        return (event: React.MouseEvent) => {\n          event.preventDefault();\n          event.stopPropagation();\n\n          if (!disabled && !optionDisabled) {\n            onSelect(option, event);\n            onClose();\n          }\n        };\n      },\n      [disabled, onClose, onSelect],\n    );\n\n    /**\n     * Focus\n     */\n\n    const [focusedOption, setFocusedOption] = useState<\n      OptionElement | null | undefined\n    >();\n\n    const enabledOptions = useMemo(() => {\n      const enabledOptions: Array<OptionElement | null> = [];\n\n      if (allowDeselect) {\n        enabledOptions.push(null);\n      }\n\n      traverseSelectChildren(children, (option, group) => {\n        if (!isOptionDisabled(option, group)) {\n          enabledOptions.push(option);\n        }\n      });\n\n      return enabledOptions;\n    }, [children, allowDeselect]);\n\n    const onSelectFocusedOption = useCallback(\n      (event: KeyboardEvent) => {\n        if (focusedOption !== undefined) {\n          onSelect(focusedOption, event);\n        }\n      },\n      [focusedOption, onSelect],\n    );\n\n    const onFocusFirstOption = useCallback(() => {\n      setFocusedOption(enabledOptions[0]);\n    }, [enabledOptions]);\n\n    const onFocusLastOption = useCallback(() => {\n      setFocusedOption(enabledOptions[enabledOptions.length - 1]);\n    }, [enabledOptions]);\n\n    const onFocusPreviousOption = useCallback(() => {\n      if (\n        focusedOption === undefined ||\n        enabledOptions.indexOf(focusedOption) === 0\n      ) {\n        onFocusLastOption();\n      } else {\n        const index = enabledOptions.indexOf(focusedOption) - 1;\n        setFocusedOption(enabledOptions[index]);\n      }\n    }, [enabledOptions, focusedOption, onFocusLastOption]);\n\n    const onFocusNextOption = useCallback(() => {\n      if (\n        focusedOption === undefined ||\n        enabledOptions.indexOf(focusedOption) === enabledOptions.length - 1\n      ) {\n        onFocusFirstOption();\n      } else {\n        const index = enabledOptions.indexOf(focusedOption) + 1;\n\n        setFocusedOption(enabledOptions[index]);\n      }\n    }, [enabledOptions, focusedOption, onFocusFirstOption]);\n\n    const getOptionFocusHandler = useCallback(\n      (option: OptionElement | null, optionDisabled: boolean) => {\n        return (event: React.FocusEvent) => {\n          event.preventDefault();\n          event.stopPropagation();\n\n          if (!disabled && !optionDisabled) {\n            setFocusedOption(option);\n          }\n        };\n      },\n      [disabled],\n    );\n\n    const onKeyDown = useCallback(\n      (event: KeyboardEvent) => {\n        // No support for modifiers yet\n        if (event.ctrlKey || event.shiftKey || event.altKey) {\n          return;\n        }\n\n        const isFocusInMenu = listMenuRef.current?.contains(\n          document.activeElement,\n        );\n        const isFocusOnButton = menuButtonRef.current?.contains(\n          document.activeElement,\n        );\n        const isFocusInComponent = isFocusOnButton || isFocusInMenu;\n\n        // We only respond to keypresses if the focus is in the component\n        if (isFocusInComponent) {\n          switch (event.key) {\n            case keyMap.Tab:\n            case keyMap.Escape:\n              onClose();\n              setFocusedOption(undefined);\n              break;\n            case keyMap.Enter:\n            case keyMap.Space:\n              if (open && !isFocusOnButton) {\n                // Default behavior is to use these keys to open the dropdown but we handle that manually\n                event.preventDefault();\n              }\n\n              onSelectFocusedOption(event);\n              break;\n            case keyMap.ArrowUp:\n              if (!open && isFocusOnButton) {\n                onOpen();\n              }\n              event.preventDefault(); // Prevents page scrolling\n              onFocusPreviousOption();\n              break;\n            case keyMap.ArrowDown:\n              if (!open && isFocusOnButton) {\n                onOpen();\n              }\n              event.preventDefault(); // Prevents page scrolling\n              onFocusNextOption();\n              break;\n          }\n        }\n      },\n      [\n        listMenuRef,\n        menuButtonRef,\n        onClose,\n        open,\n        onSelectFocusedOption,\n        onFocusPreviousOption,\n        onFocusNextOption,\n        onOpen,\n      ],\n    );\n\n    useEventListener('keydown', onKeyDown);\n\n    /**\n     * Rendering\n     */\n\n    const viewportSize = useViewportSize();\n\n    const hasGlyphs = useMemo(() => {\n      let hasGlyphs = false;\n\n      traverseSelectChildren(children, option => {\n        hasGlyphs ||= option.props.glyph !== undefined;\n      });\n\n      return hasGlyphs;\n    }, [children]);\n\n    const canTriggerScrollIntoView = useMemo(\n      () =>\n        viewportSize !== null &&\n        listMenuRef.current !== null &&\n        focusedOption === undefined &&\n        open,\n      [focusedOption, listMenuRef, open, viewportSize],\n    );\n\n    const deselectionOption = useMemo(() => {\n      const selected = selectedOption === null;\n\n      return (\n        <InternalOption\n          className={undefined}\n          glyph={undefined}\n          selected={selected}\n          focused={focusedOption === null}\n          disabled={false}\n          onClick={getOptionClickHandler(null, false)}\n          onFocus={getOptionFocusHandler(null, false)}\n          hasGlyphs={false}\n          triggerScrollIntoView={selected && canTriggerScrollIntoView}\n        >\n          {placeholder}\n        </InternalOption>\n      );\n    }, [\n      canTriggerScrollIntoView,\n      focusedOption,\n      getOptionClickHandler,\n      getOptionFocusHandler,\n      placeholder,\n      selectedOption,\n    ]);\n\n    const renderedChildren = useMemo(\n      () =>\n        convertToInternalElements(\n          children,\n          (option, group) => {\n            const selected = option === selectedOption;\n            const disabled = isOptionDisabled(option, group);\n\n            return {\n              ...option.props,\n              className: option.props.className,\n              glyph: option.props.glyph,\n              selected,\n              focused: option === focusedOption,\n              disabled,\n              children: option.props.children,\n              hasGlyphs,\n              onClick: getOptionClickHandler(option, disabled),\n              onFocus: getOptionFocusHandler(option, disabled),\n              triggerScrollIntoView: selected && canTriggerScrollIntoView,\n            };\n          },\n          () => {\n            console.error(\n              '`Select` instance received child that is not `Option` or `OptionGroup`.',\n            );\n          },\n        ),\n      [\n        canTriggerScrollIntoView,\n        children,\n        focusedOption,\n        getOptionClickHandler,\n        getOptionFocusHandler,\n        hasGlyphs,\n        selectedOption,\n      ],\n    );\n\n    const popoverProps = {\n      popoverZIndex,\n      onEntering,\n      onEnter,\n      onEntered,\n      onExiting,\n      onExit,\n      onExited,\n      ...(usePortal\n        ? {\n            usePortal,\n            portalClassName,\n            portalContainer,\n            portalRef,\n            scrollContainer,\n          }\n        : { usePortal }),\n    };\n\n    return (\n      <LeafyGreenProvider darkMode={darkMode}>\n        <div\n          ref={containerRef}\n          className={cx(wrapperStyle, className)}\n          data-lgid={dataLgId}\n        >\n          {(label || description) && (\n            <div className={labelDescriptionContainerStyle}>\n              {label && (\n                <Label\n                  htmlFor={menuButtonId}\n                  id={labelId}\n                  darkMode={darkMode}\n                  disabled={disabled}\n                  className={cx(\n                    {\n                      [largeLabelStyles]: size === Size.Large,\n                      [css`\n                        font-size: ${baseFontSize}px;\n                        line-height: 20px;\n                      `]: size === Size.Default,\n                    },\n                    css`\n                      // Prevent hover state from showing when hovering label\n                      pointer-events: none;\n                    `,\n                    css`\n                      ${MobileMediaQuery} {\n                        font-size: ${mobileSizeSet.label.text}px;\n                        line-height: ${mobileSizeSet.label.lineHeight}px;\n                      }\n                    `,\n                  )}\n                >\n                  {label}\n                </Label>\n              )}\n\n              {description && (\n                <Description\n                  id={descriptionId}\n                  darkMode={darkMode}\n                  disabled={disabled}\n                  className={cx(\n                    {\n                      [largeLabelStyles]: size === Size.Large,\n                      [css`\n                        font-size: ${baseFontSize}px;\n                        line-height: 20px;\n                      `]: size === Size.Default,\n                    },\n                    css`\n                      ${MobileMediaQuery} {\n                        font-size: ${mobileSizeSet.description.text}px;\n                        line-height: ${mobileSizeSet.description.lineHeight}px;\n                      }\n                    `,\n                  )}\n                >\n                  {description}\n                </Description>\n              )}\n            </div>\n          )}\n\n          <SelectContext.Provider value={providerData}>\n            <MenuButton\n              {...rest}\n              id={menuButtonId}\n              ref={menuButtonRef}\n              name={name}\n              readOnly={readOnly}\n              value={getOptionValue(selectedOption)}\n              text={\n                selectedOption !== null\n                  ? selectedOption.props.children\n                  : placeholder\n              }\n              deselected={selectedOption === null}\n              onOpen={onOpen}\n              onClose={onClose}\n              aria-labelledby={labelId}\n              aria-label={!label && !ariaLabelledby ? ariaLabel : undefined}\n              aria-controls={menuId}\n              aria-expanded={open}\n              aria-describedby={descriptionId}\n              aria-invalid={state === State.Error}\n              aria-disabled={disabled}\n              state={state}\n              baseFontSize={baseFontSize}\n              __INTERNAL__menuButtonSlot__={__INTERNAL__menuButtonSlot__}\n            >\n              <ListMenu\n                labelId={labelId}\n                id={menuId}\n                referenceElement={menuButtonRef}\n                ref={listMenuRef}\n                className={cx({\n                  [css`\n                    width: ${menuButtonRef.current?.clientWidth}px;\n                  `]: dropdownWidthBasis === DropdownWidthBasis.Trigger,\n                })}\n                dropdownWidthBasis={dropdownWidthBasis}\n                {...popoverProps}\n              >\n                {allowDeselect && deselectionOption}\n                {renderedChildren}\n              </ListMenu>\n            </MenuButton>\n          </SelectContext.Provider>\n          <FormFieldFeedback\n            disabled={disabled}\n            errorMessage={errorMessage}\n            hideFeedback={open}\n            size={size}\n            state={state}\n            successMessage={successMessage}\n          />\n        </div>\n      </LeafyGreenProvider>\n    );\n  },\n);\n\nSelect.displayName = 'Select';\n\nSelect.propTypes = {\n  label: PropTypes.string,\n  'aria-labelledby': PropTypes.string,\n  'aria-label': PropTypes.string,\n  description: PropTypes.node,\n  placeholder: PropTypes.string,\n  className: PropTypes.string,\n  darkMode: PropTypes.bool,\n  size: PropTypes.oneOf(Object.values(Size)),\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  readOnly: PropTypes.bool,\n  errorMessage: PropTypes.node,\n  successMessage: PropTypes.node,\n  state: PropTypes.oneOf(Object.values(State)),\n  allowDeselect: PropTypes.bool,\n  baseFontSize: PropTypes.oneOf(Object.values(BaseFontSize)),\n  dropdownWidthBasis: PropTypes.oneOf(Object.values(DropdownWidthBasis)),\n  portalRef: PropTypes.shape({\n    current:\n      typeof window !== 'undefined'\n        ? PropTypes.instanceOf(Element)\n        : PropTypes.any,\n  }),\n} as WeakValidationMap<ComponentProps<typeof Select>>;\n","import { getByLgId, queryBySelector } from '@lg-tools/test-harnesses';\n\nimport { LGIDS_FORM_FIELD } from '@leafygreen-ui/form-field';\nimport { transitionDuration } from '@leafygreen-ui/tokens';\nimport { LGIDS_TYPOGRAPHY } from '@leafygreen-ui/typography';\n\nimport { LGIDS_SELECT } from '../../constants';\n\nimport { TestUtilsReturnType } from './getTestUtils.types';\n\nexport function waitForSelectTransitionDuration() {\n  return new Promise(res => setTimeout(res, transitionDuration.slower));\n}\n\nexport const getTestUtils = (\n  lgId: string = LGIDS_SELECT.root,\n): TestUtilsReturnType => {\n  /**\n   * Queries the DOM for the element using the `data-lgid` data attribute.\n   * Will throw if no element is found.\n   */\n  const element = getByLgId!(lgId);\n\n  /**\n   * Queries the `element` for the label element. Will return `null` if the label is not found.\n   */\n  const getLabel = queryBySelector<HTMLLabelElement>(\n    element,\n    `[data-lgid=${LGIDS_TYPOGRAPHY.label}]`,\n  );\n\n  /**\n   * Queries the `element` for the description element. Will return `null` if the desription is not found.\n   */\n  const getDescription = queryBySelector<HTMLElement>(\n    element,\n    `[data-lgid=${LGIDS_TYPOGRAPHY.description}]`,\n  );\n\n  /**\n   * Queries the `element` for the input element.\n   */\n  const getSelectTrigger = queryBySelector<HTMLButtonElement>(\n    element,\n    'button',\n  ) as HTMLButtonElement;\n\n  /**\n   * Queries the `element` for the error message element. Will return `null` if the error message is not found.\n   */\n  const getErrorMessage = queryBySelector<HTMLElement>(\n    element,\n    `[data-lgid=${LGIDS_FORM_FIELD.errorMessage}]`,\n  );\n\n  /**\n   * Queries the `element` for aria-disabled.\n   */\n  const isInputDisabled = () => {\n    const ariaDisabled = queryBySelector<HTMLElement>(\n      element,\n      '[aria-disabled=\"true\"]',\n    );\n\n    return !!ariaDisabled;\n  };\n\n  /**\n   * Returns the `Select` value.\n   * We have to narrow the container to the text container since `Select`'s without a portal are rendered as children of the `button`.\n   */\n  const getSelectValue = () => {\n    const selectTriggerTextContainer = queryBySelector<HTMLDivElement>(\n      getSelectTrigger,\n      `[data-lgid=${LGIDS_SELECT.buttonText}]`,\n    ) as HTMLDivElement;\n    return selectTriggerTextContainer.textContent || '';\n  };\n\n  /**\n   * Queries the `element` for the warning Icon.\n   */\n  const isError = () => {\n    const warningIcon = queryBySelector<SVGElement>(\n      element,\n      'svg[title=\"Error\"]',\n    );\n\n    return !!warningIcon;\n  };\n\n  // We cannot query within the select element because if the popover is using a portal, the element will render outside the select element\n  const getPopover = () =>\n    queryBySelector<HTMLDivElement>(\n      document.body,\n      `[data-lgid=${LGIDS_SELECT.popover}]`,\n    );\n\n  const getAllOptions = (): Array<HTMLLIElement> => {\n    // only one select popover should be open at a time\n    const popover = getPopover();\n\n    if (!popover)\n      throw new Error(\n        `Unable to find an element by: [data-lgid=${LGIDS_SELECT.popover}]`,\n      );\n\n    // Find all options\n    const allOptions =\n      popover.querySelectorAll<HTMLLIElement>('[role=\"option\"]');\n\n    // unlikley to happen since the select will not render without options\n    if (!allOptions.length)\n      throw new Error('Unable to find any `Select` options.');\n\n    return Array.from(allOptions);\n  };\n\n  const getOptionByValue = (value: string) => {\n    if (!value) throw new Error('Value cannot be empty');\n\n    const allOptions = getAllOptions();\n\n    // Find the option with the value\n    const option = allOptions.find(node => node.textContent === value);\n\n    if (!option) return null;\n\n    return option;\n  };\n\n  return {\n    getLabel: () => getLabel,\n    getDescription: () => getDescription,\n    getInput: () => getSelectTrigger,\n    getErrorMessage: () => getErrorMessage,\n    getOptions: () => getAllOptions(),\n    getOptionByValue: (value: string) => getOptionByValue(value),\n    getPopover: () => getPopover(),\n    isDisabled: () => isInputDisabled(),\n    isError: () => isError(),\n    getInputValue: () => getSelectValue(),\n  };\n};\n"],"names":["LGID_ROOT","LGIDS_SELECT","root","errorMessage","concat","popover","buttonText","_templateObject","_templateObject2","_templateObject3","Size","XSmall","Small","Default","Large","State","FormFieldState","DropdownWidthBasis","Trigger","Option","SelectContext","createContext","size","open","disabled","colorSets","_defineProperty","Theme","Light","menu","border","palette","gray","light2","shadow","transparentize","black","option","group","label","dark1","background","base","white","hovered","focused","blue","light3","text","dark3","selected","dark2","icon","indicator","Dark","dark4","light1","sizeSets","height","warningIcon","mobileSizeSet","lineHeight","OptionClassName","createUniqueClassName","_excluded","InternalOption","_ref","children","className","glyph","onClick","onFocus","triggerScrollIntoView","hasGlyphs","description","rest","_objectWithoutProperties","theme","useDarkMode","colorSet","ref","useRef","scrollIntoView","useCallback","current","element","parent","offsetParent","scrollTop","offsetTop","clientHeight","alreadyScrolledIntoView","usePrevious","shouldScrollIntoView","useEffect","wasFocused","shouldFocus","focus","isComponentGlyph","console","error","glyphProp","undefined","checkmark","React","createElement","CheckmarkIcon","key","cx","css","_taggedTemplateLiteral","leftGlyph","rightGlyph","InputOption","_extends","role","tabIndex","onKeyDown","checked","highlighted","InputOptionContent","fontWeights","bold","_","Error","displayName","propTypes","PropTypes","node","isRequired","string","value","bool","optionGroupStyle","spacing","optionGroupLabelStyle","InternalOptionGroup","groupId","useIdAllocator","prefix","id","OptionGroup","oneOfType","arrayOf","oneOf","_baseQuery","breakpoints","Tablet","MobileMediaQuery","isReactEmpty","traverseSelectChildren","optionFn","Children","forEach","child","isComponentType","props","isFragment","convertToInternalElements","fallbackFn","toArray","every","consoleOnce","warn","map","_child$props","_options","getOptionValue","Array","isArray","filter","join","toString","isOptionDisabled","_option$props$disable","_group$props$disabled","_group$props","isOptionSelectable","useObservedRef","callback","_ref4","arguments","length","initialValue","_ref4$deps","deps","useMemo","nextValue","_toConsumableArray","useForwardedRef","forwardedRefOrRefs","forwardValueToRefs","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","_templateObject17","useStateRef","_useState2","_slicedToArray","useState","popoverClassName","menuMargin","baseMenuStyle","autoWidthStyles","getMenuStyles","sizeSet","color","primary","default","secondary","ListMenu","forwardRef","forwardedRef","referenceElement","labelId","dropdownWidthBasis","_ref$usePortal","usePortal","portalContainer","portalRef","scrollContainer","portalClassName","popoverZIndex","onEntering","onEnter","onEntered","onExiting","onExit","onExited","_useContext","useContext","availableSpace","useAvailableSpace","maxHeightValue","isUndefined","Math","min","event","stopPropagation","popoverProps","_objectSpread","Popover","active","align","Align","Bottom","justify","Justify","Start","adjustOnMutation","refEl","menuButtonTextClassName","menuButtonStyleOverrides","regular","menuButtonSizeStyle","typeScales","body1","fontSize","menuButtonModeOverrides","light","dark","hover","menuButtonFocusStyle","focusRing","input","menuButtonDeselectedStyles","menuButtonTextWrapperStyle","menuButtonTextStyle","MenuButton","_dataTestid","name","deselected","readOnly","onClose","onOpen","state","baseFontSize","__INTERNAL__menuButtonSlot__","__INTERNAL__menuButtonSlotProps__","Component","Button","buttonClassName","hoverRing","red","None","Valid","success","green","getMenuButtonStateStyles","getMenuButtonDisabledThemeStyles","ButtonSize","testId","variant","Variant","darkMode","CaretDownIcon","labelDescriptionContainerStyle","wrapperStyle","largeLabelStyles","large","Select","fwdRef","_menuButtonRef$curren2","darkModeProp","_ref$size","_ref$disabled","_ref$allowDeselect","allowDeselect","_ref$placeholder","placeholder","_ref$errorMessage","DEFAULT_MESSAGES","_ref$successMessage","successMessage","_ref$state","_ref$dropdownWidthBas","_ref$baseFontSize","BaseFontSize","Body1","_ref$dataLgid","dataLgId","idProp","ariaLabelledby","ariaLabel","defaultValue","onChange","descriptionId","menuId","setOpen","containerRef","menuButtonRef","menuButtonId","listMenuRef","providerData","onClickOutside","stillFocused","contains","target","document","addEventListener","removeEventListener","initialUncontrolledSelectedOption","_useState4","uncontrolledSelectedOption","setUncontrolledSelectedOption","_reconcileOption","previousOption","_ref2","_ref3","_sameInstance","sameInstance","sameChildrenAndValue","sameExplicitValue","sameValue","_sameChildrenAndValue","_sameExplicitValue","_sameValue","reconcileOption","selectedOption","_selectedOption","onSelect","preventDefault","setFocusedOption","getOptionClickHandler","optionDisabled","_useState6","focusedOption","enabledOptions","push","onSelectFocusedOption","onFocusFirstOption","onFocusLastOption","onFocusPreviousOption","indexOf","index","onFocusNextOption","getOptionFocusHandler","_listMenuRef$current","_menuButtonRef$curren","ctrlKey","shiftKey","altKey","isFocusInMenu","activeElement","isFocusOnButton","keyMap","Tab","Escape","Enter","Space","ArrowUp","ArrowDown","useEventListener","viewportSize","useViewportSize","canTriggerScrollIntoView","deselectionOption","renderedChildren","LeafyGreenProvider","Label","htmlFor","Description","Provider","clientWidth","FormFieldFeedback","hideFeedback","Object","values","func","shape","window","instanceOf","Element","any","getTestUtils","getByLgId","_getLabel","queryBySelector","LGIDS_TYPOGRAPHY","_getDescription","getSelectTrigger","_getErrorMessage","LGIDS_FORM_FIELD","_getPopover","body","getAllOptions","allOptions","querySelectorAll","from","getLabel","getDescription","getInput","getErrorMessage","getOptions","getOptionByValue","find","textContent","_getOptionByValue","getPopover","isDisabled","isError","getInputValue"],"mappings":"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"}