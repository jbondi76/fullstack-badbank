{"version":3,"file":"index.js","sources":["../src/SegmentedControl/SegmentedControl.types.ts","../src/SegmentedControl/SegmentedControl.styles.ts","../src/SegmentedControlContext.tsx","../src/SegmentedControl/SegmentedControl.tsx","../src/useEffectOnceOnMount.tsx","../src/SegmentedControlOption/SegmentedControlOption.styles.ts","../src/SegmentedControlOption/SegmentedControlOption.tsx"],"sourcesContent":["import React from 'react';\n\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\n\nexport const DeprecatedSize = {\n  /** @deprecated */\n  Small: 'small',\n} as const;\n\nexport type DeprecatedSize =\n  (typeof DeprecatedSize)[keyof typeof DeprecatedSize];\n\nexport const Size = {\n  XSmall: 'xsmall',\n  Default: 'default',\n  Large: 'large',\n} as const;\n\nexport type Size = (typeof Size)[keyof typeof Size];\n\nexport interface SegmentedControlProps\n  extends Omit<HTMLElementProps<'div'>, 'onChange'> {\n  /**\n   * Options provided in the segmented control\n   *\n   * @type `<SegmentedControlOption />`\n   */\n  children: React.ReactNode;\n\n  /**\n   * Defines the size of the segmented control. Can be either `xsmall`, `default`, or `large`\n   */\n  size?: Size | DeprecatedSize;\n\n  /**\n   * Toggles dark mode\n   */\n  darkMode?: boolean;\n\n  /**\n   * Defines the default, or initial value of the component. Ignored if `value` is also provided.\n   */\n  defaultValue?: string;\n\n  /**\n   * Controls the value of the component.\n   * If provided, you must update the value in the `onChange` method,\n   * or other user actions (such as routing)\n   */\n  value?: string;\n\n  /**\n   * A text label to the left of the segmented control. Sets the `name` prop if none is provided.\n   */\n  label?: React.ReactNode;\n\n  /**\n   * Identifies the segmented control group to screen readers. Auto-generated if no `name` or `label` is provided.\n   *\n   * It's recommended for accessability to set this to a meaningful value.\n   */\n  name?: string;\n\n  /**\n   * Defines whether the selection should automatically follow focus.\n   * If set to true, the arrow keys can be used to switch selection,\n   * otherwise a keyboard user will need to press enter to make a selection.\n   *\n   * Default: `true`\n   */\n  followFocus?: boolean;\n\n  /**\n   * Identifies the element(s) whose contents/presence is controlled by the segmented control.\n   *\n   * Required as a prop on the control, or on each individual option.\n   */\n  'aria-controls'?: string;\n\n  /**\n   * Callback that gets called when a user makes a new selection.\n   */\n  onChange?: (value: string) => void;\n}\n","import { transparentize } from 'polished';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, transitionDuration } from '@leafygreen-ui/tokens';\n\nimport { Size } from './SegmentedControl.types';\n\nexport const wrapperStyle = css`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  z-index: 0;\n  font-family: ${fontFamilies.default};\n`;\n\nexport const labelBaseStyles = css`\n  white-space: nowrap;\n`;\n\nexport const labelThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light1};\n  `,\n};\n\nexport const optionsWrapperStyleSize: Record<Size, string> = {\n  [Size.XSmall]: css`\n    --segment-gap: 1px; // space between segments\n    --wrapper-padding: 0px;\n    --indicator-height: 100%;\n    --outer-radius: 6px;\n    --indicator-radius: 6px;\n  `,\n  [Size.Default]: css`\n    --segment-gap: 5px; // space between segments\n    --indicator-height: calc(100% - 2 * var(--wrapper-padding));\n    --wrapper-padding: 3px;\n    --outer-radius: 8px;\n    --indicator-radius: 6px;\n  `,\n  [Size.Large]: css`\n    --segment-gap: 5px; // space between segments\n    --indicator-height: calc(100% - 2 * var(--wrapper-padding));\n    --outer-radius: 8px;\n    --wrapper-padding: 3px;\n    --indicator-radius: 6px;\n  `,\n};\n\nexport const optionsWrapperStyleTheme: Record<Theme, string> = {\n  [Theme.Light]: css`\n    --background-color: ${palette.gray.light3};\n    --inner-shadow: 0px 1px 2px ${transparentize(0.7, palette.black)} inset;\n    --outer-shadow: 0px 1px 1px ${palette.gray.light2};\n    --hover-background-color: ${palette.white};\n    --indicator-background-color: ${palette.black};\n    --indicator-border-color: ${palette.black};\n  `,\n  [Theme.Dark]: css`\n    --background-color: ${palette.gray.dark4};\n    --border-color: rgba(255, 255, 255, 0);\n    --inner-shadow: 0px 0px 0px 1px ${palette.gray.dark1} inset;\n    --outer-shadow: 0px 0px 0px 0px rgba(255, 255, 255, 0);\n    --hover-background-color: ${palette.gray.dark3};\n    --indicator-background-color: ${palette.gray.light2};\n    --indicator-border-color: ${palette.gray.light2};\n  `,\n};\n\nexport const optionsWrapperStyle = ({\n  theme,\n  size = 'default',\n}: {\n  theme: Theme;\n  size: Size;\n}) =>\n  cx(\n    optionsWrapperStyleSize[size],\n    optionsWrapperStyleTheme[theme],\n    css`\n      position: relative;\n      display: grid;\n      grid-auto-flow: column;\n      grid-auto-columns: minmax(\n        0,\n        1fr\n      ); // allows the grid tracks to be as small as 0 but as large as 1fr, creating columns that will stay equal\n      gap: var(--segment-gap);\n      align-items: center;\n      padding: var(--wrapper-padding);\n      border-radius: var(--outer-radius);\n      background-color: var(--background-color);\n\n      &:focus {\n        outline: none;\n      }\n\n      // Frame shadow\n      &:after {\n        content: '';\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n        box-shadow: var(--inner-shadow), var(--outer-shadow);\n        z-index: 1;\n        pointer-events: none;\n      }\n    `,\n  );\n\nexport const selectionIndicatorStyle = css`\n  position: absolute;\n  width: 100%;\n  height: var(--indicator-height);\n  z-index: 2;\n  border-radius: var(--indicator-radius);\n  background-color: var(--indicator-background-color);\n  transition: transform ${transitionDuration.default}ms ease-in-out;\n`;\n\nexport const hoverIndicatorStyle = css`\n  position: absolute;\n  height: var(--indicator-height);\n  width: 100%;\n  border-radius: var(--indicator-radius);\n  background-color: var(--hover-background-color);\n  z-index: 0;\n  opacity: 0;\n  transition: opacity 100ms ease-in-out;\n`;\n","import React from 'react';\n\nimport { Theme } from '@leafygreen-ui/lib';\n\nimport { Size } from './SegmentedControl/SegmentedControl.types';\n\ninterface SCContext {\n  size: Size;\n  theme: Theme;\n  name: string;\n  followFocus: boolean;\n}\nexport const SegmentedControlContext = React.createContext<SCContext>({\n  size: Size.Default,\n  theme: Theme.Light,\n  name: '',\n  followFocus: true,\n});\n","import React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport isNull from 'lodash/isNull';\nimport once from 'lodash/once';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useDynamicRefs, useIdAllocator } from '@leafygreen-ui/hooks';\nimport {\n  useDarkMode,\n  useUsingKeyboardContext,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { isComponentType } from '@leafygreen-ui/lib';\nimport { Overline } from '@leafygreen-ui/typography';\n\nimport { SegmentedControlContext } from '../SegmentedControlContext';\nimport { useEffectOnceOnMount } from '../useEffectOnceOnMount';\n\nimport {\n  hoverIndicatorStyle,\n  labelBaseStyles,\n  labelThemeStyle,\n  optionsWrapperStyle,\n  selectionIndicatorStyle,\n  wrapperStyle,\n} from './SegmentedControl.styles';\nimport {\n  DeprecatedSize,\n  SegmentedControlProps,\n  Size,\n} from './SegmentedControl.types';\n\n/**\n * Segmented controls act as a toggle between a current state and related states, often changing the view of information within a single page.\n */\nexport const SegmentedControl = forwardRef<\n  HTMLDivElement,\n  SegmentedControlProps\n>(function SegmentedControl(\n  {\n    children,\n    name: nameProp,\n    size: sizeProp = Size.Default,\n    darkMode: darkModeProp,\n    defaultValue,\n    value: controlledValue,\n    onChange,\n    className,\n    label,\n    followFocus = true,\n    'aria-controls': ariaControls,\n    ...rest\n  }: SegmentedControlProps,\n  forwardedRef,\n) {\n  // TODO: log warning if defaultValue is set but does not match any child value\n  const { usingKeyboard } = useUsingKeyboardContext();\n  const segmentedContainerRef = useRef<null | HTMLDivElement>(null);\n  const [isfocusInComponent, setIsfocusInComponent] = useState<boolean>(false);\n\n  const { theme } = useDarkMode(darkModeProp);\n\n  const getOptionRef = useDynamicRefs<HTMLDivElement>({ prefix: 'option' });\n\n  const name = useIdAllocator({\n    prefix: 'segmented-control',\n    id: nameProp,\n  });\n\n  // If a value is given, then it's controlled\n  const isControlled = useMemo(\n    () => controlledValue != null,\n    [controlledValue],\n  );\n\n  // Keep track of the value internally\n  const [internalValue, setInternalValue] = useState<string | undefined>(\n    defaultValue ?? controlledValue,\n  );\n\n  const [focusedOptionValue, setFocusedOptionValue] = useState<\n    string | undefined\n  >(defaultValue ?? controlledValue);\n\n  // If no default or controlled value is given, set it to the first option\n  useEffectOnceOnMount(() => {\n    const firstChild = React.Children.toArray(children)[0];\n\n    if (\n      !internalValue &&\n      isComponentType(firstChild, 'SegmentedControlOption')\n    ) {\n      setInternalValue(firstChild.props.value);\n      setFocusedOptionValue(firstChild.props.value);\n    }\n  });\n\n  // Check if the organic focus is inside of this component. We'll use this to check if the focus should be programmatically set in SegmentedControlOption.\n  const handleFocusIn = useCallback(() => {\n    if (\n      segmentedContainerRef.current?.contains(\n        document.activeElement as HTMLElement,\n      )\n    ) {\n      setIsfocusInComponent(true);\n    } else {\n      setIsfocusInComponent(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('focusin', handleFocusIn);\n    return () => {\n      document.removeEventListener('focusin', handleFocusIn);\n    };\n  }, [handleFocusIn]);\n\n  useEffect(() => {\n    if (isControlled) {\n      setInternalValue(controlledValue);\n    }\n  }, [controlledValue, isControlled]);\n\n  // Handle value updates\n  const updateValue = useCallback(\n    (value: string) => {\n      if (internalValue !== value) {\n        setInternalValue(value);\n        onChange?.(value);\n      }\n    },\n    [internalValue, onChange],\n  );\n\n  /**\n   * Main render function.\n   * Add internal props to children passed in\n   */\n  const renderedChildren: React.ReactNode = useMemo(\n    () =>\n      React.Children.map(children, (child, index) => {\n        if (child == null) {\n          return child;\n        }\n\n        if (!isComponentType(child, 'SegmentedControlOption')) {\n          errorOnce(\n            `Error in Segmented Control: ${child} is not a SegmentedControlOption`,\n          );\n          return child;\n        }\n\n        // Ensure `aria-controls` is set\n        if (!ariaControls && !child.props['aria-controls']) {\n          warnOnce(\n            `The property \\`aria-controls\\` is required on each Segmented Control option, or on the Segmented Control parent.`,\n          );\n        }\n\n        const _id = child.props.id ?? `${name}-${index}`;\n\n        const _checked: boolean = isControlled\n          ? child.props.value === controlledValue || !!child.props.checked\n          : child.props.value === internalValue;\n\n        const _focused: boolean = child.props.value === focusedOptionValue;\n\n        const _onHover = (hovered: boolean) => {\n          if (hovered) setHoveredIndex(index);\n          else setHoveredIndex(null);\n        };\n\n        return React.cloneElement(child, {\n          _id,\n          _checked,\n          _focused,\n          _index: index,\n          'aria-controls': child.props['aria-controls'] ?? ariaControls,\n          _onClick: updateValue,\n          _onHover,\n          ref: getOptionRef(`${index}`),\n          isfocusInComponent,\n        });\n      }),\n    [\n      children,\n      isControlled,\n      controlledValue,\n      internalValue,\n      focusedOptionValue,\n      name,\n      ariaControls,\n      updateValue,\n      getOptionRef,\n      isfocusInComponent,\n    ],\n  );\n\n  // Maintain a list of child `id`s to link the `tablist` to individual `tab` elements\n  // See https://www.w3.org/TR/wai-aria-1.1/#tab\n  const childrenIdList: string = useMemo(() => {\n    if (renderedChildren) {\n      const ids = React.Children.map(renderedChildren, child => {\n        return (child as React.ReactElement)?.props?._id;\n      })?.join(' ');\n\n      return ids ?? '';\n    }\n\n    return '';\n  }, [renderedChildren]);\n\n  // Keep track of which element is hovered\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  // Keep track of the index of the selected value\n  const selectedIndex = useMemo(\n    () =>\n      (\n        React.Children.toArray(renderedChildren) as Array<React.ReactElement>\n      ).findIndex(child =>\n        isControlled\n          ? child.props.value === controlledValue\n          : child.props.value === internalValue,\n      ),\n    [controlledValue, isControlled, renderedChildren, internalValue],\n  );\n\n  /**\n   * Focus Management\n   */\n\n  // Keep track of the index of the focused value\n  const focusedIndex = useMemo(\n    () =>\n      (\n        React.Children.toArray(renderedChildren) as Array<React.ReactElement>\n      ).findIndex(child => child.props.value === focusedOptionValue),\n    [renderedChildren, focusedOptionValue],\n  );\n\n  const updateFocusedIndex = (newIndex: number): void => {\n    const children = (\n      React.Children.toArray(renderedChildren) as Array<React.ReactElement>\n    ).filter(child => !child.props.disabled);\n    const length = children.length;\n    newIndex =\n      newIndex >= length\n        ? newIndex % length\n        : newIndex < 0\n        ? length + newIndex\n        : newIndex;\n\n    const { value } = children[newIndex].props;\n    setFocusedOptionValue(value);\n  };\n\n  // When the value changes via click, we update the internal focus tracker so the correct element gets focused on tab press\n  useEffect(() => {\n    if (!usingKeyboard) {\n      setFocusedOptionValue(internalValue);\n    }\n  }, [internalValue, usingKeyboard]);\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    // Note: Arrow keys don't fire a keyPress event — need to use keyDown\n    e.stopPropagation();\n    // We only handle right and left arrow keys\n    // Up & down should be left to control scroll\n    switch (e.key) {\n      case 'ArrowRight':\n        updateFocusedIndex(focusedIndex + 1);\n        break;\n      case 'ArrowLeft':\n        updateFocusedIndex(focusedIndex - 1);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * Dynamic Styles.\n   * Dynamically set the size & position of the selection indicator\n   */\n\n  const getIndicatorDynamicStyles = useCallback(\n    (index: number | null = 0) => {\n      if (isNull(index))\n        return css`\n          width: 0;\n        `;\n\n      const count = React.Children.count(renderedChildren);\n      const widthPct = (1 / count) * 100;\n      const transformPct = index * 100;\n\n      return css`\n        opacity: 1;\n        width: calc(${widthPct}% - 2 * var(--wrapper-padding));\n        transform: translateX(\n          calc(${transformPct}% + ${2 * index + 1} * var(--wrapper-padding))\n        );\n      `;\n    },\n    [renderedChildren],\n  );\n\n  // deprecated size \"small\" no longer supported, but we want to gracefully degrade the prop value\n  const size = sizeProp === DeprecatedSize.Small ? Size.XSmall : sizeProp;\n\n  /**\n   * Return\n   */\n  return (\n    <SegmentedControlContext.Provider\n      value={{ size, theme, name, followFocus }}\n    >\n      <div\n        ref={segmentedContainerRef}\n        className={cx(wrapperStyle, className)}\n        {...rest}\n      >\n        {label && (\n          <Overline className={cx(labelBaseStyles, labelThemeStyle[theme])}>\n            {label}\n          </Overline>\n        )}\n\n        <div\n          role=\"tablist\"\n          aria-label={name}\n          aria-owns={childrenIdList}\n          className={cx(optionsWrapperStyle({ theme, size }))}\n          ref={forwardedRef}\n          onKeyDownCapture={handleKeyDown}\n        >\n          {renderedChildren}\n          {/**\n           * The selection and hover indicators are absolutely positioned elements that move underneath the text.\n           * This allows us to achieve the sliding effect.\n           */}\n          <div\n            className={cx(\n              selectionIndicatorStyle,\n              getIndicatorDynamicStyles(selectedIndex),\n            )}\n          />\n          <div\n            className={cx(\n              hoverIndicatorStyle,\n              getIndicatorDynamicStyles(hoveredIndex),\n            )}\n          />\n        </div>\n      </div>\n    </SegmentedControlContext.Provider>\n  );\n});\n\nSegmentedControl.displayName = 'SegmentedControl';\n\nconst errorOnce = once(console.error);\nconst warnOnce = once(console.warn);\n\nSegmentedControl.propTypes = {\n  darkMode: PropTypes.bool,\n  size: PropTypes.oneOf(Object.values(Size)),\n  onChange: PropTypes.func,\n  defaultValue: PropTypes.string,\n  value: PropTypes.string,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  followFocus: PropTypes.bool,\n  className: PropTypes.string,\n};\n","import { useEffect, useRef } from 'react';\n\n/**\n * Runs an effect on the first render only\n * @param effect\n */\nexport function useEffectOnceOnMount(effect: React.EffectCallback): void {\n  const didComponentMount = useRef(false);\n\n  useEffect(() => {\n    if (!didComponentMount.current) {\n      didComponentMount.current = true;\n      effect();\n    }\n  }, [effect]);\n}\n","import { css, cx } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  focusRing,\n  fontFamilies,\n  fontWeights,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nimport { Size } from '../SegmentedControl/SegmentedControl.types';\n\n/**\n * Styles\n */\nexport const optionThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    --base-text-color: ${palette.gray.dark1};\n    --base-background-color: rgba(255, 255, 255, 0);\n    --base-shadow-color: rgba(255, 255, 255, 0);\n    // Hover\n    --hover-text-color: ${palette.gray.dark3};\n    // Selected\n    --active-text-color: ${palette.white};\n    // Disabled\n    --disabled-text-color: ${palette.gray.light1};\n    // Divider\n    --divider-background-color: ${palette.gray.light1};\n  `,\n  [Theme.Dark]: css`\n    --base-text-color: ${palette.gray.light1};\n    --base-background-color: rgba(255, 255, 255, 0);\n    --base-shadow-color: rgba(255, 255, 255, 0);\n    // Hover\n    --hover-text-color: ${palette.gray.light2};\n    // Selected\n    --active-text-color: ${palette.black};\n    // Disabled\n    --disabled-text-color: ${palette.gray.dark2};\n    // Divider\n    --divider-background-color: ${palette.gray.dark2};\n  `,\n};\n\nexport const optionSizeStyle: Record<Size, string> = {\n  [Size.XSmall]: css`\n    --font-size: 12px;\n    --line-height: 16px;\n    --padding-inline: 12px;\n    --text-transform: uppercase;\n    --font-weight: ${fontWeights.bold};\n    --divider-height: 12px;\n    --padding-block: 3px;\n  `,\n  [Size.Default]: css`\n    --font-size: 13px;\n    --line-height: 24px;\n    --padding-inline: 12px; // left/right\n    --text-transform: none;\n    --font-weight: ${fontWeights.medium};\n    --divider-height: 18px;\n    --padding-block: 3px;\n  `,\n  [Size.Large]: css`\n    --font-size: 16px;\n    --line-height: 28px;\n    --padding-inline: 12px;\n    --text-transform: none;\n    --font-weight: ${fontWeights.medium};\n    --divider-height: 20px;\n    --padding-block: 4px;\n  `,\n};\n\nexport const optionStyle = ({\n  theme,\n  size = 'default',\n  baseFontSize = 14,\n}: {\n  theme: Theme;\n  size: Size;\n  baseFontSize: 14 | 16;\n}) =>\n  cx(\n    optionThemeStyle[theme],\n    optionSizeStyle[size],\n    css`\n      position: relative;\n      display: flex;\n      width: 100%;\n      align-items: center;\n      justify-content: center;\n      z-index: 3;\n\n      &:first-child,\n      &[data-lg-checked='true'],\n      &[data-lg-checked='true'] + [data-lg-checked='false'],\n      &:focus-within + :not(:focus-within) {\n        --divider-background-color: transparent;\n      }\n\n      /* \n      * Adds the divider line to unselected segments \n      */\n      &:before {\n        --divider-width: 1px;\n        content: '';\n        position: absolute;\n        height: var(--divider-height);\n        width: var(--divider-width);\n        left: calc(0px - (var(--segment-gap) + var(--divider-width)) / 2);\n        top: calc(\n          (\n              var(--line-height) + var(--padding-block) * 2 -\n                var(--divider-height)\n            ) / 2\n        );\n        transition: background-color ${transitionDuration.default}ms ease-in-out;\n        background-color: var(--divider-background-color);\n      }\n    `,\n    {\n      // Update font size according to baseFontSize\n      [css`\n        --font-size: 16px;\n      `]: size === 'default' && baseFontSize === 16,\n    },\n  );\n\nexport const boxStyle = css`\n  width: 100%;\n  height: 100%;\n  text-decoration: none;\n`;\n\nexport const buttonStyle = css`\n  font-family: ${fontFamilies.default};\n  display: flex;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n  padding: var(--padding-block) var(--padding-inline);\n  background-color: var(--base-background-color);\n  border-radius: var(--indicator-radius);\n  text-align: center;\n  font-size: var(--font-size);\n  line-height: var(--line-height);\n  text-transform: var(--text-transform, none);\n  font-weight: var(--font-weight);\n  color: var(--base-text-color);\n  box-shadow: 0px 1px 2px var(--base-shadow-color);\n  cursor: pointer;\n  transition: ${transitionDuration.default}ms ease-in-out;\n  transition-property: color, box-shadow;\n  text-decoration: none;\n  outline: none;\n  border: none;\n\n  svg {\n    transition: color ${transitionDuration.default}ms ease-in-out;\n  }\n\n  &:hover {\n    color: var(--hover-text-color);\n  }\n\n  &[aria-selected='true'] {\n    color: var(--active-text-color);\n  }\n\n  &:disabled {\n    color: var(--disabled-text-color);\n    cursor: not-allowed;\n  }\n\n  &[aria-selected='false']:not(:disabled):not(:hover) {\n    svg {\n      color: ${palette.gray.base};\n    }\n  }\n`;\n\nexport const iconOnlyThemeStyles = css`\n  &[aria-selected='false']:not(:disabled):not(:hover) {\n    svg {\n      color: var(--base-text-color);\n    }\n  }\n`;\n\nexport const buttonFocusStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    &:focus {\n      box-shadow: ${focusRing.light.default};\n    }\n  `,\n  [Theme.Dark]: css`\n    &:focus {\n      box-shadow: ${focusRing.dark.default};\n    }\n  `,\n};\n\nexport const labelStyle = css`\n  min-height: var(--line-height);\n  gap: calc(var(--font-size) / 2);\n  display: flex;\n  align-items: center;\n  min-width: 0;\n\n  svg {\n    flex-shrink: 0;\n  }\n`;\n\nexport const labelTextStyles = css`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`;\n","import React, { forwardRef, useContext, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from '@leafygreen-ui/box';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { isComponentGlyph } from '@leafygreen-ui/icon';\nimport {\n  useBaseFontSize,\n  useUsingKeyboardContext,\n} from '@leafygreen-ui/leafygreen-provider';\n\nimport { SegmentedControlContext } from '../SegmentedControlContext';\n\nimport {\n  boxStyle,\n  buttonFocusStyle,\n  buttonStyle,\n  iconOnlyThemeStyles,\n  labelStyle,\n  labelTextStyles,\n  optionStyle,\n} from './SegmentedControlOption.styles';\nimport { SegmentedControlOptionProps } from './SegmentedControlOption.types';\n\n/**\n * SegmentedControlOption\n */\nexport const SegmentedControlOption = forwardRef<\n  HTMLDivElement,\n  SegmentedControlOptionProps\n>(\n  (\n    {\n      value,\n      children,\n      disabled = false,\n      as,\n      className,\n      'aria-controls': ariaControls,\n      _id: id,\n      _checked: checked,\n      _focused: focused,\n      _index: index,\n      _onClick,\n      _onHover,\n      isfocusInComponent,\n      glyph,\n      ...rest\n    }: SegmentedControlOptionProps,\n    forwardedRef,\n  ) => {\n    const { size, theme, followFocus } = useContext(SegmentedControlContext);\n    const { usingKeyboard } = useUsingKeyboardContext();\n    const baseFontSize = useBaseFontSize();\n\n    const onClick = () => {\n      _onClick?.(value);\n    };\n\n    const onMouseEnter = () => {\n      _onHover?.(true);\n    };\n\n    const onMouseLeave = () => {\n      _onHover?.(false);\n    };\n\n    const didComponentMount = useRef(false);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    useEffect(() => {\n      // Check if the component did mount\n      if (didComponentMount.current) {\n        // usingKeyboard: Returns if the keyboard is being used.\n        // focused: Returns if this option should be the item in focus.\n        // isfocusInComponent: Returns if the focus should organically be this component. Without this check this component will hijack the focus if `usingKeyboard` is updated to true.\n        if (usingKeyboard && focused && isfocusInComponent) {\n          // Respond in the DOM when this option is given focus via keyboard\n          buttonRef?.current?.focus();\n\n          if (followFocus) {\n            // Used to ensure native click default events fire when using keyboard navigation\n            buttonRef?.current?.click();\n          }\n        }\n      }\n      didComponentMount.current = true;\n    }, [focused, followFocus, usingKeyboard, isfocusInComponent]);\n\n    useEffect(() => {\n      // If consumer is not using Icon or Glyph component as the `glyph` show a warning\n      if (glyph && !isComponentGlyph(glyph)) {\n        console.warn('Please provide a LeafyGreen UI Icon or Glyph component.');\n      }\n    }, [glyph]);\n\n    const isIconOnly = (glyph && !children) ?? false;\n\n    return (\n      <div\n        className={cx(optionStyle({ theme, size, baseFontSize }), className)}\n        ref={forwardedRef}\n        data-lg-checked={checked}\n      >\n        <Box as={as} tabIndex={-1} className={boxStyle} {...rest}>\n          <button\n            role=\"tab\"\n            id={id}\n            tabIndex={focused ? 0 : -1}\n            aria-selected={checked}\n            aria-controls={ariaControls}\n            disabled={disabled}\n            className={cx(buttonStyle, {\n              [buttonFocusStyle[theme]]: usingKeyboard,\n              [iconOnlyThemeStyles]: isIconOnly,\n            })}\n            ref={buttonRef}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            type=\"button\"\n          >\n            <div className={labelStyle}>\n              {glyph && isComponentGlyph(glyph) && glyph}\n              {!isIconOnly && (\n                <span className={labelTextStyles}>{children}</span>\n              )}\n            </div>\n          </button>\n        </Box>\n      </div>\n    );\n  },\n);\n\nSegmentedControlOption.displayName = 'SegmentedControlOption';\n\nSegmentedControlOption.propTypes = {\n  value: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  glyph: PropTypes.element,\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","DeprecatedSize","Size","XSmall","Default","Large","SegmentedControlContext","React","default","createContext","size","theme","Theme","Light","name","followFocus","wrapperStyle","css","_taggedTemplateLiteral","fontFamilies","labelBaseStyles","labelThemeStyle","_defineProperty","palette","gray","dark1","Dark","light1","optionsWrapperStyleSize","optionsWrapperStyleTheme","light3","transparentize","black","light2","white","dark4","dark3","optionsWrapperStyle","_ref","_ref$size","cx","selectionIndicatorStyle","transitionDuration","hoverIndicatorStyle","_excluded","SegmentedControl","forwardRef","forwardedRef","effect","didComponentMount","children","nameProp","sizeProp","darkModeProp","darkMode","defaultValue","controlledValue","value","onChange","className","label","_ref$followFocus","ariaControls","rest","_objectWithoutProperties","usingKeyboard","useUsingKeyboardContext","segmentedContainerRef","useRef","_useState2","_slicedToArray","useState","isfocusInComponent","setIsfocusInComponent","useDarkMode","getOptionRef","useDynamicRefs","prefix","useIdAllocator","id","isControlled","useMemo","_useState4","internalValue","setInternalValue","_useState6","focusedOptionValue","setFocusedOptionValue","firstChild","Children","toArray","isComponentType","props","useEffect","current","handleFocusIn","useCallback","_segmentedContainerRe","contains","document","activeElement","addEventListener","removeEventListener","updateValue","renderedChildren","map","child","index","_child$props$id","_child$props$ariaCon","errorOnce","concat","warnOnce","_id","_checked","checked","_focused","cloneElement","_index","_onClick","_onHover","hovered","setHoveredIndex","ref","childrenIdList","_React$Children$map","ids","_props","join","_useState8","hoveredIndex","selectedIndex","findIndex","focusedIndex","updateFocusedIndex","newIndex","filter","disabled","length","getIndicatorDynamicStyles","arguments","undefined","isNull","widthPct","count","transformPct","createElement","Provider","_extends","Overline","role","onKeyDownCapture","e","stopPropagation","key","displayName","_templateObject13","_templateObject14","once","console","error","warn","propTypes","PropTypes","bool","oneOf","Object","values","func","string","node","optionThemeStyle","dark2","optionSizeStyle","fontWeights","bold","medium","optionStyle","_ref$baseFontSize","baseFontSize","boxStyle","buttonStyle","base","iconOnlyThemeStyles","buttonFocusStyle","focusRing","light","dark","labelStyle","labelTextStyles","SegmentedControlOption","_ref2","_ref$disabled","as","focused","glyph","_useContext","useContext","useBaseFontSize","buttonRef","_buttonRef$current","_buttonRef$current2","focus","click","isComponentGlyph","isIconOnly","Box","tabIndex","onClick","onMouseEnter","onMouseLeave","type","isRequired","element"],"mappings":"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"}