[
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "InfoSprinkle",
    "props": {
      "InfoSprinkleProps": {
        "triggerAriaLabel": {
          "name": "triggerAriaLabel",
          "defaultValue": {
            "value": "more info"
          },
          "description": "aria-label for the trigger icon.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {
            "default": "'more info'"
          }
        },
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "Class name applied to popover container.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "String rendered inside the tooltip",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "align": {
          "name": "align",
          "defaultValue": {
            "value": "'top'"
          },
          "description": "Determines the alignment of the popover content relative to the trigger element",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Align",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"right\""
              }
            ]
          },
          "tags": {
            "default": "'top'"
          }
        },
        "contentClassName": {
          "name": "contentClassName",
          "defaultValue": null,
          "description": "Class name applied to the popover content container",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "justify": {
          "name": "justify",
          "defaultValue": null,
          "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Justify",
            "value": [
              {
                "value": "\"start\""
              },
              {
                "value": "\"middle\""
              },
              {
                "value": "\"end\""
              },
              {
                "value": "\"fit\""
              }
            ]
          },
          "tags": {}
        },
        "popoverZIndex": {
          "name": "popoverZIndex",
          "defaultValue": null,
          "description": "Number that controls the z-index of the popover element directly.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "portalRef": {
          "name": "portalRef",
          "defaultValue": null,
          "description": "A ref for the portal element",
          "required": false,
          "type": {
            "name": "MutableRefObject<HTMLElement>"
          },
          "tags": {}
        },
        "usePortal": {
          "name": "usePortal",
          "defaultValue": null,
          "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "portalClassName": {
          "name": "portalClassName",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "portalContainer": {
          "name": "portalContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "scrollContainer": {
          "name": "scrollContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "initialOpen": {
          "name": "initialOpen",
          "defaultValue": {
            "value": "`false`"
          },
          "description": "Provides an initial value to uncontrolled open/setOpen state",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "`false`"
          }
        },
        "open": {
          "name": "open",
          "defaultValue": {
            "value": "`false`"
          },
          "description": "Controls component and determines the open state of the `Tooltip`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "`false`"
          }
        },
        "setOpen": {
          "name": "setOpen",
          "defaultValue": null,
          "description": "Callback to change the open state of the `Tooltip`.",
          "required": false,
          "type": {
            "name": "Dispatch<SetStateAction<boolean>>"
          },
          "tags": {}
        },
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Whether the `Tooltip` will appear in dark mode.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "shouldClose": {
          "name": "shouldClose",
          "defaultValue": null,
          "description": "Callback to determine whether or not `Tooltip` should close when user tries to close it.",
          "required": false,
          "type": {
            "name": "() => boolean"
          },
          "tags": {}
        },
        "enabled": {
          "name": "enabled",
          "defaultValue": {
            "value": "true"
          },
          "description": "Enables Tooltip to trigger based on the event specified by `triggerEvent`.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "true"
          }
        },
        "onClose": {
          "name": "onClose",
          "defaultValue": null,
          "description": "Callback that is called when the tooltip is closed internally. E.g. on ESC press, on backdrop click, on blur.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": null,
          "description": "Allows consuming applications to override font-size as set by the LeafyGreen Provider.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BaseFontSize",
            "value": [
              {
                "value": "13"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "BaseTransitionProps": {
        "onEnter": {
          "name": "onEnter",
          "defaultValue": null,
          "description": "Callback fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntering": {
          "name": "onEntering",
          "defaultValue": null,
          "description": "Callback fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntered": {
          "name": "onEntered",
          "defaultValue": null,
          "description": "Callback fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onExit": {
          "name": "onExit",
          "defaultValue": null,
          "description": "Callback fired before the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExiting": {
          "name": "onExiting",
          "defaultValue": null,
          "description": "Callback fired after the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExited": {
          "name": "onExited",
          "defaultValue": null,
          "description": "Callback fired after the \"exited\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        }
      }
    }
  }
]