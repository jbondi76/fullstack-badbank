{"version":3,"file":"index.js","sources":["../../src/constants.ts","../../src/ConfirmationModal/styles.ts","../../src/ConfirmationModal/ConfirmationModal.types.ts","../../src/ConfirmationModal/ConfirmationModal.tsx"],"sourcesContent":["const LGID_ROOT = 'lg-confirmation_modal';\n\nexport const LGIDS_CONFIRMATION_MODAL = {\n  root: LGID_ROOT,\n  input: `${LGID_ROOT}-confirmation_input`,\n  title: `${LGID_ROOT}-title`,\n  confirm: `${LGID_ROOT}-footer-confirm_button`,\n  cancel: `${LGID_ROOT}-footer-cancel_button`,\n} as const;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { typeScales } from '@leafygreen-ui/tokens';\n\nimport { Variant } from './ConfirmationModal.types';\n\nexport const titleStyle = css`\n  line-height: 32px;\n  margin-bottom: 10px;\n`;\n\nexport const baseModalStyle = css`\n  width: 600px;\n  padding: initial;\n  letter-spacing: 0;\n`;\n\nexport const contentStyle = css`\n  font-size: ${typeScales.body1.fontSize}px;\n  line-height: ${typeScales.body1.lineHeight}px;\n`;\n\nexport const contentDarkModeStyles = css`\n  color: ${palette.gray.light1};\n`;\n\nexport const contentVariantStyles: Record<Variant, string> = {\n  [Variant.Default]: css`\n    padding: 40px 36px 0px;\n  `,\n  [Variant.Danger]: css`\n    padding: 40px 36px 0px 78px;\n  `,\n};\n\nexport const textEntryInputStyle = css`\n  width: 300px;\n  margin-top: 14px;\n\n  label {\n    margin-bottom: 3px;\n  }\n`;\n\nexport const buttonStyle = css`\n  margin: 0 2px;\n\n  &:first-of-type {\n    margin: 0 0 0 5px;\n  }\n\n  &:last-of-type {\n    margin: 0 5px 0 0;\n  }\n`;\n\nexport const warningIconStyle = css`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  left: 36px;\n  top: 40px;\n\n  svg {\n    margin-top: -3px;\n  }\n`;\n\nexport const warningIconThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background: ${palette.red.light3};\n  `,\n  [Theme.Dark]: css`\n    background: ${palette.red.dark2};\n  `,\n};\n","import { ButtonProps } from '@leafygreen-ui/button';\nimport { ModalProps } from '@leafygreen-ui/modal';\n\nexport const Variant = {\n  Default: 'primary',\n  Danger: 'danger',\n} as const;\n\nexport type Variant = (typeof Variant)[keyof typeof Variant];\n\ninterface CustomButtonOnClick {\n  onClick?: () => void;\n}\ntype CustomConfirmButtonProps = Omit<ButtonProps, 'variant' | 'onClick'> &\n  CustomButtonOnClick;\ntype CustomCancelButtonProps = Omit<ButtonProps, 'onClick'> &\n  CustomButtonOnClick;\n\nexport interface ConfirmationModalProps extends Omit<ModalProps, 'size'> {\n  /**\n   * Text of header element\n   */\n  title: string;\n\n  /**\n   * The component is shown when the value is set to `true`.\n   */\n  open?: boolean;\n\n  /**\n   * Callback fired when the primary action button is clicked.\n   * @deprecated Use `confirmButtonProps`.\n   */\n  onConfirm?: () => void;\n\n  /**\n   * Callback fired when the cancel button is clicked.\n   * @deprecated Use `cancelButtonProps`.\n   */\n  onCancel?: () => void;\n\n  /**\n   * Text rendered in the primary button. Defaults to `\"Confirm\"`\n   * @deprecated Use `confirmButtonProps`.\n   */\n  buttonText?: string;\n\n  /**\n   * Variant of the modal that represents the type of action handled by the modal.\n   */\n  variant?: Variant;\n\n  /**\n   * If set, the user will be prompted to type the requiredInputText into an input field\n   */\n  requiredInputText?: string;\n\n  /**\n   * If `true`, the primary action button will be disabled\n   * @deprecated Use `confirmButtonProps`.\n   */\n  submitDisabled?: boolean;\n\n  /**\n   * An object that accepts all Button props except for the `variant` prop. The variant is controlled by the `variant` prop.\n   */\n  confirmButtonProps?: CustomConfirmButtonProps;\n\n  /**\n   * An object that accepts all Button props. The `onClick` property will also fire when the `X` button, or backdrop is clicked.\n   */\n  cancelButtonProps?: CustomCancelButtonProps;\n}\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@leafygreen-ui/button';\nimport { cx } from '@leafygreen-ui/emotion';\nimport WarningIcon from '@leafygreen-ui/icon/dist/Warning';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport Modal, { Footer } from '@leafygreen-ui/modal';\nimport { palette } from '@leafygreen-ui/palette';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { H3 } from '@leafygreen-ui/typography';\n\nimport { LGIDS_CONFIRMATION_MODAL } from '../constants';\n\nimport { ConfirmationModalProps, Variant } from './ConfirmationModal.types';\nimport {\n  baseModalStyle,\n  buttonStyle,\n  contentDarkModeStyles,\n  contentStyle,\n  contentVariantStyles,\n  textEntryInputStyle,\n  titleStyle,\n  warningIconStyle,\n  warningIconThemeStyle,\n} from './styles';\n\nexport const ConfirmationModal = React.forwardRef(\n  (\n    {\n      children,\n      title,\n      requiredInputText,\n      buttonText,\n      submitDisabled,\n      variant = Variant.Default,\n      onConfirm,\n      onCancel,\n      darkMode: darkModeProp,\n      confirmButtonProps = {},\n      cancelButtonProps = {},\n      ...modalProps\n    }: ConfirmationModalProps,\n    forwardRef: React.ForwardedRef<HTMLDivElement | null>,\n  ) => {\n    const [confirmEnabled, setConfirmEnabled] = useState(!requiredInputText);\n    const { theme, darkMode } = useDarkMode(darkModeProp);\n\n    const textEntryConfirmation = useMemo(() => {\n      setConfirmEnabled(!requiredInputText);\n\n      let textEntryConfirmation = null;\n\n      if (requiredInputText) {\n        const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n          setConfirmEnabled(event.target.value === requiredInputText);\n        };\n        textEntryConfirmation = (\n          <TextInput\n            label={`Type \"${requiredInputText}\" to confirm your action`}\n            className={textEntryInputStyle}\n            onChange={onInputChange}\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n            darkMode={darkMode}\n            data-testid={LGIDS_CONFIRMATION_MODAL.input}\n          ></TextInput>\n        );\n      }\n\n      return textEntryConfirmation;\n    }, [requiredInputText, darkMode]);\n\n    // TODO: remove - onConfirm is deprecated\n    const _onConfirm = onConfirm || confirmButtonProps?.onClick;\n    // TODO: remove - onCancel is deprecated\n    const _onCancel = onCancel || cancelButtonProps?.onClick;\n\n    const resetConfirmButton = () => {\n      if (!requiredInputText) return;\n      setConfirmEnabled(false);\n    };\n\n    const handleConfirm = () => {\n      _onConfirm?.();\n      resetConfirmButton();\n    };\n\n    const handleCancel = () => {\n      _onCancel?.();\n      resetConfirmButton();\n    };\n\n    // TODO: remove - submitDisabled is deprecated\n    const isConfirmDisabled =\n      submitDisabled ?? confirmButtonProps?.disabled ?? false;\n\n    return (\n      <Modal\n        {...modalProps}\n        contentClassName={baseModalStyle}\n        setOpen={handleCancel}\n        darkMode={darkMode}\n        ref={forwardRef}\n      >\n        <div\n          className={cx(contentStyle, contentVariantStyles[variant], {\n            [contentDarkModeStyles]: darkMode,\n          })}\n        >\n          {variant === Variant.Danger && (\n            <div className={cx(warningIconStyle, warningIconThemeStyle[theme])}>\n              <WarningIcon\n                fill={darkMode ? palette.red.light3 : palette.red.base}\n                role=\"presentation\"\n              />\n            </div>\n          )}\n          <H3\n            as=\"h1\"\n            className={cx(titleStyle)}\n            data-testid={LGIDS_CONFIRMATION_MODAL.title}\n          >\n            {title}\n          </H3>\n          {children}\n          {textEntryConfirmation}\n        </div>\n        <Footer>\n          <Button\n            {...confirmButtonProps}\n            data-testid={LGIDS_CONFIRMATION_MODAL.confirm}\n            disabled={!confirmEnabled || isConfirmDisabled}\n            className={cx(buttonStyle, confirmButtonProps?.className)}\n            variant={variant}\n            onClick={handleConfirm}\n          >\n            {/* TODO: remove - buttonText is deprecated */}\n            {buttonText || confirmButtonProps?.children || 'Confirm'}\n          </Button>\n          <Button\n            {...cancelButtonProps}\n            onClick={handleCancel}\n            className={cx(buttonStyle, cancelButtonProps?.className)}\n            data-testid={LGIDS_CONFIRMATION_MODAL.cancel}\n          >\n            Cancel\n          </Button>\n        </Footer>\n      </Modal>\n    );\n  },\n);\n\nConfirmationModal.displayName = 'ConfirmationModal';\n\nConfirmationModal.propTypes = {\n  title: PropTypes.string.isRequired,\n  open: PropTypes.bool,\n  onConfirm: PropTypes.func,\n  onCancel: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  buttonText: PropTypes.string,\n  variant: PropTypes.oneOf(Object.values(Variant)),\n  requiredInputText: PropTypes.string,\n  darkMode: PropTypes.bool,\n  confirmButtonProps: PropTypes.objectOf(PropTypes.any),\n  cancelButtonProps: PropTypes.objectOf(PropTypes.any),\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","LGID_ROOT","LGIDS_CONFIRMATION_MODAL","root","input","concat","title","confirm","cancel","Variant","Default","Danger","titleStyle","css","_taggedTemplateLiteral","baseModalStyle","contentStyle","typeScales","body1","fontSize","lineHeight","contentDarkModeStyles","palette","gray","light1","contentVariantStyles","_defineProperty","textEntryInputStyle","buttonStyle","warningIconStyle","warningIconThemeStyle","Theme","Light","red","light3","Dark","dark2","_excluded","ConfirmationModal","React","forwardRef","_ref","_ref2","children","requiredInputText","buttonText","submitDisabled","_ref$variant","variant","onConfirm","onCancel","darkModeProp","darkMode","_ref$confirmButtonPro","confirmButtonProps","_ref$cancelButtonProp","cancelButtonProps","modalProps","_objectWithoutProperties","_useState2","_slicedToArray","useState","confirmEnabled","setConfirmEnabled","_useDarkMode","useDarkMode","theme","textEntryConfirmation","useMemo","createElement","TextInput","label","className","onChange","event","target","value","autoFocus","_onConfirm","onClick","_onCancel","resetConfirmButton","handleCancel","isConfirmDisabled","disabled","Modal","_extends","contentClassName","setOpen","ref","cx","WarningIcon","fill","base","role","H3","as","Footer","Button","displayName","propTypes","PropTypes","string","isRequired","open","bool","func","node","oneOf","Object","values","objectOf","any"],"mappings":"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"}