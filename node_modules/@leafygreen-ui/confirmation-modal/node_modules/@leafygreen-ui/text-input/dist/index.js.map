{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/TextInput/TextInput.styles.ts","../src/TextInput/TextInput.types.ts","../src/TextInput/TextInput.tsx","../src/utils/getTestUtils/getTestUtils.ts"],"sourcesContent":["const LGID_ROOT = 'lg-text_input';\n\nexport const LGIDS_TEXT_INPUT = {\n  root: LGID_ROOT,\n} as const;\n","import { css } from '@leafygreen-ui/emotion';\n\nexport const textInputStyle = css`\n  width: 100%;\n`;\n","import { FormFieldState } from '@leafygreen-ui/form-field';\nimport {\n  DarkModeProps,\n  Either,\n  HTMLElementProps,\n  LgIdProps,\n} from '@leafygreen-ui/lib';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\nexport const State = FormFieldState;\n\nexport type State = (typeof State)[keyof typeof State];\n\nexport const TextInputType = {\n  Email: 'email',\n  Password: 'password',\n  Search: 'search',\n  Text: 'text',\n  Url: 'url',\n  Tel: 'tel',\n  Number: 'number',\n} as const;\n\nexport type TextInputType = (typeof TextInputType)[keyof typeof TextInputType];\n\nexport const SizeVariant = {\n  XSmall: 'xsmall',\n  Small: 'small',\n  Default: 'default',\n  Large: 'large',\n} as const;\n\nexport type SizeVariant = (typeof SizeVariant)[keyof typeof SizeVariant];\n\nexport const TextInputFontSize = {\n  ...BaseFontSize,\n  Large: 18,\n} as const;\n\nexport type TextInputFontSize =\n  (typeof TextInputFontSize)[keyof typeof TextInputFontSize];\n\ninterface AriaLabelProps {\n  /**\n   * Text shown in bold above the input element.\n   *\n   * Optional if `aria-labelledby` or `aria-label` is provided\n   */\n  label?: string;\n\n  /**\n   * Screen-reader label element.\n   *\n   * Optional if `label` or `aria-label` is provided\n   */\n  ['aria-labelledby']?: string;\n\n  /**\n   * Screen reader label text\n   *\n   * Optional if `label` or `aria-labelledby` is provided\n   *\n   */\n  ['aria-label']?: string;\n}\n\ntype AriaLabels = keyof AriaLabelProps;\n\ninterface TextInputTypeProp {\n  /**\n   * The input type.\n   */\n  type?: TextInputType;\n}\nexport interface BaseTextInputProps\n  extends Omit<HTMLElementProps<'input', HTMLInputElement>, AriaLabels>,\n    DarkModeProps,\n    LgIdProps {\n  /**\n   * id associated with the TextInput component.\n   */\n  id?: string;\n\n  /**\n   * Text that gives more detail about the requirements for the input.\n   */\n  description?: string;\n\n  /**\n   * Whether or not the field is optional.\n   * Default: false\n   */\n  optional?: boolean;\n\n  /**\n   * Whether or not the field is disabled. This will set the `aria-disabled` and `readonly` attributes on the input, not the `disabled` attribute.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Callback to be executed when the input stops being focused.\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n\n  /**\n   * Callback to be executed when the value of the input field changes.\n   */\n  onChange?: React.ChangeEventHandler<HTMLInputElement>;\n\n  /**\n   * The placeholder text shown in the input field before the user begins typing.\n   */\n  placeholder?: string;\n\n  /**\n   * The message shown below the input field if the value is invalid.\n   */\n  errorMessage?: React.ReactNode;\n\n  /**\n   * The message shown below the input field if the value is valid.\n   */\n  successMessage?: React.ReactNode;\n\n  /**\n   * The current state of the TextInput. This can be none, valid, or error.\n   */\n  state?: State;\n\n  /**\n   * The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\n   */\n  value?: string;\n\n  /**\n   * className supplied to the TextInput container.\n   */\n  className?: string;\n\n  /**\n   * Callback called whenever validation should be run.\n   *\n   * See [Form Validation & Error Handling](https://www.mongodb.design/foundation/forms/#form-validation--error-handling) for more\n   */\n  handleValidation?: (value: string) => void;\n\n  /**\n   *  determines the font size and padding.\n   */\n\n  sizeVariant?: SizeVariant;\n\n  /**\n   *  determines the base font size if sizeVariant is set to default.\n   */\n\n  baseFontSize?: BaseFontSize;\n}\n\nexport type TextInputProps = Either<\n  BaseTextInputProps & AriaLabelProps & TextInputTypeProp,\n  AriaLabels\n>;\n\nexport type TextInputComponentType =\n  React.ForwardRefExoticComponent<TextInputProps>;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FormField, FormFieldInputContainer } from '@leafygreen-ui/form-field';\nimport { useForwardedRef, useValidation } from '@leafygreen-ui/hooks';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { consoleOnce } from '@leafygreen-ui/lib';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport { useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport { LGIDS_TEXT_INPUT } from '../constants';\n\nimport { textInputStyle } from './TextInput.styles';\nimport {\n  SizeVariant,\n  State,\n  TextInputComponentType,\n  TextInputProps,\n  TextInputType,\n} from './TextInput.types';\n\n/**\n * # TextInput\n *\n * TextInput component\n *\n * ```\n<TextInput label='Input Label' onChange={() => execute when value of input field changes}/>\n```\n * @param props.id id associated with the TextInput component.\n * @param props.label Text shown in bold above the input element.\n * @param props.description Text that gives more detail about the requirements for the input.\n * @param props.optional Whether or not the field is optional.\n * @param props.disabled Whether or not the field is currently disabled.\n * @param props.onChange Callback to be executed when the value of the input field changes.\n * @param props.onBlur Callback to be executed when the input stops being focused.\n * @param props.placeholder The placeholder text shown in the input field before the user begins typing.\n * @param props.errorMessage The message shown below the input field if the value is invalid.\n * @param props.successMessage The message shown below the input field if the value is valid.\n * @param props.state The current state of the TextInput. This can be none, valid, or error.\n * @param props.value The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\n * @param props.className className supplied to the TextInput container.\n * @param props.darkMode determines whether or not the component appears in dark theme.\n * @param props.sizeVariant determines the size of the text and the height of the input.\n */\n\nconst TextInput = React.forwardRef<HTMLInputElement, TextInputProps>(\n  (\n    {\n      label,\n      description,\n      onChange,\n      onBlur,\n      placeholder,\n      errorMessage = 'This input needs your attention',\n      successMessage = 'Success',\n      optional = false,\n      disabled = false,\n      state = State.None,\n      type = TextInputType.Text,\n      id,\n      readOnly,\n      value: controlledValue,\n      className,\n      darkMode: darkModeProp,\n      sizeVariant: size = SizeVariant.Default,\n      handleValidation,\n      baseFontSize: baseFontSizeProp,\n      'data-lgid': dataLgId = LGIDS_TEXT_INPUT.root,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-invalid': ariaInvalid,\n      ...rest\n    }: TextInputProps,\n    forwardRef: React.Ref<HTMLInputElement>,\n  ) => {\n    const { darkMode } = useDarkMode(darkModeProp);\n    const inputRef = useForwardedRef(forwardRef, null);\n    const isControlled = typeof controlledValue === 'string';\n    const [uncontrolledValue, setValue] = useState('');\n    const value = isControlled ? controlledValue : uncontrolledValue;\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n\n    const handleContainerClick = () => {\n      if (!disabled) {\n        inputRef?.current?.focus();\n      }\n    };\n\n    // Validation\n    const validation = useValidation<HTMLInputElement>(handleValidation);\n\n    const handleBlur: React.FocusEventHandler<HTMLInputElement> = e => {\n      if (onBlur) {\n        onBlur(e);\n      }\n\n      validation.onBlur(e);\n    };\n\n    const handleChange: React.ChangeEventHandler<HTMLInputElement> = e => {\n      if (onChange) {\n        onChange(e);\n      }\n\n      if (!isControlled) {\n        setValue(e.target.value);\n      }\n\n      validation.onChange(e);\n    };\n\n    if (type !== 'search' && !label && !ariaLabelledby) {\n      console.error(\n        'For screen-reader accessibility, label or aria-labelledby must be provided to TextInput.',\n      );\n    }\n\n    if (type === 'search') {\n      consoleOnce.warn(\n        'We recommend using the Leafygreen SearchInput for `type=\"search\"` inputs.',\n      );\n      if (!ariaLabel) {\n        console.error(\n          'For screen-reader accessibility, aria-label must be provided to TextInput.',\n        );\n      }\n    }\n\n    if (type === 'password') {\n      consoleOnce.warn(\n        'We recommend using the Leafygreen PasswordInput for `type=\"password\"` inputs.',\n      );\n    }\n\n    if (type === 'number') {\n      consoleOnce.warn(\n        'We recommend using the Leafygreen NumberInput for `type=\"number\"` inputs.',\n      );\n    }\n\n    const ariaProps = {\n      'aria-invalid': ariaInvalid,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n    } as const;\n\n    const formFieldProps = {\n      baseFontSize,\n      className,\n      darkMode,\n      'data-lgid': dataLgId,\n      description,\n      disabled,\n      errorMessage,\n      successMessage,\n      id,\n      label,\n      optional,\n      size,\n      state,\n      readOnly,\n      ...ariaProps,\n    } as const;\n\n    const inputProps = {\n      autoComplete: disabled ? 'off' : rest?.autoComplete || 'on',\n      className: textInputStyle,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      placeholder,\n      ref: inputRef,\n      required: !optional,\n      type,\n      value,\n      ...rest,\n    } as const;\n\n    return (\n      <FormField {...formFieldProps}>\n        <FormFieldInputContainer onClick={handleContainerClick}>\n          <input {...inputProps} />\n        </FormFieldInputContainer>\n      </FormField>\n    );\n  },\n) as TextInputComponentType;\n\nTextInput.displayName = 'TextInput';\n\nTextInput.propTypes = {\n  id: PropTypes.string,\n  label: PropTypes.string,\n  'aria-labelledby': PropTypes.string,\n  description: PropTypes.string,\n  optional: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  errorMessage: PropTypes.string,\n  successMessage: PropTypes.string,\n  state: PropTypes.oneOf(Object.values(State)),\n  value: PropTypes.string,\n  className: PropTypes.string,\n  sizeVariant: PropTypes.oneOf(Object.values(SizeVariant)),\n  baseFontSize: PropTypes.oneOf(Object.values(BaseFontSize)),\n  darkMode: PropTypes.bool,\n};\n\nexport default TextInput;\n","import { getByLgId, queryBySelector } from '@lg-tools/test-harnesses';\n\nimport { LGIDS_FORM_FIELD } from '@leafygreen-ui/form-field';\nimport { LGIDS_TYPOGRAPHY } from '@leafygreen-ui/typography';\n\nimport { LGIDS_TEXT_INPUT } from '../../constants';\n\nimport { TestUtilsReturnType } from './getTestUtils.types';\n\nexport const getTestUtils = (\n  lgId: string = LGIDS_TEXT_INPUT.root,\n): TestUtilsReturnType => {\n  /**\n   * Queries the DOM for the element using the `data-lgid` data attribute.\n   * Will throw if no element is found.\n   */\n  const element = getByLgId!(lgId);\n\n  /**\n   * Queries the `element` for the label element. Will return `null` if the label is not found.\n   */\n  const getLabel = queryBySelector<HTMLLabelElement>(\n    element,\n    `[data-lgid=${LGIDS_TYPOGRAPHY.label}]`,\n  );\n\n  /**\n   * Queries the `element` for the description element. Will return `null` if the desription is not found.\n   */\n  const getDescription = queryBySelector<HTMLElement>(\n    element,\n    `[data-lgid=${LGIDS_TYPOGRAPHY.description}]`,\n  );\n\n  /**\n   * Queries the `element` for the input element.\n   */\n  const getInput = queryBySelector<HTMLInputElement>(\n    element,\n    'input',\n  ) as HTMLInputElement;\n\n  /**\n   * Queries the `element` for the error message element. Will return `null` if the error message is not found.\n   */\n  const getErrorMessage = queryBySelector<HTMLElement>(\n    element,\n    `[data-lgid=${LGIDS_FORM_FIELD.errorMessage}]`,\n  );\n\n  /**\n   * Queries the `element` for aria-disabled.\n   */\n  const isInputDisabled = () => {\n    const ariaDisabled = queryBySelector<HTMLElement>(\n      element,\n      '[aria-disabled=\"true\"]',\n    );\n\n    return !!ariaDisabled;\n  };\n\n  /**\n   * Returns the input value.\n   */\n  const getInputValue = () => {\n    return getInput.value;\n  };\n\n  /**\n   * Queries the `element` for the checkmark Icon.\n   */\n  const isValid = () => {\n    const checkmarkIcon = queryBySelector<SVGElement>(\n      element,\n      'svg[title=\"Valid\"]',\n    );\n\n    return !!checkmarkIcon;\n  };\n\n  /**\n   * Queries the `element` for the warning Icon.\n   */\n  const isError = () => {\n    const warningIcon = queryBySelector<SVGElement>(\n      element,\n      'svg[title=\"Error\"]',\n    );\n\n    return !!warningIcon;\n  };\n\n  /**\n   * Queries the `element` for the warning Icon.\n   */\n  const isOptional = () => {\n    const optionalEl = queryBySelector<SVGElement>(\n      element,\n      `[data-lgid=${LGIDS_FORM_FIELD.optional}]`,\n    );\n\n    return !!optionalEl;\n  };\n\n  return {\n    getLabel: () => getLabel,\n    getDescription: () => getDescription,\n    getInput: () => getInput,\n    getErrorMessage: () => getErrorMessage,\n    isDisabled: () => isInputDisabled(),\n    isValid: () => isValid(),\n    isError: () => isError(),\n    getInputValue: () => getInputValue(),\n    isOptional: () => isOptional(),\n  };\n};\n"],"names":["_templateObject","LGIDS_TEXT_INPUT","textInputStyle","css","State","FormFieldState","TextInputType","Email","Password","Search","Text","Url","Tel","Number","SizeVariant","XSmall","Small","Default","Large","TextInputFontSize","_objectSpread","BaseFontSize","_excluded","TextInput","React","forwardRef","_ref","label","description","onChange","onBlur","placeholder","_ref$errorMessage","errorMessage","_ref$successMessage","successMessage","_ref$optional","optional","_ref$disabled","disabled","_ref$state","state","None","_ref$type","type","id","readOnly","controlledValue","value","className","darkModeProp","darkMode","_ref$sizeVariant","sizeVariant","size","handleValidation","baseFontSizeProp","baseFontSize","_ref$dataLgid","dataLgId","ariaLabel","ariaLabelledby","ariaInvalid","rest","_objectWithoutProperties","useDarkMode","inputRef","useForwardedRef","isControlled","_useState2","_slicedToArray","useState","uncontrolledValue","setValue","useUpdatedBaseFontSize","validation","useValidation","console","error","consoleOnce","warn","formFieldProps","inputProps","autoComplete","e","target","ref","required","createElement","FormField","default","FormFieldInputContainer","onClick","_inputRef$current","current","focus","displayName","propTypes","PropTypes","string","bool","func","oneOf","Object","values","lgId","arguments","length","undefined","element","getByLgId","_getLabel","queryBySelector","concat","LGIDS_TYPOGRAPHY","_getDescription","_getInput","_getErrorMessage","LGIDS_FORM_FIELD","getLabel","getDescription","getInput","getErrorMessage","isDisabled","isValid","isError","getInputValue","isOptional"],"mappings":"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"}