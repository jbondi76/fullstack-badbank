[
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "InternalOption",
    "props": {
      "InternalProps": {
        "glyph": {
          "name": "glyph",
          "defaultValue": null,
          "description": "Icon to display next to the option text.",
          "required": false,
          "type": {
            "name": "Element"
          },
          "tags": {}
        },
        "disabled": {
          "name": "disabled",
          "defaultValue": {
            "value": "false"
          },
          "description": "Prevents the option from being selectable.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "selected": {
          "name": "selected",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "focused": {
          "name": "focused",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "onClick": {
          "name": "onClick",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "MouseEventHandler<Element>"
          },
          "tags": {}
        },
        "onFocus": {
          "name": "onFocus",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "FocusEventHandler<Element>"
          },
          "tags": {}
        },
        "hasGlyphs": {
          "name": "hasGlyphs",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "triggerScrollIntoView": {
          "name": "triggerScrollIntoView",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "description": {
          "name": "description",
          "defaultValue": null,
          "description": "Optional descriptive text under the value.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      },
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "LiHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li"
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "Option",
    "props": {
      "OptionProps": {
        "value": {
          "name": "value",
          "defaultValue": {
            "value": "children"
          },
          "description": "Corresponds to the value passed into the onChange prop of <Select /> when the option is selected.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {
            "default": "children"
          }
        }
      },
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "InternalProps": {
        "disabled": {
          "name": "disabled",
          "defaultValue": {
            "value": "false"
          },
          "description": "Prevents the option from being selectable.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "glyph": {
          "name": "glyph",
          "defaultValue": null,
          "description": "Icon to display next to the option text.",
          "required": false,
          "type": {
            "name": "Element"
          },
          "tags": {}
        },
        "description": {
          "name": "description",
          "defaultValue": null,
          "description": "Optional descriptive text under the value.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "InternalOptionGroup",
    "props": {
      "InternalOptionProps": {
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "Text shown above the group's options.",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      },
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes"
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "OptionGroup",
    "props": {
      "OptionGroupProps": {
        "disabled": {
          "name": "disabled",
          "defaultValue": {
            "value": "false"
          },
          "description": "Prevents all the contained options from being selectable.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "`<Option />` elements",
          "required": true,
          "type": {
            "name": "<Option />"
          },
          "tags": {
            "type": "<Option />"
          }
        }
      },
      "InternalOptionProps": {
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "Text shown above the group's options.",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes"
    }
  },
  {
    "tags": {},
    "description": "Select inputs are typically used alongside other form elements like toggles, radio boxes, or text inputs when a user needs to make a selection from a list of items.\n\nIn a select input where there are less than 3-4 items, consider using radio boxes, or radio inputs instead.",
    "methods": [],
    "displayName": "Select",
    "props": {
      "BaseSelectProps": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Children rendered inside the component. Expected to be either `<Option>` or `<OptionGroup>`.",
          "required": true,
          "type": {
            "name": "`<Option />` | `<OptionGroup/>`"
          },
          "tags": {
            "type": "`<Option />` | `<OptionGroup/>`"
          }
        },
        "id": {
          "name": "id",
          "defaultValue": null,
          "description": "HTML `id` property used to allow Javascript, form, or label to reference the input.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "placeholder": {
          "name": "placeholder",
          "defaultValue": {
            "value": "Select"
          },
          "description": "Text rendered in the Select component before a value is set.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "dropdownWidthBasis": {
          "name": "dropdownWidthBasis",
          "defaultValue": {
            "value": "trigger"
          },
          "description": "Determines the width of the dropdown. `trigger` will make the dropdown width the width of the menu button. `option` will make the dropdown width as wide as the widest option.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "DropdownWidthBasis",
            "value": [
              {
                "value": "\"trigger\""
              },
              {
                "value": "\"option\""
              }
            ]
          },
          "tags": {
            "default": "'trigger'"
          }
        },
        "disabled": {
          "name": "disabled",
          "defaultValue": {
            "value": false
          },
          "description": "When present, it specifies that the drop-down list should be disabled.\n\nA `disabled` drop-down list is unusable and un-clickable.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "name": {
          "name": "name",
          "defaultValue": null,
          "description": "The `name` attribute specifies the name for a drop-down list.\n\nThe `name` attribute is used to reference elements in a JavaScript, or to reference form data after a form is submitted.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "errorMessage": {
          "name": "errorMessage",
          "defaultValue": {
            "value": ""
          },
          "description": "Error message rendered when the `state` prop is set to `error`.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "state": {
          "name": "state",
          "defaultValue": {
            "value": "none"
          },
          "description": "Determines whether the component should be rendered in an error state.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "State",
            "value": [
              {
                "value": "\"none\""
              },
              {
                "value": "\"error\""
              }
            ]
          },
          "tags": {}
        },
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": {
            "value": "BaseFontSize.Body1"
          },
          "description": "determines the base font size if sizeVariant is set to default.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BaseFontSize",
            "value": [
              {
                "value": "13"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {}
        },
        "description": {
          "name": "description",
          "defaultValue": null,
          "description": "Secondary text rendered under the label to provide additional details about the select and its options.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "size": {
          "name": "size",
          "defaultValue": {
            "value": "default"
          },
          "description": "Determines the size in which the component will be rendered.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Size",
            "value": [
              {
                "value": "\"xsmall\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"default\""
              },
              {
                "value": "\"large\""
              }
            ]
          },
          "tags": {}
        },
        "allowDeselect": {
          "name": "allowDeselect",
          "defaultValue": {
            "value": true
          },
          "description": "Allows the user to unselect an option.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "SelectProps": {
        "onChange": {
          "name": "onChange",
          "defaultValue": null,
          "description": "A function that takes in the value of the selected option, and the event that was used to select the value (i.e. React.MouseEvent | KeyboardEvent | React.KeyboardEvent).\n\nNote: This API is different from the native HTML `<select>` element's `onChange` prop given the current technical design of this component.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((value: string, event: MouseEvent<Element, MouseEvent> | KeyboardEvent | React.KeyboardEvent<...>) => void) | ((value: string, event: MouseEvent<...> | ... 1 more ... | KeyboardEvent<...>) => void)",
            "value": [
              {
                "value": "(value: string, event: MouseEvent<Element, MouseEvent> | KeyboardEvent | React.KeyboardEvent<...>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(value: string, event: MouseEvent<Element, MouseEvent> | KeyboardEvent | React.KeyboardEvent<...>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "onClick": {
          "name": "onClick",
          "defaultValue": null,
          "description": "Click event handler passed to the root div element within the portal container.",
          "required": false,
          "type": {
            "name": "MouseEventHandler<Element>"
          },
          "tags": {}
        },
        "refEl": {
          "name": "refEl",
          "defaultValue": null,
          "description": "A reference to the element against which the popover component will be positioned.",
          "required": false,
          "type": {
            "name": "RefObject<HTMLElement>"
          },
          "tags": {}
        },
        "contentClassName": {
          "name": "contentClassName",
          "defaultValue": null,
          "description": "Class name applied to the popover content container",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "align": {
          "name": "align",
          "defaultValue": null,
          "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Align",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"center-vertical\""
              },
              {
                "value": "\"center-horizontal\""
              }
            ]
          },
          "tags": {}
        },
        "justify": {
          "name": "justify",
          "defaultValue": null,
          "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Justify",
            "value": [
              {
                "value": "\"start\""
              },
              {
                "value": "\"middle\""
              },
              {
                "value": "\"end\""
              },
              {
                "value": "\"fit\""
              }
            ]
          },
          "tags": {}
        },
        "adjustOnMutation": {
          "name": "adjustOnMutation",
          "defaultValue": null,
          "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "popoverZIndex": {
          "name": "popoverZIndex",
          "defaultValue": null,
          "description": "Number that controls the z-index of the popover element directly.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "portalRef": {
          "name": "portalRef",
          "defaultValue": null,
          "description": "A ref for the portal element",
          "required": false,
          "type": {
            "name": "MutableRefObject<HTMLElement>"
          },
          "tags": {}
        },
        "usePortal": {
          "name": "usePortal",
          "defaultValue": {
            "value": true
          },
          "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "portalClassName": {
          "name": "portalClassName",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "portalContainer": {
          "name": "portalContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "scrollContainer": {
          "name": "scrollContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "readOnly": {
          "name": "readOnly",
          "defaultValue": null,
          "description": "Indicates that the component's value cannot be changed.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        }
      },
      "BaseTransitionProps": {
        "onEnter": {
          "name": "onEnter",
          "defaultValue": null,
          "description": "Callback fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntering": {
          "name": "onEntering",
          "defaultValue": null,
          "description": "Callback fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntered": {
          "name": "onEntered",
          "defaultValue": null,
          "description": "Callback fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onExit": {
          "name": "onExit",
          "defaultValue": null,
          "description": "Callback fired before the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExiting": {
          "name": "onExiting",
          "defaultValue": null,
          "description": "Callback fired after the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExited": {
          "name": "onExited",
          "defaultValue": null,
          "description": "Callback fired after the \"exited\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        }
      },
      "ButtonHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button",
      "LabelProp": {
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      },
      "DarkModeProps": {
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Renders the component with dark mode styles.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        }
      },
      "LgIdProps": {
        "data-lgid": {
          "name": "data-lgid",
          "defaultValue": null,
          "description": "LG test id passed to the component wrapper.",
          "required": false,
          "type": {
            "name": "`lg-${string}`"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "getTestUtils",
    "props": {
      "String": "",
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => string"
          },
          "tags": {}
        }
      }
    }
  }
]