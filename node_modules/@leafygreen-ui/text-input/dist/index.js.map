{"version":3,"file":"index.js","sources":["../src/TextInput/TextInput.types.ts","../src/TextInput/TextInput.tsx"],"sourcesContent":["import { Either, HTMLElementProps } from '@leafygreen-ui/lib';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\nexport const State = {\n  None: 'none',\n  Valid: 'valid',\n  Error: 'error',\n} as const;\n\nexport type State = (typeof State)[keyof typeof State];\n\nexport const TextInputType = {\n  Email: 'email',\n  Password: 'password',\n  Search: 'search',\n  Text: 'text',\n  Url: 'url',\n  Tel: 'tel',\n  Number: 'number',\n} as const;\n\nexport type TextInputType = (typeof TextInputType)[keyof typeof TextInputType];\n\nexport const SizeVariant = {\n  XSmall: 'xsmall',\n  Small: 'small',\n  Default: 'default',\n  Large: 'large',\n} as const;\n\nexport type SizeVariant = (typeof SizeVariant)[keyof typeof SizeVariant];\n\nexport const TextInputFontSize = {\n  ...BaseFontSize,\n  Large: 18,\n} as const;\n\nexport type TextInputFontSize =\n  (typeof TextInputFontSize)[keyof typeof TextInputFontSize];\n\ninterface AriaLabelProps {\n  /**\n   * Text shown in bold above the input element.\n   *\n   * Optional if `aria-labelledby` or `aria-label` is provided\n   */\n  label?: string;\n\n  /**\n   * Screen-reader label element.\n   *\n   * Optional if `label` or `aria-label` is provided\n   */\n  ['aria-labelledby']?: string;\n\n  /**\n   * Screen reader label text\n   *\n   * Optional if `label` or `aria-labelledby` is provided\n   *\n   */\n  ['aria-label']?: string;\n}\n\ntype AriaLabels = keyof AriaLabelProps;\n\ninterface TextInputTypeProp {\n  /**\n   * The input type.\n   */\n  type?: TextInputType;\n}\nexport interface BaseTextInputProps\n  extends Omit<HTMLElementProps<'input', HTMLInputElement>, AriaLabels> {\n  /**\n   * id associated with the TextInput component.\n   */\n  id?: string;\n\n  /**\n   * Text that gives more detail about the requirements for the input.\n   */\n  description?: string;\n\n  /**\n   * Whether or not the field is optional.\n   * Default: false\n   */\n  optional?: boolean;\n\n  /**\n   * Whether or not the field is currently disabled.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Callback to be executed when the input stops being focused.\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n\n  /**\n   * Callback to be executed when the value of the input field changes.\n   */\n  onChange?: React.ChangeEventHandler<HTMLInputElement>;\n\n  /**\n   * The placeholder text shown in the input field before the user begins typing.\n   */\n  placeholder?: string;\n\n  /**\n   * The message shown below the input field if the value is invalid.\n   */\n  errorMessage?: string;\n\n  /**\n   * The current state of the TextInput. This can be none, valid, or error.\n   */\n  state?: State;\n\n  /**\n   * The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\n   */\n  value?: string;\n\n  /**\n   * className supplied to the TextInput container.\n   */\n  className?: string;\n\n  /**\n   *  determines whether or not the component appears in dark theme.\n   */\n  darkMode?: boolean;\n\n  /**\n   * Callback called whenever validation should be run.\n   *\n   * See [Form Validation & Error Handling](https://www.mongodb.design/foundation/forms/#form-validation--error-handling) for more\n   */\n  handleValidation?: (value: string) => void;\n\n  /**\n   *  determines the font size and padding.\n   */\n\n  sizeVariant?: SizeVariant;\n\n  /**\n   *  determines the base font size if sizeVariant is set to default.\n   */\n\n  baseFontSize?: BaseFontSize;\n}\n\nexport type TextInputProps = Either<\n  BaseTextInputProps & AriaLabelProps & TextInputTypeProp,\n  AriaLabels\n>;\n\nexport type TextInputComponentType =\n  React.ForwardRefExoticComponent<TextInputProps>;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { FormField, FormFieldInputContainer } from '@leafygreen-ui/form-field';\nimport { useValidation } from '@leafygreen-ui/hooks';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { consoleOnce } from '@leafygreen-ui/lib';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport { useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport {\n  SizeVariant,\n  State,\n  TextInputComponentType,\n  TextInputProps,\n  TextInputType,\n} from './TextInput.types';\n\n/**\n * # TextInput\n *\n * TextInput component\n *\n * ```\n<TextInput label='Input Label' onChange={() => execute when value of input field changes}/>\n```\n * @param props.id id associated with the TextInput component.\n * @param props.label Text shown in bold above the input element.\n * @param props.description Text that gives more detail about the requirements for the input.\n * @param props.optional Whether or not the field is optional.\n * @param props.disabled Whether or not the field is currently disabled.\n * @param props.onChange Callback to be executed when the value of the input field changes.\n * @param props.onBlur Callback to be executed when the input stops being focused.\n * @param props.placeholder The placeholder text shown in the input field before the user begins typing.\n * @param props.errorMessage The message shown below the input field if the value is invalid.\n * @param props.state The current state of the TextInput. This can be none, valid, or error.\n * @param props.value The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\n * @param props.className className supplied to the TextInput container.\n * @param props.darkMode determines whether or not the component appears in dark theme.\n * @param props.sizeVariant determines the size of the text and the height of the input.\n */\n\nconst TextInput = React.forwardRef<HTMLInputElement, TextInputProps>(\n  (\n    {\n      label,\n      description,\n      onChange,\n      onBlur,\n      placeholder,\n      errorMessage,\n      optional = false,\n      disabled = false,\n      state = State.None,\n      type = TextInputType.Text,\n      id,\n      value: controlledValue,\n      className,\n      darkMode: darkModeProp,\n      sizeVariant = SizeVariant.Default,\n      'aria-labelledby': ariaLabelledby,\n      handleValidation,\n      baseFontSize: baseFontSizeProp,\n      ...rest\n    }: TextInputProps,\n    forwardRef: React.Ref<HTMLInputElement>,\n  ) => {\n    const { darkMode } = useDarkMode(darkModeProp);\n    const isControlled = typeof controlledValue === 'string';\n    const [uncontrolledValue, setValue] = useState('');\n    const value = isControlled ? controlledValue : uncontrolledValue;\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n\n    // Validation\n    const validation = useValidation<HTMLInputElement>(handleValidation);\n\n    const onBlurHandler: React.FocusEventHandler<HTMLInputElement> = e => {\n      if (onBlur) {\n        onBlur(e);\n      }\n\n      validation.onBlur(e);\n    };\n\n    const onValueChange: React.ChangeEventHandler<HTMLInputElement> = e => {\n      if (onChange) {\n        onChange(e);\n      }\n\n      if (!isControlled) {\n        setValue(e.target.value);\n      }\n\n      validation.onChange(e);\n    };\n\n    if (type !== 'search' && !label && !ariaLabelledby) {\n      console.error(\n        'For screen-reader accessibility, label or aria-labelledby must be provided to TextInput.',\n      );\n    }\n\n    if (type === 'search') {\n      consoleOnce.warn(\n        'We recommend using the Leafygreen SearchInput for `type=\"search\"` inputs.',\n      );\n      if (!rest['aria-label']) {\n        console.error(\n          'For screen-reader accessibility, aria-label must be provided to TextInput.',\n        );\n      }\n    }\n\n    if (type === 'password') {\n      consoleOnce.warn(\n        'We recommend using the Leafygreen PasswordInput for `type=\"password\"` inputs.',\n      );\n    }\n\n    if (type === 'number') {\n      consoleOnce.warn(\n        'We recommend using the Leafygreen NumberInput for `type=\"number\"` inputs.',\n      );\n    }\n\n    return (\n      <FormField\n        label={label}\n        description={description}\n        errorMessage={errorMessage}\n        state={state}\n        size={sizeVariant}\n        disabled={disabled}\n        baseFontSize={baseFontSize}\n        darkMode={darkMode}\n        className={className}\n        id={id}\n        optional={optional}\n      >\n        <FormFieldInputContainer>\n          <input\n            {...rest}\n            aria-labelledby={ariaLabelledby}\n            type={type}\n            value={value}\n            required={!optional}\n            disabled={disabled}\n            placeholder={placeholder}\n            onChange={onValueChange}\n            onBlur={onBlurHandler}\n            ref={forwardRef}\n            autoComplete={disabled ? 'off' : rest?.autoComplete || 'on'}\n            aria-invalid={state === 'error'}\n            className={css`\n              width: 100%;\n            `}\n          />\n        </FormFieldInputContainer>\n      </FormField>\n    );\n  },\n) as TextInputComponentType;\n\nTextInput.displayName = 'TextInput';\n\nTextInput.propTypes = {\n  id: PropTypes.string,\n  label: PropTypes.string,\n  'aria-labelledby': PropTypes.string,\n  description: PropTypes.string,\n  optional: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  errorMessage: PropTypes.string,\n  state: PropTypes.oneOf(Object.values(State)),\n  value: PropTypes.string,\n  className: PropTypes.string,\n  sizeVariant: PropTypes.oneOf(Object.values(SizeVariant)),\n  baseFontSize: PropTypes.oneOf(Object.values(BaseFontSize)),\n  darkMode: PropTypes.bool,\n};\n\nexport default TextInput;\n"],"names":["_templateObject","State","None","Valid","Error","TextInputType","Email","Password","Search","Text","Url","Tel","Number","SizeVariant","XSmall","Small","Default","Large","TextInputFontSize","_objectSpread","BaseFontSize","_excluded","TextInput","React","forwardRef","_ref","label","description","onChange","onBlur","placeholder","errorMessage","_ref$optional","optional","_ref$disabled","disabled","_ref$state","state","_ref$type","type","id","controlledValue","value","className","darkModeProp","darkMode","_ref$sizeVariant","sizeVariant","ariaLabelledby","handleValidation","baseFontSizeProp","baseFontSize","rest","_objectWithoutProperties","useDarkMode","isControlled","_useState2","_slicedToArray","useState","uncontrolledValue","setValue","useUpdatedBaseFontSize","validation","useValidation","console","error","consoleOnce","warn","default","createElement","FormField","size","FormFieldInputContainer","_extends","required","e","target","ref","autoComplete","css","displayName","propTypes","PropTypes","string","bool","func","oneOf","Object","values"],"mappings":"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"}