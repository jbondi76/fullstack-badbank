[
  {
    "tags": {
      "param": "props.id id associated with the TextInput component.\nprops.label Text shown in bold above the input element.\nprops.description Text that gives more detail about the requirements for the input.\nprops.optional Whether or not the field is optional.\nprops.disabled Whether or not the field is currently disabled.\nprops.onChange Callback to be executed when the value of the input field changes.\nprops.onBlur Callback to be executed when the input stops being focused.\nprops.placeholder The placeholder text shown in the input field before the user begins typing.\nprops.errorMessage The message shown below the input field if the value is invalid.\nprops.state The current state of the TextInput. This can be none, valid, or error.\nprops.value The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\nprops.className className supplied to the TextInput container.\nprops.darkMode determines whether or not the component appears in dark theme.\nprops.sizeVariant determines the size of the text and the height of the input."
    },
    "description": "# TextInput\n\nTextInput component\n\n```\n<TextInput label='Input Label' onChange={() => execute when value of input field changes}/>\n```",
    "methods": [],
    "displayName": "TextInput",
    "props": {
      "InputHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input",
      "BaseTextInputProps": {
        "disabled": {
          "name": "disabled",
          "defaultValue": null,
          "description": "Whether or not the field is currently disabled.\nDefault: false",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "placeholder": {
          "name": "placeholder",
          "defaultValue": null,
          "description": "The placeholder text shown in the input field before the user begins typing.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "value": {
          "name": "value",
          "defaultValue": null,
          "description": "The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "onChange": {
          "name": "onChange",
          "defaultValue": null,
          "description": "Callback to be executed when the value of the input field changes.",
          "required": false,
          "type": {
            "name": "ChangeEventHandler<HTMLInputElement>"
          },
          "tags": {}
        },
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "className supplied to the TextInput container.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "id": {
          "name": "id",
          "defaultValue": null,
          "description": "id associated with the TextInput component.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "onBlur": {
          "name": "onBlur",
          "defaultValue": null,
          "description": "Callback to be executed when the input stops being focused.",
          "required": false,
          "type": {
            "name": "FocusEventHandler<HTMLInputElement>"
          },
          "tags": {}
        },
        "description": {
          "name": "description",
          "defaultValue": null,
          "description": "Text that gives more detail about the requirements for the input.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "optional": {
          "name": "optional",
          "defaultValue": null,
          "description": "Whether or not the field is optional.\nDefault: false",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "errorMessage": {
          "name": "errorMessage",
          "defaultValue": null,
          "description": "The message shown below the input field if the value is invalid.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "state": {
          "name": "state",
          "defaultValue": null,
          "description": "The current state of the TextInput. This can be none, valid, or error.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "State",
            "value": [
              {
                "value": "\"none\""
              },
              {
                "value": "\"valid\""
              },
              {
                "value": "\"error\""
              }
            ]
          },
          "tags": {}
        },
        "darkMode": {
          "name": "darkMode",
          "defaultValue": null,
          "description": "determines whether or not the component appears in dark theme.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "handleValidation": {
          "name": "handleValidation",
          "defaultValue": null,
          "description": "Callback called whenever validation should be run.\n\nSee [Form Validation & Error Handling](https://www.mongodb.design/foundation/forms/#form-validation--error-handling) for more",
          "required": false,
          "type": {
            "name": "(value: string) => void"
          },
          "tags": {}
        },
        "sizeVariant": {
          "name": "sizeVariant",
          "defaultValue": null,
          "description": "determines the font size and padding.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SizeVariant",
            "value": [
              {
                "value": "\"xsmall\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"default\""
              },
              {
                "value": "\"large\""
              }
            ]
          },
          "tags": {}
        },
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": null,
          "description": "determines the base font size if sizeVariant is set to default.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BaseFontSize",
            "value": [
              {
                "value": "13"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaLabelProps": {
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "Text shown in bold above the input element.\n\nOptional if `aria-labelledby` or `aria-label` is provided",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "aria-labelledby": {
          "name": "aria-labelledby",
          "defaultValue": null,
          "description": "Screen-reader label element.\n\nOptional if `label` or `aria-label` is provided",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "aria-label": {
          "name": "aria-label",
          "defaultValue": null,
          "description": "Screen reader label text\n\nOptional if `label` or `aria-labelledby` is provided",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {
      "param": "props.id id associated with the TextInput component.\nprops.label Text shown in bold above the input element.\nprops.description Text that gives more detail about the requirements for the input.\nprops.optional Whether or not the field is optional.\nprops.disabled Whether or not the field is currently disabled.\nprops.onChange Callback to be executed when the value of the input field changes.\nprops.onBlur Callback to be executed when the input stops being focused.\nprops.placeholder The placeholder text shown in the input field before the user begins typing.\nprops.errorMessage The message shown below the input field if the value is invalid.\nprops.state The current state of the TextInput. This can be none, valid, or error.\nprops.value The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\nprops.className className supplied to the TextInput container.\nprops.darkMode determines whether or not the component appears in dark theme.\nprops.sizeVariant determines the size of the text and the height of the input."
    },
    "description": "# TextInput\n\nTextInput component\n\n```\n<TextInput label='Input Label' onChange={() => execute when value of input field changes}/>\n```",
    "methods": [],
    "displayName": "LeafygreenUiTextInput",
    "props": {
      "InputHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input",
      "BaseTextInputProps": {
        "disabled": {
          "name": "disabled",
          "defaultValue": null,
          "description": "Whether or not the field is currently disabled.\nDefault: false",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "placeholder": {
          "name": "placeholder",
          "defaultValue": null,
          "description": "The placeholder text shown in the input field before the user begins typing.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "value": {
          "name": "value",
          "defaultValue": null,
          "description": "The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "onChange": {
          "name": "onChange",
          "defaultValue": null,
          "description": "Callback to be executed when the value of the input field changes.",
          "required": false,
          "type": {
            "name": "ChangeEventHandler<HTMLInputElement>"
          },
          "tags": {}
        },
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "className supplied to the TextInput container.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "id": {
          "name": "id",
          "defaultValue": null,
          "description": "id associated with the TextInput component.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "onBlur": {
          "name": "onBlur",
          "defaultValue": null,
          "description": "Callback to be executed when the input stops being focused.",
          "required": false,
          "type": {
            "name": "FocusEventHandler<HTMLInputElement>"
          },
          "tags": {}
        },
        "description": {
          "name": "description",
          "defaultValue": null,
          "description": "Text that gives more detail about the requirements for the input.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "optional": {
          "name": "optional",
          "defaultValue": null,
          "description": "Whether or not the field is optional.\nDefault: false",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "errorMessage": {
          "name": "errorMessage",
          "defaultValue": null,
          "description": "The message shown below the input field if the value is invalid.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "state": {
          "name": "state",
          "defaultValue": null,
          "description": "The current state of the TextInput. This can be none, valid, or error.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "State",
            "value": [
              {
                "value": "\"none\""
              },
              {
                "value": "\"valid\""
              },
              {
                "value": "\"error\""
              }
            ]
          },
          "tags": {}
        },
        "darkMode": {
          "name": "darkMode",
          "defaultValue": null,
          "description": "determines whether or not the component appears in dark theme.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "handleValidation": {
          "name": "handleValidation",
          "defaultValue": null,
          "description": "Callback called whenever validation should be run.\n\nSee [Form Validation & Error Handling](https://www.mongodb.design/foundation/forms/#form-validation--error-handling) for more",
          "required": false,
          "type": {
            "name": "(value: string) => void"
          },
          "tags": {}
        },
        "sizeVariant": {
          "name": "sizeVariant",
          "defaultValue": null,
          "description": "determines the font size and padding.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SizeVariant",
            "value": [
              {
                "value": "\"xsmall\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"default\""
              },
              {
                "value": "\"large\""
              }
            ]
          },
          "tags": {}
        },
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": null,
          "description": "determines the base font size if sizeVariant is set to default.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BaseFontSize",
            "value": [
              {
                "value": "13"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaLabelProps": {
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "Text shown in bold above the input element.\n\nOptional if `aria-labelledby` or `aria-label` is provided",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "aria-labelledby": {
          "name": "aria-labelledby",
          "defaultValue": null,
          "description": "Screen-reader label element.\n\nOptional if `label` or `aria-label` is provided",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "aria-label": {
          "name": "aria-label",
          "defaultValue": null,
          "description": "Screen reader label text\n\nOptional if `label` or `aria-labelledby` is provided",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      }
    }
  }
]