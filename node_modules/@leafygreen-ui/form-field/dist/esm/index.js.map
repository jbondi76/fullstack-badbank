{"version":3,"file":"index.js","sources":["../../src/constants.ts","../../src/FormField/FormField.types.ts","../../src/FormField/FormField.styles.ts","../../src/FormFieldFeedback/FormFieldFeedback.styles.ts","../../src/FormFieldContext/FormFieldContext.tsx","../../src/FormFieldFeedback/FormFieldFeedback.tsx","../../src/FormField/useFormFieldProps.ts","../../src/FormFieldInputContainer/FormFieldInputContainer.styles.ts","../../src/FormField/FormField.tsx","../../src/FormFieldInputContainer/FormFieldInputContainer.tsx"],"sourcesContent":["const LGID_ROOT = 'lg-form_field';\n\nexport const LGIDS_FORM_FIELD = {\n  root: LGID_ROOT,\n  description: `${LGID_ROOT}-description`,\n  errorMessage: `${LGID_ROOT}-error_message`,\n  feedback: `${LGID_ROOT}-feedback`,\n  input: `${LGID_ROOT}-input`,\n  label: `${LGID_ROOT}-label`,\n  optional: `${LGID_ROOT}-optional`,\n  successMessage: `${LGID_ROOT}-success_message`,\n} as const;\n\nexport const DEFAULT_MESSAGES = {\n  error: 'This input needs your attention',\n  success: 'Success',\n} as const;\n","import { DarkModeProps, HTMLElementProps } from '@leafygreen-ui/lib';\nimport { BaseFontSize, Size } from '@leafygreen-ui/tokens';\n\nexport const FormFieldState = {\n  None: 'none',\n  Error: 'error',\n  Valid: 'valid',\n} as const;\nexport type FormFieldState =\n  (typeof FormFieldState)[keyof typeof FormFieldState];\n\nexport interface FormFieldInputWrapperProps extends HTMLElementProps<'div'> {\n  [key: `data-${string}`]: any;\n}\n\nexport interface FormFieldChildrenProps {\n  id: string;\n  'aria-labelledby': string;\n  [key: string]: any;\n}\n\nexport type FormFieldChildren = React.ReactElement<FormFieldChildrenProps>;\n\ntype AriaLabelProps =\n  | {\n      /**\n       * The label rendered before the input\n       */\n      label: React.ReactNode;\n      'aria-label'?: string;\n      'aria-labelledby'?: string;\n    }\n  | {\n      label?: React.ReactNode;\n\n      /**\n       * A label for screen readers which is used if `label` or `aria-labelledby` are not defined\n       * {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label See aria-label MDN docs}\n       */\n      'aria-label': string;\n      'aria-labelledby'?: string;\n    }\n  | {\n      label?: React.ReactNode;\n      'aria-label'?: string;\n\n      /**\n       * A reference to an external label element which is used if `label` is not defined\n       * {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby See aria-labelledby MDN docs}\n       */\n      'aria-labelledby': string;\n    };\n\nexport type FormFieldProps = Omit<HTMLElementProps<'div'>, 'children'> &\n  AriaLabelProps &\n  DarkModeProps & {\n    /**\n     * `FormFieldInputContainer` component, or other custom input component\n     */\n    children: FormFieldChildren;\n\n    /**\n     * A description for the form field\n     */\n    description?: React.ReactNode;\n\n    /**\n     * The state of the component\n     */\n    state?: FormFieldState;\n\n    /**\n     * The size of the component\n     */\n    size?: Size;\n\n    /**\n     * Defines whether the component is disabled. This will set the `aria-disabled` and `readonly` attributes on the input, not the `disabled` attribute.\n     */\n    disabled?: boolean;\n\n    /**\n     * The message to display below the form field when in an error state\n     */\n    errorMessage?: React.ReactNode;\n\n    /**\n     * The message to display below the form field when in a valid state\n     */\n    successMessage?: React.ReactNode;\n\n    /**\n     * Base font size of the component. Only effective when `size == 'default'`\n     */\n    baseFontSize?: BaseFontSize;\n\n    /**\n     * Whether or not the field is labeled as optional.\n     */\n    optional?: boolean;\n\n    /**\n     * Whether or not the field is readonly.\n     */\n    readOnly?: boolean;\n  };\n","import { css } from '@leafygreen-ui/emotion';\nimport {\n  BaseFontSize,\n  Size,\n  spacing,\n  typeScales,\n  Variant,\n} from '@leafygreen-ui/tokens';\n\nimport { FormFieldState } from './FormField.types';\n\nexport const getFontSizeStyles = ({\n  baseFontSize,\n  size,\n}: {\n  baseFontSize: BaseFontSize;\n  size: Size;\n}) => {\n  if (size === Size.XSmall || size === Size.Small) {\n    return css`\n      font-size: ${typeScales.body1.fontSize}px;\n      line-height: ${typeScales.body1.lineHeight}px;\n    `;\n  }\n\n  if (size === Size.Default) {\n    return css`\n      font-size: ${baseFontSize}px;\n      line-height: ${typeScales.body1.lineHeight}px;\n    `;\n  }\n\n  if (size === Size.Large) {\n    return css`\n      font-size: ${typeScales.large.fontSize}px;\n      line-height: ${typeScales.large.lineHeight}px;\n    `;\n  }\n};\n\nexport const convertFormFieldStateToIconVariant = (state: FormFieldState) => {\n  if (state === FormFieldState.Error) {\n    return Variant.Error;\n  }\n\n  if (state === FormFieldState.Valid) {\n    return Variant.Success;\n  }\n\n  return Variant.Primary;\n};\n\nexport const textContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const marginBottom = css`\n  margin-bottom: ${spacing[100]}px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Size, spacing, typeScales } from '@leafygreen-ui/tokens';\n\nexport const containerStyles = css`\n  display: flex;\n  gap: ${spacing[100]}px;\n`;\n\nexport const spacingTop = css`\n  padding-top: ${spacing[100]}px;\n`;\n\nexport const hideContainerStyle = css`\n  opacity: 0;\n`;\n\nexport const iconWrapperStyles = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const getIconWrapperHeight = (size: Size) => {\n  return css`\n    height: ${size === Size.Large\n      ? typeScales.large.lineHeight\n      : typeScales.body1.lineHeight}px;\n  `;\n};\n","import React, { PropsWithChildren, useContext } from 'react';\n\nimport { Size } from '@leafygreen-ui/tokens';\n\nimport { FormFieldState } from '../FormField/FormField.types';\nimport { FormFieldInputElementProps } from '../FormField/useFormFieldProps';\n\nexport interface FormFieldContextProps {\n  disabled: boolean;\n  size: Size;\n  state: FormFieldState;\n  inputProps?: FormFieldInputElementProps;\n  optional?: boolean;\n}\n\nexport const defaultFormFieldContext = {\n  disabled: false,\n  size: Size.Default,\n  state: FormFieldState.None,\n};\n\nexport const FormFieldContext = React.createContext<FormFieldContextProps>(\n  defaultFormFieldContext,\n);\n\nexport const FormFieldProvider = ({\n  value,\n  children,\n}: PropsWithChildren<{\n  value: FormFieldContextProps;\n}>) => (\n  <FormFieldContext.Provider value={value}>\n    {children}\n  </FormFieldContext.Provider>\n);\n\n/**\n * Returns {@link FormFieldContextProps} to be used within the FormFieldInputContainer,\n * or within and custom FormField children\n */\nexport const useFormFieldContext = () => useContext(FormFieldContext);\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport Icon from '@leafygreen-ui/icon';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { color } from '@leafygreen-ui/tokens';\nimport { Body, Error, useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport { LGIDS_FORM_FIELD } from '../constants';\nimport {\n  convertFormFieldStateToIconVariant,\n  getFontSizeStyles,\n} from '../FormField/FormField.styles';\nimport { FormFieldState } from '../FormField/FormField.types';\n\nimport {\n  containerStyles,\n  getIconWrapperHeight,\n  hideContainerStyle,\n  iconWrapperStyles,\n  spacingTop,\n} from './FormFieldFeedback.styles';\nimport { FormFieldFeedbackProps } from './FormFieldFeedback.types';\n\nexport const FormFieldFeedback = ({\n  baseFontSize: baseFontSizeProp,\n  disabled,\n  errorMessage,\n  hideFeedback = false,\n  id,\n  size,\n  state,\n  successMessage,\n  ...rest\n}: FormFieldFeedbackProps) => {\n  const { theme } = useDarkMode();\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n  const fontStyles = getFontSizeStyles({ baseFontSize, size });\n\n  const isErrorState = state === FormFieldState.Error;\n  const isValidState = state === FormFieldState.Valid;\n  const showFormFieldFeedback = (isErrorState || isValidState) && !disabled;\n\n  const iconProps = showFormFieldFeedback\n    ? ({\n        glyph: isErrorState ? 'Warning' : 'Checkmark',\n        fill: color[theme].icon[convertFormFieldStateToIconVariant(state)]\n          .default,\n        title: isErrorState ? 'Error' : 'Valid',\n      } as const)\n    : undefined;\n\n  return (\n    <div\n      id={id}\n      data-lgid={LGIDS_FORM_FIELD.feedback}\n      data-testid={LGIDS_FORM_FIELD.feedback}\n      className={cx(containerStyles, {\n        [spacingTop]: showFormFieldFeedback,\n        [hideContainerStyle]: hideFeedback,\n      })}\n      aria-live=\"polite\"\n      aria-relevant=\"all\"\n      {...rest}\n    >\n      {showFormFieldFeedback && (\n        <>\n          {iconProps && (\n            <div className={cx(iconWrapperStyles, getIconWrapperHeight(size))}>\n              <Icon {...iconProps} aria-hidden />\n            </div>\n          )}\n          {isErrorState ? (\n            <Error\n              data-lgid={LGIDS_FORM_FIELD.errorMessage}\n              data-testid={LGIDS_FORM_FIELD.errorMessage}\n              className={fontStyles}\n            >\n              {errorMessage}\n            </Error>\n          ) : (\n            <Body\n              data-lgid={LGIDS_FORM_FIELD.successMessage}\n              data-testid={LGIDS_FORM_FIELD.successMessage}\n              className={fontStyles}\n            >\n              {successMessage}\n            </Body>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nFormFieldFeedback.displayName = 'FormFieldFeedback';\n","import { useIdAllocator } from '@leafygreen-ui/hooks';\n\nimport { LGIDS_FORM_FIELD } from '../constants';\n\nimport { FormFieldProps, FormFieldState } from './FormField.types';\n\nexport interface FormFieldInputElementProps {\n  id: string;\n  'aria-describedby': string;\n  'aria-labelledby'?: string;\n  'aria-label'?: string;\n  'aria-disabled'?: boolean;\n  'aria-invalid'?: FormFieldProps['aria-invalid'];\n  readOnly?: boolean;\n}\n\nexport interface FormFieldElementProps {\n  labelId: string;\n  descriptionId: string;\n  feedbackId: string;\n  inputId: string;\n  inputProps: FormFieldInputElementProps;\n}\n\nexport const useFormFieldProps = ({\n  label,\n  description,\n  state,\n  id,\n  disabled,\n  ...rest\n}: Partial<FormFieldProps>): FormFieldElementProps => {\n  const labelId = useIdAllocator({ prefix: LGIDS_FORM_FIELD.label });\n  const descriptionId = useIdAllocator({\n    prefix: LGIDS_FORM_FIELD.description,\n  });\n  const feedbackId = useIdAllocator({ prefix: LGIDS_FORM_FIELD.feedback });\n  const generatedInputId = useIdAllocator({ prefix: LGIDS_FORM_FIELD.input });\n  const inputId = id ?? generatedInputId;\n\n  const hasError = state === FormFieldState.Error;\n  const hasFeedback = state !== FormFieldState.None;\n\n  const ariaLabelledby = label ? labelId : rest['aria-labelledby'];\n  const ariaLabel = label || ariaLabelledby ? undefined : rest['aria-label'];\n  const ariaDescribedby = `${description ? descriptionId : ''} ${\n    hasFeedback ? feedbackId : ''\n  }`.trim();\n  const ariaInvalid = rest['aria-invalid'] ?? hasError;\n\n  const inputProps: FormFieldInputElementProps = {\n    id: inputId,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-label': ariaLabel,\n    'aria-disabled': disabled,\n    readOnly: rest.readOnly ? rest.readOnly : disabled,\n    'aria-invalid': ariaInvalid,\n  };\n\n  return {\n    labelId,\n    descriptionId,\n    feedbackId,\n    inputId,\n    inputProps,\n  };\n};\n","import { css, cx } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  color,\n  focusRing,\n  fontFamilies,\n  fontWeights,\n  hoverRing,\n  Size,\n  spacing,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nimport { FormFieldState } from '../FormField/FormField.types';\nimport { FormFieldContextProps } from '../FormFieldContext';\n\nexport const inputElementClassName = createUniqueClassName('form-field-input');\nexport const iconClassName = createUniqueClassName('form-field-icon');\nconst autofillShadowOverride = (color: string) => `0 0 0 100px ${color} inset`;\n\nexport const inputWrapperBaseStyles = css`\n  display: flex;\n  align-items: center;\n  gap: ${spacing[1]}px;\n  font-size: inherit;\n  line-height: inherit;\n  font-family: ${fontFamilies.default};\n  width: 100%;\n  height: 36px;\n  font-weight: ${fontWeights.regular};\n  border: 1px solid;\n  z-index: 1;\n  outline: none;\n  border-radius: 6px;\n  transition: ${transitionDuration.default}ms ease-in-out;\n  transition-property: border-color, box-shadow;\n  z-index: 0;\n\n  & .${inputElementClassName} {\n    font-family: ${fontFamilies.default};\n    color: inherit;\n    background-color: inherit;\n    font-size: inherit;\n    line-height: inherit;\n    outline: none;\n    border: none;\n  }\n\n  & .${iconClassName} svg,\n  & svg {\n    min-height: 16px;\n    min-width: 16px;\n  }\n`;\n\nexport const getInputWrapperModeStyles = (theme: Theme) => {\n  const isDarkMode = theme === Theme.Dark;\n  /** token exceptions: background-color value was designated prior to token system */\n  const backgroundColor = isDarkMode\n    ? palette.gray.dark4\n    : color.light.background.primary.default;\n\n  return css`\n    color: ${color[theme].text.primary.default};\n    background: ${backgroundColor};\n    border: 1px solid;\n\n    & .${inputElementClassName} {\n      &:-webkit-autofill {\n        color: ${color[theme].text.primary.default};\n        background: ${backgroundColor};\n        border: 1px solid ${color[theme].border.primary.default};\n        -webkit-text-fill-color: ${color[theme].text.primary.default};\n        box-shadow: ${autofillShadowOverride(backgroundColor)};\n\n        &:focus {\n          box-shadow: ${autofillShadowOverride(backgroundColor)},\n            ${focusRing[theme].input};\n          border-color: ${color[theme].border.primary.focus};\n        }\n\n        &:hover:not(:focus) {\n          box-shadow: ${autofillShadowOverride(backgroundColor)},\n            ${hoverRing[theme].gray};\n        }\n      }\n\n      &::placeholder {\n        font-weight: ${fontWeights.regular};\n        color: ${color[theme].text.placeholder.default};\n      }\n    }\n  `;\n};\n\nconst focusSelector = (styles: string) => css`\n  @supports selector(:has(a, b)) {\n    &:focus-within:not(:has(.${iconClassName}:focus)) {\n      ${styles}\n    }\n  }\n\n  /* Fallback for when \"has\" is unsupported */\n  @supports not selector(:has(a, b)) {\n    &:focus-within {\n      ${styles}\n    }\n  }\n`;\n\nexport const inputWrapperFocusStyles: Record<Theme, string> = {\n  [Theme.Light]: focusSelector(`\n     {\n      box-shadow: ${focusRing.light.input};\n      border-color: ${palette.white};\n    }\n  `),\n  [Theme.Dark]: focusSelector(`\n     {\n      box-shadow: ${focusRing.dark.input};\n      border-color: ${palette.gray.dark4};\n    }\n  `),\n};\n\n/** Selector that is true if the icon element passed in is a button */\nconst iconIsButtonSelector = `&:has(button.${iconClassName})`;\n\nexport const inputWrapperSizeStyles: Record<Size, string> = {\n  [Size.XSmall]: css`\n    height: 22px;\n    padding-inline: ${spacing[200]}px;\n\n    ${iconIsButtonSelector} {\n      padding-inline-end: ${spacing[100]}px;\n    }\n  `,\n  [Size.Small]: css`\n    height: 28px;\n    padding-inline: ${spacing[200]}px;\n\n    ${iconIsButtonSelector} {\n      padding-inline-end: ${spacing[100]}px;\n    }\n  `,\n  [Size.Default]: css`\n    height: 36px;\n    padding-inline: ${spacing[300]}px;\n\n    ${iconIsButtonSelector} {\n      padding-inline-end: ${spacing[150]}px;\n    }\n  `,\n  [Size.Large]: css`\n    height: 48px;\n    padding-inline: ${spacing[300]}px;\n\n    ${iconIsButtonSelector} {\n      padding-inline-end: ${spacing[200]}px;\n    }\n  `,\n};\n\nexport const getInputWrapperStateStyles = ({\n  theme,\n  state,\n}: {\n  theme: Theme;\n  state: FormFieldState;\n}) => {\n  const styleMap = {\n    [FormFieldState.Error]: css`\n      border-color: ${color[theme].border.error.default};\n\n      &:hover,\n      &:active {\n        &:not(:focus) {\n          box-shadow: ${hoverRing[theme].red};\n        }\n      }\n    `,\n    [FormFieldState.None]: css`\n      border-color: ${color[theme].border.primary.default};\n\n      &:hover,\n      &:active {\n        &:not(:focus) {\n          box-shadow: ${hoverRing[theme].gray};\n        }\n      }\n    `,\n    [FormFieldState.Valid]: css`\n      border-color: ${color[theme].border.success.default};\n\n      &:hover,\n      &:active {\n        &:not(:focus) {\n          box-shadow: ${hoverRing[theme].green};\n        }\n      }\n    `,\n  };\n\n  return styleMap[state];\n};\n\nexport const getInputWrapperDisabledThemeStyles = (theme: Theme) => {\n  return css`\n    cursor: not-allowed;\n    color: ${color[theme].text.disabled.default};\n    background-color: ${color[theme].background.disabled.default};\n    border-color: ${color[theme].border.disabled.default};\n\n    &:hover,\n    &:active {\n      &:not(:focus) {\n        box-shadow: inherit;\n      }\n    }\n\n    & .${inputElementClassName} {\n      cursor: not-allowed;\n      pointer-events: none;\n      color: ${color[theme].text.disabled.default};\n\n      &::placeholder {\n        color: inherit;\n      }\n\n      &:-webkit-autofill {\n        &,\n        &:hover,\n        &:focus {\n          appearance: none;\n\n          border: 1px solid ${color[theme].border.disabled.hover};\n          -webkit-text-fill-color: ${color[theme].text.disabled.hover};\n          box-shadow: ${autofillShadowOverride(\n            color[theme].background.disabled.hover,\n          )};\n        }\n\n        &:hover:not(:focus) {\n          box-shadow: inherit;\n        }\n      }\n    }\n  `;\n};\n\nexport function getInputWrapperStyles({\n  disabled,\n  size: sizeProp,\n  state,\n  theme,\n}: Required<\n  Pick<FormFieldContextProps, 'disabled' | 'size' | 'state'> & { theme: Theme }\n>) {\n  return cx(\n    inputWrapperBaseStyles,\n    getInputWrapperModeStyles(theme),\n    inputWrapperSizeStyles[sizeProp],\n    {\n      [cx(\n        getInputWrapperStateStyles({ theme, state }),\n        inputWrapperFocusStyles[theme],\n      )]: !disabled,\n      [getInputWrapperDisabledThemeStyles(theme)]: disabled,\n    },\n  );\n}\n\nexport const childrenWrapperStyles = css`\n  width: 100%;\n`;\n\nexport const additionalChildrenWrapperStyles = css`\n  display: flex;\n  align-items: center;\n  gap: ${spacing[100]}px;\n`;\n\nexport const getIconDisabledThemeStyles = (theme: Theme) => {\n  return css`\n    color: ${color[theme].icon.disabled.default};\n  `;\n};\n\nexport const getIconThemeStyles = (theme: Theme) => {\n  return css`\n    color: ${color[theme].icon.secondary.default};\n  `;\n};\n\nexport const getOptionalTextStyle = (theme: Theme) => {\n  return css`\n    color: ${color[theme].text.secondary.default};\n\n    font-size: 12px;\n    line-height: 12px;\n    font-style: italic;\n    font-weight: ${fontWeights.regular};\n    display: flex;\n    align-items: center;\n    > p {\n      margin: 0;\n    }\n  `;\n};\n","import React, { forwardRef } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport LeafyGreenProvider from '@leafygreen-ui/leafygreen-provider';\nimport { Size } from '@leafygreen-ui/tokens';\nimport {\n  Description,\n  Label,\n  useUpdatedBaseFontSize,\n} from '@leafygreen-ui/typography';\n\nimport { DEFAULT_MESSAGES, LGIDS_FORM_FIELD } from '../constants';\nimport { FormFieldProvider } from '../FormFieldContext';\nimport { FormFieldFeedback } from '../FormFieldFeedback';\n\nimport {\n  getFontSizeStyles,\n  marginBottom,\n  textContainerStyle,\n} from './FormField.styles';\nimport { type FormFieldProps, FormFieldState } from './FormField.types';\nimport { useFormFieldProps } from './useFormFieldProps';\n\n/**\n * Creates a form field element with the appropriate styles and attributes for each element.\n *\n * Use the {@link FormFieldInput} element to apply the appropriate\n * interaction styles to the inner container element.\n *\n * See .stories file for examples\n * */\nexport const FormField = forwardRef<HTMLDivElement, FormFieldProps>(\n  (\n    {\n      label,\n      description,\n      children,\n      baseFontSize: baseFontSizeProp,\n      state = FormFieldState.None,\n      size = Size.Default,\n      disabled = false,\n      errorMessage = DEFAULT_MESSAGES.error,\n      successMessage = DEFAULT_MESSAGES.success,\n      className,\n      darkMode,\n      optional,\n      id,\n      ...rest\n    }: FormFieldProps,\n    fwdRef,\n  ) => {\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n    const fontStyles = getFontSizeStyles({ baseFontSize, size });\n\n    const { labelId, descriptionId, feedbackId, inputId, inputProps } =\n      useFormFieldProps({ label, description, state, id, disabled, ...rest });\n\n    const formFieldFeedbackProps = {\n      baseFontSize,\n      disabled,\n      errorMessage,\n      id: feedbackId,\n      size,\n      state,\n      successMessage,\n    } as const;\n\n    return (\n      <LeafyGreenProvider darkMode={darkMode}>\n        <FormFieldProvider\n          value={{ disabled, size, state, inputProps, optional }}\n        >\n          <div className={cx(fontStyles, className)} ref={fwdRef} {...rest}>\n            <div\n              className={cx(textContainerStyle, {\n                [marginBottom]: !!(label || description),\n              })}\n            >\n              {label && (\n                <Label\n                  data-testid={LGIDS_FORM_FIELD.label}\n                  className={fontStyles}\n                  htmlFor={inputId}\n                  id={labelId}\n                  disabled={disabled}\n                >\n                  {label}\n                </Label>\n              )}\n              {description && (\n                <Description\n                  data-testid={LGIDS_FORM_FIELD.description}\n                  className={fontStyles}\n                  id={descriptionId}\n                  disabled={disabled}\n                >\n                  {description}\n                </Description>\n              )}\n            </div>\n            {children}\n            <FormFieldFeedback {...formFieldFeedbackProps} />\n          </div>\n        </FormFieldProvider>\n      </LeafyGreenProvider>\n    );\n  },\n);\n\nFormField.displayName = 'FormField';\n","import React, { forwardRef } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { Size } from '@leafygreen-ui/tokens';\n\nimport { LGIDS_FORM_FIELD } from '../constants';\nimport { FormFieldState } from '../FormField/FormField.types';\nimport { useFormFieldContext } from '../FormFieldContext/FormFieldContext';\n\nimport {\n  additionalChildrenWrapperStyles,\n  childrenWrapperStyles,\n  getIconDisabledThemeStyles,\n  getIconThemeStyles,\n  getInputWrapperStyles,\n  getOptionalTextStyle,\n  iconClassName,\n  inputElementClassName,\n} from './FormFieldInputContainer.styles';\nimport { FormFieldInputContainerProps } from './FormFieldInputContainer.types';\n\n/**\n * Applies styling around the `input` of a FormField element\n * @internal\n */\nexport const FormFieldInputContainer = forwardRef<\n  HTMLDivElement,\n  FormFieldInputContainerProps\n>(\n  (\n    { contentEnd, className, children, ...rest }: FormFieldInputContainerProps,\n    fwdRef,\n  ) => {\n    const { theme } = useDarkMode();\n    const { disabled, size, state, inputProps, optional } =\n      useFormFieldContext();\n\n    const inputWrapperStyles = getInputWrapperStyles({\n      disabled,\n      size: size ?? Size.Default,\n      state,\n      theme,\n    });\n\n    const renderedChildren = React.cloneElement(children, {\n      ...inputProps,\n      className: cx(inputElementClassName, children.props.className),\n    });\n\n    const showOptionalText =\n      state === FormFieldState.None && !disabled && optional;\n    const showAdditionalChildren = showOptionalText || contentEnd;\n\n    return (\n      <div {...rest} ref={fwdRef} className={cx(inputWrapperStyles, className)}>\n        <div className={childrenWrapperStyles}>{renderedChildren}</div>\n        {showAdditionalChildren && (\n          <div className={additionalChildrenWrapperStyles}>\n            {showOptionalText && (\n              <div\n                data-lgid={LGIDS_FORM_FIELD.optional}\n                className={getOptionalTextStyle(theme)}\n              >\n                <p>Optional</p>\n              </div>\n            )}\n\n            {contentEnd &&\n              React.cloneElement(contentEnd, {\n                className: cx(\n                  iconClassName,\n                  getIconThemeStyles(theme),\n                  { [getIconDisabledThemeStyles(theme)]: disabled },\n                  contentEnd.props.className,\n                ),\n              })}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nFormFieldInputContainer.displayName = 'FormFieldInputWrapper';\n"],"names":["LGID_ROOT","LGIDS_FORM_FIELD","root","description","concat","errorMessage","feedback","input","label","optional","successMessage","DEFAULT_MESSAGES","error","success","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","FormFieldState","None","Error","Valid","defaultFormFieldContext","disabled","size","Size","Default","state","FormFieldContext","React","createContext","FormFieldProvider","_ref","value","children","createElement","Provider","useFormFieldContext","useContext","getFontSizeStyles","baseFontSize","XSmall","Small","css","_taggedTemplateLiteral","typeScales","body1","fontSize","lineHeight","Large","large","convertFormFieldStateToIconVariant","Variant","Success","Primary","textContainerStyle","marginBottom","spacing","containerStyles","spacingTop","hideContainerStyle","iconWrapperStyles","getIconWrapperHeight","_excluded","FormFieldFeedback","baseFontSizeProp","_ref$hideFeedback","hideFeedback","id","rest","_objectWithoutProperties","theme","useDarkMode","useUpdatedBaseFontSize","fontStyles","isErrorState","showFormFieldFeedback","iconProps","glyph","fill","color","icon","default","title","undefined","_extends","className","cx","_defineProperty","Fragment","Icon","Body","displayName","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","FormField","forwardRef","fwdRef","_ref$state","_ref$size","_ref$disabled","_ref$errorMessage","_ref$successMessage","darkMode","_useFormFieldProps","_rest$ariaInvalid","labelId","useIdAllocator","prefix","descriptionId","feedbackId","generatedInputId","inputId","hasError","hasFeedback","ariaLabelledby","ariaLabel","ariaDescribedby","trim","ariaInvalid","inputProps","readOnly","useFormFieldProps","_objectSpread","formFieldFeedbackProps","LeafyGreenProvider","ref","Label","htmlFor","Description","inputElementClassName","createUniqueClassName","iconClassName","autofillShadowOverride","inputWrapperBaseStyles","fontFamilies","fontWeights","regular","transitionDuration","focusSelector","styles","inputWrapperFocusStyles","Theme","Light","focusRing","light","palette","white","Dark","dark","gray","dark4","iconIsButtonSelector","inputWrapperSizeStyles","getInputWrapperStyles","_ref2","sizeProp","backgroundColor","background","primary","text","border","focus","hoverRing","placeholder","getInputWrapperModeStyles","red","green","getInputWrapperStateStyles","hover","getInputWrapperDisabledThemeStyles","childrenWrapperStyles","additionalChildrenWrapperStyles","getIconDisabledThemeStyles","getIconThemeStyles","secondary","getOptionalTextStyle","FormFieldInputContainer","contentEnd","_useFormFieldContext","inputWrapperStyles","renderedChildren","cloneElement","props","showOptionalText","showAdditionalChildren"],"mappings":"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"}