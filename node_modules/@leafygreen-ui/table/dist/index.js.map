{"version":3,"file":"index.js","sources":["../src/TableContext/TableContext.tsx","../src/Cell/Cell.styles.ts","../src/utils/getParentRowId.ts","../src/Cell/Cell.tsx","../src/Cell/HeaderCell/HeaderCell.types.ts","../src/Cell/HeaderCell/HeaderCell.styles.ts","../src/Row/Row.styles.ts","../src/ExpandedContent/ExpandedContent.styles.ts","../src/Cell/HeaderCell/SortIcon/SortIcon.tsx","../src/Cell/HeaderCell/HeaderCell.tsx","../src/Row/RowContext.tsx","../src/Row/InternalRowBase.tsx","../src/utils/areAncestorsExpanded.ts","../src/ExpandedContent/ExpandedContent.tsx","../src/Row/HeaderRow/HeaderRow.tsx","../src/Row/InternalRowWithoutRT.tsx","../src/ToggleExpandedIcon/ToggleExpandedIcon.styles.tsx","../src/Cell/Cell.types.ts","../src/Cell/InternalCell.tsx","../src/ToggleExpandedIcon/ToggleExpandedIcon.tsx","../src/Row/RowCellChildren.tsx","../src/Table/Table.styles.ts","../src/Row/InternalRowWithRT.tsx","../src/Row/Row.tsx","../src/Table/Table.tsx","../src/TableBody/TableBody.tsx","../src/TableHead/TableHead.styles.tsx","../src/TableV10/styles.tsx","../src/TableHead/TableHead.tsx","../src/TableV10/Cell.tsx","../src/TableV10/HeaderRow.tsx","../src/TableV10/NestedRow.tsx","../src/TableV10/TableContext.tsx","../src/TableV10/useSSR.ts","../src/TableV10/Row.tsx","../src/TableV10/SortContext.tsx","../src/TableV10/TableBody.tsx","../src/TableV10/TableHead.tsx","../src/TableV10/Table.tsx","../src/TableV10/TableHeader.tsx","../src/useLeafyGreenTable/useLeafyGreenTable.styles.ts","../src/useLeafyGreenTable/TableHeaderCheckbox.tsx","../src/useLeafyGreenTable/TableRowCheckbox.tsx","../src/useLeafyGreenTable/useLeafyGreenTable.tsx","../src/V11Adapter/processColumns.tsx","../src/V11Adapter/processData.tsx","../src/V11Adapter/V11Adapter.tsx"],"sourcesContent":["import React, { createContext, PropsWithChildren, useContext } from 'react';\n\nimport LeafyGreenProvider from '@leafygreen-ui/leafygreen-provider';\n\nimport { LGRowData } from '../useLeafyGreenTable';\nimport getParentRowId from '../utils/getParentRowId';\n\nimport { type TableContextValues } from './TableContext.types';\n\nexport const TableContext = createContext<\n  Partial<TableContextValues<LGRowData>>\n>({});\n\nexport const useTableContext = <T extends LGRowData>() =>\n  useContext<TableContextValues<T>>(\n    TableContext as React.Context<TableContextValues<T>>,\n  );\n\nconst TableContextProvider = <T extends LGRowData>({\n  children,\n  darkMode,\n  table,\n  shouldAlternateRowColor,\n  disableAnimations,\n}: PropsWithChildren<Partial<TableContextValues<T>>>) => {\n  const getRowById = (id?: string) =>\n    id ? table?.getRowModel().rowsById?.[id] : undefined;\n\n  const getParentRow = (childId?: string) =>\n    getRowById(getParentRowId(childId));\n\n  /** The appropriately typed context provider */\n  const TableProvider = (TableContext as React.Context<TableContextValues<T>>)\n    .Provider;\n\n  return (\n    <LeafyGreenProvider darkMode={darkMode}>\n      <TableProvider\n        value={{\n          table,\n          getRowById,\n          getParentRow,\n          shouldAlternateRowColor,\n          disableAnimations,\n        }}\n      >\n        {children}\n      </TableProvider>\n    </LeafyGreenProvider>\n  );\n};\n\nexport default TableContextProvider;\n","import { TransitionStatus } from 'react-transition-group';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { spacing, transitionDuration, typeScales } from '@leafygreen-ui/tokens';\n\nimport { Align } from './Cell.types';\n\n/** The base left & right padding in the table */\nexport const baseTableSidePadding = spacing[4];\n\n/** the default width of the expand icon */\nconst iconSize = 28;\n\n/** the default height of a cell */\nexport const standardCellHeight = spacing[5] + spacing[2];\n\nexport const baseCellStyles = css`\n  padding: 0 8px;\n  overflow: hidden;\n\n  &:focus-visible {\n    box-shadow: inset;\n  }\n\n  &:last-child {\n    padding-right: ${baseTableSidePadding}px;\n  }\n`;\n\nexport const alignmentStyles = (align: Align = 'left') => css`\n  justify-content: ${align};\n  text-align: ${align};\n`;\n\nexport const getCellPadding = ({\n  depth = 0,\n  isExpandable,\n  isSelectable,\n}: {\n  depth?: number;\n  isExpandable?: boolean;\n  isSelectable?: boolean;\n}) => {\n  if (depth === 0) {\n    if (isSelectable) {\n      return css`\n        padding-left: ${spacing[2]}px;\n        padding-right: ${spacing[2]}px;\n      `;\n    } else {\n      return css`\n        padding-left: ${baseTableSidePadding +\n        (isExpandable ? 0 : spacing[2])}px;\n      `;\n    }\n  }\n\n  const parentIconsPadding = 8 * (depth - 1); // how much space do parent icons take up\n  const thisIconPadding = isExpandable ? spacing[2] : 0;\n  const depthPadding =\n    iconSize * depth - (parentIconsPadding + thisIconPadding);\n  return css`\n    padding-left: ${baseTableSidePadding + depthPadding}px;\n  `;\n};\n\nexport const basicCellStyles = css`\n  &:first-child {\n    ${getCellPadding({\n      depth: 0,\n      isExpandable: false,\n      isSelectable: false,\n    })}\n  }\n`;\n\nexport const cellTransitionContainerStyles = css`\n  display: flex;\n  align-items: center;\n  min-height: ${standardCellHeight}px;\n  transition-property: min-height, max-height, opacity, padding, transform;\n  transition-duration: ${transitionDuration.default}ms;\n  transition-timing-function: ease;\n`;\n\nexport const truncatedContentStyles = css`\n  /* See https://css-tricks.com/line-clampin/#aa-the-standardized-way */\n  display: -webkit-box;\n  -webkit-line-clamp: ${standardCellHeight / typeScales.body1.lineHeight};\n  -webkit-box-orient: vertical;\n  -webkit-box-align: start;\n`;\n\nexport const disableAnimationStyles = css`\n  transition-duration: 0;\n  transition: none;\n`;\n\nexport const cellContentTransitionStateStyles = (\n  height?: number,\n): Record<TransitionStatus, string> => {\n  const _hiddenStyles = css`\n    opacity: 0;\n    min-height: 0;\n    max-height: 0;\n    overflow: hidden;\n  `;\n\n  return {\n    entered: css`\n      opacity: 1;\n      min-height: ${standardCellHeight}px;\n      max-height: ${height ? height + 'px' : 'unset'};\n    `,\n    entering: _hiddenStyles,\n    exiting: _hiddenStyles,\n    exited: _hiddenStyles,\n    unmounted: _hiddenStyles,\n  };\n};\n","/**\n * `react-table`'s Row `id`s are configured so that the first nested row of Row with `id` '0' is: '0.0'.\n *\n * This function parses a Row's `id` to return its immediate parent Row's id if it exists, and returns `undefined` otherwise.\n *\n * @param childId `id` of the referenced row\n * @returns the `id` of the parent row\n */\nfunction getParentRowId(childId?: string) {\n  if (childId) {\n    const childIds = childId.split('.');\n    const parentId = childIds.slice(0, childIds.length - 1).join('.');\n    return parentId.length > 0 ? parentId : undefined;\n  }\n}\n\nexport default getParentRowId;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\n\nimport { useTableContext } from '../TableContext';\n\nimport {\n  alignmentStyles,\n  baseCellStyles,\n  basicCellStyles,\n  cellTransitionContainerStyles,\n  disableAnimationStyles,\n} from './Cell.styles';\nimport { CellProps } from '.';\n\nconst Cell = ({\n  className,\n  contentClassName,\n  align,\n  children,\n  ...rest\n}: CellProps) => {\n  const { disableAnimations } = useTableContext();\n  return (\n    <td className={cx(baseCellStyles, basicCellStyles, className)} {...rest}>\n      <div\n        className={cx(\n          cellTransitionContainerStyles,\n          alignmentStyles(align),\n          { [disableAnimationStyles]: disableAnimations },\n          contentClassName,\n        )}\n      >\n        {children}\n      </div>\n    </td>\n  );\n};\n\nCell.displayName = 'Cell';\n\nexport default Cell;\n","import { Header } from '@tanstack/react-table';\n\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\n\nimport { LGRowData } from '../../useLeafyGreenTable';\n\nexport const SortState = {\n  Asc: 'asc',\n  Desc: 'desc',\n  Off: 'off',\n  None: 'none',\n} as const;\n\nexport type SortState = (typeof SortState)[keyof typeof SortState];\n\nexport interface SortStates {\n  [key: string]: SortState;\n}\n\nexport interface HeaderCellProps<T extends LGRowData>\n  extends HTMLElementProps<'th'> {\n  /**\n   * The `align` prop set on a HeaderCell will serve as the default `align` prop on the TableCell corresponding to the HeaderCell's index.\n   */\n  align?: HTMLElementProps<'th'>['align'];\n  /**\n   * Determines the current sorting direction.\n   */\n  sortState?: SortState;\n  /**\n   * Header object passed from the `useLeafyGreenTable` hook.\n   */\n  header?: Header<T, unknown>;\n  /**\n   * Index of the HeaderCell set internally in HeaderRow\n   */\n  cellIndex?: number;\n}\n","import { css } from '@leafygreen-ui/emotion';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const headerCellContentStyles = css`\n  height: ${spacing[5] + spacing[2]}px;\n`;\n\nexport const getHeaderCellWidthStyles = (size: number) => css`\n  width: ${size}px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { focusRing, hoverRing } from '@leafygreen-ui/tokens';\n\nexport const expandedContentParentStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.dark4};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.gray.light3};\n  `,\n};\n\n// applied directly to rows for VS\nexport const selectedRowStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.blue.dark3};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.blue.light3};\n  `,\n};\n\n// applied directly to rows for VS\nexport const grayZebraRowStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.dark4};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.gray.light3};\n  `,\n};\n\nexport const zebraStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    &:nth-of-type(even) {\n      ${grayZebraRowStyles[Theme.Dark]}\n    }\n  `,\n  [Theme.Light]: css`\n    &:nth-of-type(even) {\n      ${grayZebraRowStyles[Theme.Light]}\n    }\n  `,\n};\n\nexport const clickableStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    border-radius: 6px;\n    cursor: pointer;\n    &:hover:not(:focus) {\n      outline: none;\n      box-shadow: inset ${hoverRing[Theme.Dark].gray};\n    }\n\n    &:focus,\n    &:focus-visible {\n      outline: none;\n      box-shadow: inset ${focusRing[Theme.Dark].input};\n    }\n  `,\n  [Theme.Light]: css`\n    border-radius: 6px;\n    cursor: pointer;\n    &:hover:not(:focus) {\n      outline: none;\n      box-shadow: inset ${hoverRing[Theme.Light].gray};\n    }\n\n    &:focus,\n    &:focus-visible {\n      outline: none;\n      box-shadow: inset ${focusRing[Theme.Light].input};\n    }\n  `,\n};\n\nexport const disabledStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    pointer-events: none;\n    background-color: ${palette.gray.dark2};\n    color: ${palette.gray.base};\n  `,\n  [Theme.Light]: css`\n    pointer-events: none;\n    background-color: ${palette.gray.light2};\n    color: ${palette.gray.base};\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { transitionDuration } from '@leafygreen-ui/tokens';\n\nexport const baseStyles = css`\n  padding: 0;\n  overflow: hidden;\n  transition: ${transitionDuration.default}ms ease;\n`;\n\nexport const expandedContentStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.dark4};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.gray.light3};\n  `,\n};\n","import React, { MouseEventHandler } from 'react';\n\nimport Icon from '@leafygreen-ui/icon';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nimport { SortState } from '../HeaderCell.types';\n\nimport { SortIconProps } from './SortIcon.types';\n\nconst glyphs: Record<SortState, string> = {\n  [SortState.Asc]: 'SortAscending',\n  [SortState.Desc]: 'SortDescending',\n  [SortState.Off]: 'Unsorted',\n  [SortState.None]: '',\n};\n\nconst themeGlyphColors: Record<\n  Theme,\n  Record<Exclude<SortState, 'none'>, string>\n> = {\n  [Theme.Dark]: {\n    [SortState.Asc]: palette.blue.base,\n    [SortState.Desc]: palette.blue.base,\n    [SortState.Off]: palette.gray.light1,\n  },\n  [Theme.Light]: {\n    [SortState.Asc]: palette.blue.base,\n    [SortState.Desc]: palette.blue.base,\n    [SortState.Off]: palette.gray.dark1,\n  },\n};\n\nconst SortIcon = ({ sortState, onSortIconClick, ...rest }: SortIconProps) => {\n  const { theme } = useDarkMode();\n\n  const handleClick: MouseEventHandler = e => {\n    onSortIconClick?.(e);\n  };\n\n  if (sortState === SortState.None) {\n    return <></>;\n  } else {\n    return (\n      <IconButton onClick={handleClick} {...rest}>\n        <Icon\n          glyph={glyphs[sortState]}\n          fill={themeGlyphColors[theme][sortState]}\n        />\n      </IconButton>\n    );\n  }\n};\n\nexport default SortIcon;\n","import React, { PropsWithChildren } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\n\nimport { useTableContext } from '../../TableContext';\nimport { LGRowData } from '../../useLeafyGreenTable';\nimport {\n  alignmentStyles,\n  baseCellStyles,\n  cellTransitionContainerStyles,\n  getCellPadding,\n} from '../Cell.styles';\n\nimport SortIcon from './SortIcon/SortIcon';\nimport {\n  getHeaderCellWidthStyles,\n  headerCellContentStyles,\n} from './HeaderCell.styles';\nimport { HeaderCellProps, SortState, SortStates } from './HeaderCell.types';\n\nconst HeaderSortState: SortStates = {\n  false: SortState.Off,\n  asc: SortState.Asc,\n  desc: SortState.Desc,\n};\n\n/**\n * Component to wrap `<th>` elements for use inside `<thead>` elements.\n */\nconst HeaderCell = <T extends LGRowData>({\n  children,\n  className,\n  cellIndex,\n  header,\n  ...rest\n}: PropsWithChildren<HeaderCellProps<T>>) => {\n  const { table } = useTableContext();\n\n  const isFirstCell = cellIndex === 0;\n  const isSelectable = !!table && !!table.hasSelectableRows;\n\n  let columnName, sortState, onSortIconClick;\n\n  if (header && header.column.getCanSort()) {\n    columnName = header.column.columnDef.header as string;\n    const headerSortDirection = header.column.getIsSorted().toString();\n    sortState = HeaderSortState[headerSortDirection];\n    onSortIconClick = header.column.getToggleSortingHandler();\n  }\n\n  return (\n    <th\n      className={cx(\n        baseCellStyles,\n        {\n          [getCellPadding({ depth: 0, isExpandable: false, isSelectable })]:\n            isFirstCell,\n          [getHeaderCellWidthStyles(header?.getSize() ?? 0)]:\n            !!header?.getSize(),\n        },\n        className,\n      )}\n      scope=\"col\"\n      {...rest}\n    >\n      <div\n        className={cx(\n          cellTransitionContainerStyles,\n          headerCellContentStyles,\n          // TS error is ignored (and not expected) as it doesn't show up locally but interrupts build\n          // @ts-ignore Header types need to be extended or declared in the react-table namespace\n          alignmentStyles(header?.column.columnDef?.align),\n        )}\n      >\n        {children}\n        {sortState && onSortIconClick && (\n          <SortIcon\n            sortState={sortState}\n            onSortIconClick={onSortIconClick}\n            aria-label={`Sort by ${columnName}`}\n            data-testid=\"lg-table-sort-icon-button\"\n          />\n        )}\n      </div>\n    </th>\n  );\n};\n\nexport default HeaderCell;\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\n\ntype RowContextProps = PropsWithChildren<{\n  disabled?: boolean;\n}>;\n\nconst RowContext = createContext<RowContextProps>({});\n\nexport const useRowContext = () => useContext(RowContext);\n\nexport const RowContextProvider = ({ children, disabled }: RowContextProps) => {\n  return (\n    <RowContext.Provider\n      value={{\n        disabled,\n      }}\n    >\n      {children}\n    </RowContext.Provider>\n  );\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { clickableStyles, disabledStyles } from './Row.styles';\nimport { InternalRowBaseProps } from './Row.types';\nimport { useRowContext } from './RowContext';\n\n/**\n * The base Row component, extended by `InternalRow(With/Without)RT`\n */\nconst InternalRowBase = ({\n  className,\n  onClick,\n  ...rest\n}: InternalRowBaseProps) => {\n  const { theme } = useDarkMode();\n  const { disabled } = useRowContext();\n  return (\n    <tr\n      onClick={onClick}\n      aria-disabled={disabled}\n      tabIndex={onClick ? 0 : undefined}\n      className={cx(\n        {\n          [disabledStyles[theme]]: disabled,\n          [clickableStyles[theme]]: !!onClick,\n        },\n        className,\n      )}\n      {...rest}\n    />\n  );\n};\n\nexport default InternalRowBase;\n","import { type TableContextValues } from '../TableContext';\nimport { LGRowData } from '../useLeafyGreenTable';\n\n/**\n * Returns whether a given row has _all_ ancestor rows expanded\n */\nexport function getAreAncestorsExpanded<T extends LGRowData>(\n  /** The starting id */\n  startId: string,\n  /** The parent getter function */\n  getParentRow: TableContextValues<T>['getParentRow'],\n) {\n  if (!getParentRow) return false;\n\n  let id = startId;\n  let parent = getParentRow(id);\n  let isExpanded;\n\n  while (parent) {\n    isExpanded = (isExpanded ?? true) && parent?.getIsExpanded();\n    id = parent.id;\n    parent = getParentRow(id);\n  }\n\n  return isExpanded;\n}\n","import React, { useMemo, useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport { RowData } from '@tanstack/react-table';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport {\n  cellContentTransitionStateStyles,\n  cellTransitionContainerStyles,\n  disableAnimationStyles,\n} from '../Cell/Cell.styles';\nimport InternalRowBase from '../Row/InternalRowBase';\nimport { useTableContext } from '../TableContext';\nimport { getAreAncestorsExpanded } from '../utils/areAncestorsExpanded';\n\nimport { baseStyles, expandedContentStyles } from './ExpandedContent.styles';\nimport { ExpandedContentProps } from './ExpandedContent.types';\n\nconst ExpandedContent = <T extends RowData>({\n  row,\n  ...rest\n}: ExpandedContentProps<T>) => {\n  const { disableAnimations, getParentRow } = useTableContext();\n  const contentRef = useRef<HTMLDivElement>(null);\n  const transitionRef = useRef<HTMLElement | null>(null);\n  const areAncestorsExpanded = getAreAncestorsExpanded(row.id, getParentRow);\n  const isNestedRow = !!getParentRow?.(row.id);\n  const isExpanded =\n    row.getIsExpanded() && (!isNestedRow || areAncestorsExpanded);\n  const content =\n    row.original.renderExpandedContent &&\n    row.original.renderExpandedContent(row);\n\n  const { theme } = useDarkMode();\n\n  const contentHeight = useMemo(\n    () => (contentRef.current ? contentRef.current.clientHeight : 0),\n    // Lint flags `content` as an unnecessary dependency, but we want to update `contentHeight` when the value of `content` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [content],\n  );\n\n  return (\n    <InternalRowBase {...rest}>\n      <td colSpan={row.getVisibleCells().length} className={cx(baseStyles)}>\n        <Transition in={isExpanded} timeout={0} nodeRef={transitionRef}>\n          {state => (\n            <div\n              data-state={state}\n              className={cx(\n                cellTransitionContainerStyles,\n                { [disableAnimationStyles]: disableAnimations },\n                expandedContentStyles[theme],\n                cellContentTransitionStateStyles(contentHeight)[state],\n              )}\n            >\n              <div ref={contentRef}>{content}</div>\n            </div>\n          )}\n        </Transition>\n      </td>\n    </InternalRowBase>\n  );\n};\n\nExpandedContent.displayName = 'ExpandedContent';\n\nexport default ExpandedContent;\n","import React, { PropsWithChildren, ReactElement, ReactNode } from 'react';\n\nimport { HeaderCell } from '../../Cell';\n\nimport { HeaderRowProps } from './HeaderRow.types';\n\nconst HeaderRow = ({\n  children,\n  ...rest\n}: PropsWithChildren<HeaderRowProps>) => {\n  return (\n    <tr {...rest}>\n      {React.Children.map(children, (child: ReactNode, index: number) => {\n        return (\n          <HeaderCell {...(child as ReactElement).props} cellIndex={index} />\n        );\n      })}\n    </tr>\n  );\n};\n\nHeaderRow.displayName = 'HeaderRow';\n\nexport default HeaderRow;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { consoleOnce, isComponentType } from '@leafygreen-ui/lib';\n\nimport { useTableContext } from '../TableContext';\n\nimport InternalRowBase from './InternalRowBase';\nimport { zebraStyles } from './Row.styles';\nimport { InternalRowBaseProps } from './Row.types';\n\n/**\n * Renders basic array row data\n */\nconst InternalRowWithoutRT = ({\n  children,\n  className,\n  ...rest\n}: InternalRowBaseProps) => {\n  const { shouldAlternateRowColor } = useTableContext();\n  const { theme } = useDarkMode();\n\n  React.Children.forEach(children, child => {\n    if (!isComponentType(child, 'Cell'))\n      consoleOnce.warn(\n        'LG Row is rendering a custom cell element. Utilize the `Cell` component for standardized styles, correct HTML properties and additional functionalities when using `useLeafyGreenTable`.',\n      );\n  });\n\n  return (\n    <InternalRowBase\n      className={cx(\n        {\n          [zebraStyles[theme]]: shouldAlternateRowColor,\n        },\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </InternalRowBase>\n  );\n};\n\nexport default InternalRowWithoutRT;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { transitionDuration } from '@leafygreen-ui/tokens';\n\nexport const iconButtonTransitionStyles = css`\n  transition: transform ${transitionDuration.default}ms ease-in-out;\n`;\n\nexport const iconFills = (theme: Theme, disabled: boolean) => {\n  const fills = {\n    [Theme.Dark]: disabled ? palette.gray.dark1 : palette.gray.light2,\n    [Theme.Light]: disabled ? palette.gray.light1 : palette.gray.dark1,\n  };\n\n  return fills[theme];\n};\n\nexport const rotatedStyles = css`\n  transform: rotate(90deg);\n`;\n","import { HTMLElementProps } from '@leafygreen-ui/lib';\n\nexport type Align = Extract<\n  HTMLElementProps<'td'>['align'],\n  'left' | 'right' | 'center'\n>;\n\nexport const CellOverflowBehavior = {\n  Default: 'default',\n  Truncate: 'truncate',\n  // TODO: `Expand`: The cell will expand to the height of its content\n  // Expand: 'expand',\n} as const;\nexport type CellOverflowBehavior =\n  (typeof CellOverflowBehavior)[keyof typeof CellOverflowBehavior];\n\ninterface BaseCellProps extends HTMLElementProps<'td'> {\n  /**\n   * Alignment of the cell's contents\n   *\n   * Overrides `<td>`'s deprecated `align` prop\n   */\n  align?: Align;\n\n  /** A `className` applied to the inner `div` of the Cell  */\n  contentClassName?: string;\n\n  /**\n   * Defines how a cell should behave when its content is larger than the standard cell height.\n   *\n   * `Default`: The cell height will be fixed to the standard cell height (40px by default).\n   * Any overflowing content will be clipped.\n   *\n   * `Truncate`: The cell height will be fixed to the standard cell height (40px by default),\n   * and include an ellipsis before the content is clipped.\n   *\n   * Note: It's recommended to provide the same value for all cells in a given row.\n   *\n   * @default CellOverflowBehavior.Default\n   */\n  overflow?: CellOverflowBehavior;\n}\n\nexport type CellProps = BaseCellProps;\n\nexport interface InternalCellProps extends BaseCellProps {\n  /**\n   * Index of the cell in its parent row.\n   */\n  cellIndex: number;\n\n  /**\n   * Depth of nesting its parent row has.\n   */\n  depth: number;\n\n  /**\n   * Defines whether the cell's row is visible (i.e. expanded)\n   *\n   * @default true\n   */\n  isVisible?: boolean;\n\n  /**\n   * Defines whether the cell's row is expandable\n   *\n   * @default false\n   */\n  isExpandable?: boolean;\n}\n","import React, { useMemo, useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\n\nimport { useTableContext } from '../TableContext';\n\nimport {\n  alignmentStyles,\n  baseCellStyles,\n  cellContentTransitionStateStyles,\n  cellTransitionContainerStyles,\n  disableAnimationStyles,\n  getCellPadding,\n  standardCellHeight,\n  truncatedContentStyles,\n} from './Cell.styles';\nimport { CellOverflowBehavior, InternalCellProps } from './Cell.types';\n\nconst InternalCell = ({\n  children,\n  className,\n  contentClassName,\n  cellIndex,\n  depth,\n  isVisible = true,\n  isExpandable = false,\n  overflow,\n  align,\n  ...rest\n}: InternalCellProps) => {\n  const isFirstCell = cellIndex === 0;\n  const { table, disableAnimations } = useTableContext();\n  const isSelectable = !!table && !!table.hasSelectableRows;\n  const transitionRef = useRef<HTMLElement | null>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const contentHeight = standardCellHeight;\n  const scrollHeight = contentRef.current\n    ? contentRef.current?.scrollHeight\n    : 0;\n  const shouldTruncate = useMemo(() => {\n    return (\n      overflow === CellOverflowBehavior.Truncate && scrollHeight > contentHeight\n    );\n  }, [contentHeight, overflow, scrollHeight]);\n  return (\n    <td\n      className={cx(\n        baseCellStyles,\n        {\n          [getCellPadding({ depth, isExpandable, isSelectable })]: isFirstCell,\n        },\n        className,\n      )}\n      {...rest}\n    >\n      <Transition in={isVisible} timeout={0} nodeRef={transitionRef}>\n        {state => (\n          <div\n            data-state={state}\n            ref={contentRef}\n            className={cx(\n              cellTransitionContainerStyles,\n              cellContentTransitionStateStyles(contentHeight)[state],\n              alignmentStyles(align),\n              {\n                [disableAnimationStyles]: disableAnimations,\n                [truncatedContentStyles]: shouldTruncate,\n              },\n              contentClassName,\n            )}\n          >\n            {children}\n          </div>\n        )}\n      </Transition>\n    </td>\n  );\n};\n\nInternalCell.displayName = 'Cell';\nInternalCell.propTypes = {\n  cellIndex: PropTypes.number,\n  depth: PropTypes.number,\n  isVisible: PropTypes.bool,\n  isExpandable: PropTypes.bool,\n};\n\nexport default InternalCell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport Icon from '@leafygreen-ui/icon';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { useTableContext } from '../TableContext';\n\nimport {\n  iconButtonTransitionStyles,\n  iconFills,\n  rotatedStyles,\n} from './ToggleExpandedIcon.styles';\nimport { type ToggleExpandedIconProps } from './ToggleExpandedIcon.types';\n\n/**\n * @internal\n */\nconst ToggleExpandedIcon = ({\n  isExpanded,\n  toggleExpanded,\n  disabled,\n  ...rest\n}: ToggleExpandedIconProps) => {\n  const { theme } = useDarkMode();\n  const { disableAnimations } = useTableContext();\n\n  return (\n    <IconButton\n      aria-label={`${isExpanded ? 'Collapse' : 'Expand'} row`}\n      disabled={disabled}\n      onClick={toggleExpanded}\n      className={cx({\n        [rotatedStyles]: isExpanded,\n        [iconButtonTransitionStyles]: !disableAnimations,\n      })}\n      {...rest}\n    >\n      <Icon\n        glyph=\"ChevronRight\"\n        role=\"presentation\"\n        fill={iconFills(theme, !!disabled)}\n      />\n    </IconButton>\n  );\n};\n\nToggleExpandedIcon.propTypes = {\n  disabled: PropTypes.bool,\n  toggleExpanded: PropTypes.func.isRequired,\n  isExpanded: PropTypes.bool.isRequired,\n};\n\nexport default ToggleExpandedIcon;\n","import React, { ReactElement, ReactNode } from 'react';\n\nimport InternalCell from '../Cell/InternalCell';\nimport { useTableContext } from '../TableContext';\nimport ToggleExpandedIcon from '../ToggleExpandedIcon';\nimport { LGRowData } from '../useLeafyGreenTable';\nimport { getAreAncestorsExpanded } from '../utils/areAncestorsExpanded';\n\nimport { useRowContext } from './RowContext';\nimport { RowProps } from '.';\n\ntype RowCellChildrenProps<T extends LGRowData> = Required<\n  Pick<RowProps<T>, 'row'>\n> &\n  Pick<RowProps<T>, 'disabled' | 'children'>;\n\n/**\n * Renders row cells provided by `useReactTable`\n */\nconst RowCellChildren = <T extends LGRowData>({\n  row,\n  children: CellChildren,\n}: RowCellChildrenProps<T>) => {\n  const { getParentRow } = useTableContext();\n  const { disabled } = useRowContext();\n  const parentRow = getParentRow?.(row.id);\n  const isNested = !!parentRow;\n  const isParentExpanded = !!parentRow && parentRow.getIsExpanded();\n  const areAncestorsExpanded = getAreAncestorsExpanded(row.id, getParentRow);\n  const isRowVisible = (areAncestorsExpanded && isParentExpanded) || !isNested;\n\n  const isExpandable = row.getCanExpand();\n  const isExpanded = row.getIsExpanded();\n\n  const toggleExpanded = () => row.toggleExpanded();\n\n  return (\n    <>\n      {React.Children.map(\n        CellChildren,\n        (child: ReactNode, colIndex: number) => {\n          // FIXME:\n          // eslint-disable-next-line no-unsafe-optional-chaining\n          const { children, ...props } = (child as ReactElement)?.props;\n          const isFirstCell = colIndex === 0;\n          const cell = row.getVisibleCells()[colIndex];\n          return (\n            <InternalCell\n              {...props}\n              cellIndex={colIndex}\n              isVisible={isRowVisible}\n              isExpandable={isExpandable}\n              disabled={disabled}\n              depth={row.depth}\n              // @ts-expect-error Cell is not deeply extended\n              align={cell.column.columnDef.align}\n            >\n              {isFirstCell && isExpandable && (\n                <ToggleExpandedIcon\n                  isExpanded={isExpanded}\n                  toggleExpanded={toggleExpanded}\n                  aria-hidden={!isRowVisible}\n                  disabled={disabled}\n                  tabIndex={isRowVisible ? 0 : -1}\n                />\n              )}\n              {children}\n            </InternalCell>\n          );\n        },\n      )}\n    </>\n  );\n};\n\nexport default RowCellChildren;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const baseStyles = css`\n  border-spacing: 0;\n  border-collapse: collapse;\n  width: 100%;\n`;\n\nexport const themeStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n  [Theme.Light]: css`\n    color: ${palette.gray.dark3};\n  `,\n};\n\nexport const tableContainerStyles = css`\n  overflow: auto;\n  width: 100%;\n  position: relative;\n`;\n","import React, { Fragment, useMemo } from 'react';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { VirtualItem } from 'react-virtual';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { HTMLElementProps, isComponentType } from '@leafygreen-ui/lib';\nimport { Polymorph } from '@leafygreen-ui/polymorphic';\n\nimport { useTableContext } from '../TableContext';\nimport { LGRowData } from '../useLeafyGreenTable';\n\nimport InternalRowBase from './InternalRowBase';\nimport {\n  expandedContentParentStyles,\n  grayZebraRowStyles,\n  selectedRowStyles,\n  zebraStyles,\n} from './Row.styles';\nimport { InternalRowWithRTProps } from './Row.types';\nimport RowCellChildren from './RowCellChildren';\nimport { useRowContext } from './RowContext';\n\n/**\n * Renders row data provided by `useReactTable`\n */\nconst InternalRowWithRT = <T extends LGRowData>({\n  children,\n  className,\n  row,\n  virtualRow,\n  ...rest\n}: InternalRowWithRTProps<T>) => {\n  const { theme } = useDarkMode();\n  const { disabled } = useRowContext();\n  const { table, getParentRow, shouldAlternateRowColor } = useTableContext();\n  const parentRow = getParentRow?.(row.id);\n  const rowRef = virtualRow?.measureRef;\n\n  const isTableExpandable = table?.getCanSomeRowsExpand();\n  const isNested = !!parentRow;\n  const isParentExpanded = !!parentRow && parentRow.getIsExpanded();\n  const isRowVisible = isParentExpanded || !isNested;\n  const isOddVSRow = !!virtualRow && virtualRow.index % 2 !== 0;\n\n  const isExpanded = row.getIsExpanded();\n  const isSelected = row.getIsSelected();\n\n  const flattenedChildren = flattenChildren(children);\n\n  const CellChildren = flattenedChildren.filter(child =>\n    isComponentType(child, 'Cell'),\n  );\n\n  /**\n   * OtherChildren is looking for nested Row components or ExpandedContent components.\n   * This filter does not look explicitly for those two components since we may want to allow developers to use their own `td` elements.\n   */\n  const OtherChildren = flattenedChildren.filter(\n    child => !isComponentType(child, 'Cell'),\n  );\n\n  /**\n   * Render the row within a `tbody` if\n   * the table itself has any row that is expandable\n   * but not if this row is nested\n   */\n  const shouldRenderAsTBody = isTableExpandable && !isNested;\n  const containerAs = useMemo(\n    () => (shouldRenderAsTBody ? 'tbody' : Fragment),\n    [shouldRenderAsTBody],\n  );\n\n  const tBodyProps: HTMLElementProps<'tbody'> &\n    Pick<VirtualItem, 'measureRef'> = {\n    className: cx({\n      [expandedContentParentStyles[theme]]: isExpanded,\n    }),\n    'data-expanded': isExpanded,\n    // @ts-expect-error - VirtualItem.measureRef is not typed as a ref\n    ref: rowRef,\n  };\n\n  return (\n    <Polymorph as={containerAs} {...(shouldRenderAsTBody && tBodyProps)}>\n      <InternalRowBase\n        className={cx(\n          {\n            [grayZebraRowStyles[theme]]:\n              isOddVSRow && shouldAlternateRowColor && !isSelected,\n            [zebraStyles[theme]]:\n              !virtualRow && shouldAlternateRowColor && !isSelected,\n            [selectedRowStyles[theme]]: isSelected && !disabled,\n          },\n          className,\n        )}\n        data-selected={isSelected}\n        aria-hidden={!isRowVisible}\n        id={`lg-table-row-${row.id}`}\n        {...rest}\n      >\n        <RowCellChildren row={row}>{CellChildren}</RowCellChildren>\n      </InternalRowBase>\n      {OtherChildren}\n    </Polymorph>\n  );\n};\n\nexport default InternalRowWithRT;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LGRowData } from '../useLeafyGreenTable';\n\nimport InternalRowWithoutRT from './InternalRowWithoutRT';\nimport InternalRowWithRT from './InternalRowWithRT';\nimport { RowProps } from './Row.types';\nimport { RowContextProvider } from './RowContext';\n\n/**\n * Renders the provided cells\n */\nconst Row = <T extends LGRowData>({\n  row,\n  virtualRow,\n  disabled,\n  ...rest\n}: RowProps<T>) => {\n  return (\n    <RowContextProvider disabled={disabled}>\n      {row ? (\n        <InternalRowWithRT row={row} virtualRow={virtualRow} {...rest} />\n      ) : (\n        <InternalRowWithoutRT {...rest} />\n      )}\n    </RowContextProvider>\n  );\n};\n\nRow.propTypes = {\n  virtualRow: PropTypes.any,\n  row: PropTypes.any,\n  disabled: PropTypes.bool,\n};\n\nRow.displayName = 'Row';\n\nexport default Row;\n","import React, { ForwardedRef, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport {\n  bodyTypeScaleStyles,\n  useUpdatedBaseFontSize,\n} from '@leafygreen-ui/typography';\n\nimport { TableContextProvider } from '../TableContext';\nimport { LGRowData } from '../useLeafyGreenTable';\n\nimport { baseStyles, tableContainerStyles, themeStyles } from './Table.styles';\nimport { TableProps } from './Table.types';\n\n// Inferred generic type from component gets used in place of `any`\nconst Table = forwardRef<HTMLDivElement, TableProps<any>>(\n  <T extends LGRowData>(\n    {\n      children,\n      className,\n      shouldAlternateRowColor = false,\n      baseFontSize: baseFontSizeProp,\n      darkMode: darkModeProp,\n      table,\n      disableAnimations = false,\n      ...rest\n    }: TableProps<T>,\n    containerRef: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const baseFontSize: BaseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n    const { theme, darkMode } = useDarkMode(darkModeProp);\n\n    return (\n      <div\n        ref={containerRef}\n        className={cx(tableContainerStyles, className)}\n        // allow select by keyboard to allow scroll by keyboard\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n        tabIndex={0}\n      >\n        <TableContextProvider\n          shouldAlternateRowColor={shouldAlternateRowColor}\n          darkMode={darkMode}\n          table={table}\n          disableAnimations={disableAnimations}\n        >\n          <table\n            className={cx(\n              baseStyles,\n              themeStyles[theme],\n              bodyTypeScaleStyles[baseFontSize],\n            )}\n            {...rest}\n          >\n            {children}\n          </table>\n        </TableContextProvider>\n      </div>\n    );\n  },\n);\n\nTable.propTypes = {\n  darkMode: PropTypes.bool,\n  baseFontSize: PropTypes.oneOf(Object.values(BaseFontSize)),\n  shouldAlternateRowColor: PropTypes.bool,\n};\n\nTable.displayName = 'Table';\n\nexport default Table;\n","import React, { Fragment, useMemo } from 'react';\n\nimport { Polymorph } from '@leafygreen-ui/polymorphic';\n\nimport { useTableContext } from '../TableContext';\n\nimport { TableBodyProps } from './TableBody.types';\n\nconst TableBody = ({ children, ...rest }: TableBodyProps) => {\n  let paddingTop = 0;\n  let paddingBottom = 0;\n\n  const { table } = useTableContext();\n  const areSomeRowsExpandable = table?.getCanSomeRowsExpand();\n\n  const bodyAs = useMemo(\n    () => (areSomeRowsExpandable ? Fragment : 'tbody'),\n    [areSomeRowsExpandable],\n  );\n\n  if (table && table.virtualRows) {\n    const { virtualRows, totalSize } = table;\n    paddingTop = virtualRows.length > 0 ? virtualRows?.[0]?.start || 0 : 0;\n    paddingBottom =\n      virtualRows.length > 0\n        ? totalSize - (virtualRows?.[virtualRows.length - 1]?.end || 0)\n        : 0;\n  }\n\n  return (\n    <Polymorph as={bodyAs} {...rest}>\n      {/* As the user scrolls down, the paddingTop grows bigger, creating the effect of virtual scrolling */}\n      {paddingTop > 0 && (\n        <tr aria-hidden>\n          <td style={{ height: `${paddingTop}px` }} />\n        </tr>\n      )}\n      {children}\n      {/* As the user scrolls down, the paddingBottom gets smaller, creating the effect of virtual scrolling */}\n      {paddingBottom > 0 && (\n        <tr aria-hidden>\n          <td style={{ height: `${paddingBottom}px` }} />\n        </tr>\n      )}\n    </Polymorph>\n  );\n};\n\nTableBody.displayName = 'TableBody';\n\nexport default TableBody;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const stickyStyles = css`\n  position: sticky;\n  z-index: 1;\n  top: 0;\n`;\nexport const themeStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.black};\n    box-shadow: 0 4px ${palette.gray.dark2};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.white};\n    box-shadow: 0 4px ${palette.gray.light2};\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { bodyTypeScaleStyles } from '@leafygreen-ui/typography';\n\nconst sharedStyles = css`\n  --lg-cell-padding-block: 10px;\n  min-width: 40px;\n  padding: var(--lg-cell-padding-block) 8px;\n  box-sizing: border-box;\n  vertical-align: baseline;\n  text-align: left; // Justification is updated in \\`Row.tsx\\` for number cells\n`;\n\nexport const getCommonCellStyles = (baseFontSize: 13 | 16): string => {\n  return css`\n    ${sharedStyles}\n    ${bodyTypeScaleStyles[baseFontSize]}\n  `;\n};\n","import React, { PropsWithChildren } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { stickyStyles, themeStyles } from './TableHead.styles';\nimport { TableHeadProps } from './TableHead.types';\n\nconst TableHead = ({\n  children,\n  isSticky,\n  className,\n  ...rest\n}: PropsWithChildren<TableHeadProps>) => {\n  const { theme } = useDarkMode();\n  return (\n    <thead\n      className={cx(\n        {\n          [stickyStyles]: isSticky,\n        },\n        themeStyles[theme],\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </thead>\n  );\n};\n\nTableHead.displayName = 'TableHead';\n\nexport default TableHead;\n","import React, { forwardRef } from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { createUniqueClassName, HTMLElementProps } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport { getCommonCellStyles } from './styles';\n\nexport const tdInnerDivClassName = createUniqueClassName('td-inner-div');\n\n/**\n * @deprecated\n */\ninterface HeaderCellProps\n  extends HTMLElementProps<'th', HTMLTableHeaderCellElement> {\n  /**\n   * Renders the cell as a th element\n   */\n  isHeader: true;\n\n  /**\n   * Determines whether the cell renders as disabled\n   */\n  isDisabled?: boolean;\n}\n\n/**\n * @deprecated\n */\ninterface TableCellProps extends HTMLElementProps<'td', HTMLTableCellElement> {\n  /**\n   * Determines whether the cell renders as disabled\n   */\n  isDisabled?: boolean;\n  /**\n   * Renders the cell as a th element\n   */\n  isHeader?: false;\n}\n\n/**\n * @deprecated\n */\ntype CellProps = HeaderCellProps | TableCellProps;\n\nconst baseStyles = css`\n  position: relative;\n`;\n\nconst thStyles = css`\n  font-weight: 600;\n`;\n\nconst lightModeThStyles = css`\n  border-right: 3px solid ${palette.gray.light2};\n  background-color: ${palette.gray.light3};\n`;\n\nconst darkModeThStyles = css`\n  border-right: 3px solid ${palette.gray.dark2};\n  background-color: ${palette.gray.dark4};\n`;\n\nconst innerDivStyles = css`\n  display: flex;\n  align-items: center;\n`;\n\nconst lightModeDisabledHeaderStyles = css`\n  border-top: 1px solid ${palette.gray.light3};\n  border-bottom: 1px solid ${palette.gray.light3};\n  color: ${palette.black};\n  cursor: auto;\n`;\n\nconst darkModeDisabledHeaderStyles = css`\n  color: ${palette.white};\n  cursor: auto;\n`;\n\n/**\n * @deprecated\n */\nexport type CellElement = React.ReactComponentElement<typeof Cell>;\n\n/**\n * @deprecated\n */\nconst Cell = forwardRef(\n  (\n    { children, className, isHeader = false, isDisabled, ...rest }: CellProps,\n    ref: React.Ref<HTMLTableHeaderCellElement | HTMLTableCellElement>,\n  ) => {\n    const Root = isHeader ? 'th' : 'td';\n\n    const baseFontSize = useUpdatedBaseFontSize();\n    const { darkMode } = useDarkMode();\n\n    const props: Partial<CellProps> = {\n      ref,\n      className: cx(\n        getCommonCellStyles(baseFontSize),\n        baseStyles,\n        {\n          [thStyles]: isHeader,\n          [lightModeThStyles]: isHeader && !darkMode,\n          [darkModeThStyles]: isHeader && darkMode,\n          [lightModeDisabledHeaderStyles]: isHeader && isDisabled && !darkMode,\n          [darkModeDisabledHeaderStyles]: isHeader && isDisabled && darkMode,\n        },\n        className,\n      ),\n    };\n\n    if (isHeader) {\n      props.scope = 'row';\n      props.role = 'rowheader';\n    }\n\n    return (\n      <Root {...props} {...rest}>\n        <div className={cx(tdInnerDivClassName, innerDivStyles)}>\n          <span\n            className={css`\n              display: flex;\n            `}\n          >\n            {children}\n          </span>\n        </div>\n      </Root>\n    );\n  },\n);\n\nCell.displayName = 'Cell';\n\nexport default Cell;\n","import React from 'react';\n\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\n\n/**\n * @deprecated\n */\nexport interface HeaderRowProps extends HTMLElementProps<'tr'> {}\n\n/**\n * @deprecated\n */\nexport type HeaderRowElement = React.ReactComponentElement<typeof HeaderRow>;\n\n/**\n * @deprecated\n */\nfunction HeaderRow({ children, className, ...rest }: HeaderRowProps) {\n  return (\n    <tr {...rest} className={className} data-testid=\"leafygreen-ui-header-row\">\n      {children}\n    </tr>\n  );\n}\n\nHeaderRow.displayName = 'HeaderRow';\n\nexport default HeaderRow;\n","import React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\n\nimport { tdInnerDivClassName } from './Cell';\nimport Row, { RowProps } from './Row';\n\nconst transitionTime = 200;\n\nconst nestedRowInitialStyle = css`\n  position: relative;\n  opacity: 0;\n  transform-origin: 50% 0%;\n  transition: ${transitionTime}ms ease-in-out;\n  transition-property: outline-color, opacity;\n\n  // This makes it so that any tall nested rows appear \"below\" the parents\n  // This may cause issues if there are multiple levels of nesting\n  // that all have more than one line of text. However this scenario is unlikely\n  z-index: 0;\n\n  & > :is(td, th) {\n    transition: ${transitionTime}ms ease-in-out;\n    transition-property: padding-block;\n\n    & > .${tdInnerDivClassName} {\n      transition: ${transitionTime}ms ease-in-out;\n      transition-property: min-height, max-height;\n    }\n  }\n`;\n\nconst hiddenRowStyles = css`\n  opacity: 0;\n  outline-color: transparent;\n\n  & > :is(td, th) {\n    padding-block: 0;\n\n    & > .${tdInnerDivClassName} {\n      min-height: 0px;\n      max-height: 0px;\n    }\n  }\n`;\n\nconst nestedRowTransitionStyles = (\n  state: TransitionStatus,\n  height?: number,\n): string => {\n  switch (state) {\n    case 'entered':\n      return css`\n        opacity: 1;\n        & > :is(td, th) {\n          & > .${tdInnerDivClassName} {\n            --lg-cell-max-height: max(var(--lg-cell-min-height), ${height}px);\n            min-height: var(--lg-cell-min-height);\n            max-height: var(--lg-cell-max-height);\n          }\n        }\n      `;\n    default:\n      return hiddenRowStyles;\n  }\n};\n\n/**\n * @deprecated\n */\ninterface NestedRowProps extends RowProps {\n  state: TransitionStatus;\n}\n\nconst NestedRow = ({ ref, className, state, ...rest }: NestedRowProps) => {\n  const [nestedRowHeight, setNestedRowHeight] = useState(0);\n  const nestedRowNodeRef = useRef<HTMLTableRowElement>(null);\n\n  const calculateRowContentHeight = () => {\n    if (nestedRowNodeRef && nestedRowNodeRef.current) {\n      const innerSpan: HTMLSpanElement | null =\n        nestedRowNodeRef.current.querySelector(\n          `.${tdInnerDivClassName} > span`,\n        );\n\n      if (innerSpan && innerSpan.offsetHeight) {\n        setNestedRowHeight(innerSpan.offsetHeight);\n      }\n    }\n  };\n\n  useEffect(() => {\n    calculateRowContentHeight();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [nestedRowNodeRef.current]);\n\n  return (\n    <Row\n      {...rest}\n      ref={nestedRowNodeRef}\n      className={cx(\n        nestedRowInitialStyle,\n        nestedRowTransitionStyles(state, nestedRowHeight),\n        className,\n      )}\n    />\n  );\n};\n\nexport default NestedRow;\n","import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from 'react';\n\nconst TableActionTypes = {\n  RegisterColumn: 'REGISTER_COLUMN_INFO',\n  SetHasNestedRows: 'SET_HAS_NESTED_ROWS',\n  SetHasRowSpan: 'SET_HAS_ROW_SPAN',\n  SetData: 'SET_DATA',\n} as const;\n\n/**\n * @deprecated\n */\ntype TableActionTypes =\n  (typeof TableActionTypes)[keyof typeof TableActionTypes];\n\nexport { TableActionTypes };\n\n/**\n * @deprecated\n */\ninterface ActionPayload {\n  [TableActionTypes.RegisterColumn]: {\n    dataType?: DataType;\n    index: number;\n  };\n  [TableActionTypes.SetData]: Array<any>;\n  [TableActionTypes.SetHasRowSpan]: boolean;\n  [TableActionTypes.SetHasNestedRows]: boolean;\n}\n\ntype ActionMap<A extends Record<string, any>> = {\n  [Key in keyof A]: A[Key] extends undefined\n    ? {\n        type: Key;\n      }\n    : {\n        type: Key;\n        payload: A[Key];\n      };\n};\n\ntype Action = ActionMap<ActionPayload>[keyof ActionMap<ActionPayload>];\n\ntype Dispatch = (action: Action) => void;\n\nconst DataType = {\n  Number: 'number',\n  Weight: 'weight',\n  ZipCode: 'zipCode',\n  String: 'string',\n  Date: 'date',\n} as const;\n\ntype DataType = (typeof DataType)[keyof typeof DataType];\n\nexport { DataType };\n\n/**\n * @deprecated\n */\nexport interface State {\n  data: Array<any>;\n  columnInfo?: Record<number, { dataType?: DataType }>;\n  hasNestedRows?: boolean;\n  hasRowSpan?: boolean;\n}\n\n/**\n * @deprecated\n */\ninterface TableProviderInterface {\n  children: React.ReactNode;\n  data: Array<any>;\n}\n\n/**\n * @deprecated\n */\ninterface ContextInterface {\n  state: State;\n  dispatch: Dispatch;\n}\n\n/**\n * @deprecated\n */\nconst TableContext = createContext<ContextInterface>({\n  state: {\n    data: [],\n  },\n  dispatch: () => {},\n});\n\n/**\n * @deprecated\n */\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case TableActionTypes.SetHasRowSpan:\n      return {\n        ...state,\n        hasRowSpan: action.payload,\n      };\n\n    case TableActionTypes.SetHasNestedRows:\n      return {\n        ...state,\n        hasNestedRows: action.payload,\n      };\n\n    case TableActionTypes.RegisterColumn:\n      return {\n        ...state,\n        columnInfo: {\n          ...state.columnInfo,\n          [action.payload.index]: {\n            dataType: action.payload.dataType,\n          },\n        },\n      };\n\n    case TableActionTypes.SetData:\n      return {\n        ...state,\n        data: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function TableProvider({ children, data }: TableProviderInterface) {\n  const initialState: State = {\n    data,\n    hasNestedRows: false,\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    dispatch({\n      type: TableActionTypes.SetData,\n      payload: data,\n    });\n  }, [data]);\n\n  const contextValue = useMemo(() => {\n    return { state, dispatch };\n  }, [state, dispatch]);\n\n  return (\n    <TableContext.Provider value={contextValue}>\n      {children}\n    </TableContext.Provider>\n  );\n}\n\nexport function useTableContext() {\n  return useContext(TableContext);\n}\n","/**\n * There is a security vulnerability related to https://github.com/alex-cory/use-ssr\n * The only location this package is used is within the Table component, in Row.tsx.\n *\n * TODO: In the long term, we should re-evaluate its usage and whether it's needed,\n * and if it is, maintain our own useSSR hook instead within the @leafygreen-ui/hooks package.\n */\n\ninterface UseSSRReturn {\n  isBrowser: boolean;\n  isServer: boolean;\n  isNative: boolean;\n  device: Device;\n  canUseWorkers: boolean;\n  canUseEventListeners: boolean;\n  canUseViewport: boolean;\n}\n\nexport enum Device {\n  Browser = 'browser',\n  Server = 'server',\n  Native = 'native',\n}\n\nconst { Browser, Server, Native } = Device;\n\nconst canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nconst canUseNative: boolean =\n  typeof navigator != 'undefined' && navigator.product == 'ReactNative';\n\nconst device = canUseNative ? Native : canUseDOM ? Browser : Server;\n\nconst SSRObject = {\n  isBrowser: device === Browser,\n  isServer: device === Server,\n  isNative: device === Native,\n  device,\n  canUseWorkers: typeof Worker !== 'undefined',\n  canUseEventListeners: device === Browser && !!window.addEventListener,\n  canUseViewport: device === Browser && !!window.screen,\n};\n\n// TODO: instead of this, do a polyfill for `Object.assign` https://www.npmjs.com/package/es6-object-assign\nconst assign = (...args: Array<any>) =>\n  args.reduce((acc, obj) => ({ ...acc, ...obj }), {});\nconst values = (obj: any) => Object.keys(obj).map(key => obj[key]);\nconst toArrayObject = (): UseSSRReturn =>\n  assign((values(SSRObject), SSRObject));\n\nlet useSSRObject = toArrayObject();\n\nexport const weAreServer = () => {\n  SSRObject.isServer = true;\n  useSSRObject = toArrayObject();\n};\n\nexport const useSSR = (): UseSSRReturn => useSSRObject;\nexport default useSSR;\n","import React, { forwardRef, useEffect, useMemo, useRef, useState } from 'react';\nimport { Transition } from 'react-transition-group';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport ChevronDownIcon from '@leafygreen-ui/icon/dist/ChevronDown';\nimport ChevronRightIcon from '@leafygreen-ui/icon/dist/ChevronRight';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { HTMLElementProps, isComponentType, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nimport { CellElement, tdInnerDivClassName } from './Cell';\nimport NestedRow from './NestedRow';\nimport { DataType, TableActionTypes, useTableContext } from './TableContext';\nimport useSSR from './useSSR';\n\n/**\n * Types & Constants\n */\n\nconst transitionTime = 200;\n\n/**\n * Styles\n */\nconst iconButtonMargin = css`\n  margin: -4px;\n  margin-right: 4px;\n`;\n\nconst iconButtonThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.base};\n  `,\n};\n\nexport const iconButtonThemeDisabledStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.light1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.dark1};\n  `,\n};\n\n/**\n * @deprecated\n */\ntype StyledElements = 'rowStyle' | 'altColor' | 'disabledStyle';\n\nconst themeStyles: Record<Theme, Record<StyledElements, string>> = {\n  [Theme.Light]: {\n    rowStyle: css`\n      background-color: ${palette.white};\n      color: ${palette.gray.dark3};\n    `,\n\n    altColor: css`\n      &:nth-of-type(even) {\n        background-color: ${palette.gray.light3};\n      }\n\n      &:nth-of-type(odd) > th {\n        background-color: ${palette.white};\n      }\n    `,\n\n    disabledStyle: css`\n      background-color: ${palette.gray.light2};\n      color: ${palette.gray.base};\n      border-top: 1px inset ${palette.gray.light1};\n      border-bottom: 1px inset ${palette.gray.light1};\n    `,\n  },\n\n  [Theme.Dark]: {\n    rowStyle: css`\n      background-color: ${palette.black};\n      color: ${palette.gray.light2};\n    `,\n\n    altColor: css`\n      &:nth-of-type(even) {\n        background-color: ${palette.gray.dark4};\n      }\n\n      &:nth-of-type(odd) > th {\n        background-color: ${palette.black};\n      }\n    `,\n\n    disabledStyle: css`\n      background-color: ${palette.gray.dark2};\n      color: ${palette.gray.base};\n    `,\n  },\n};\n\nconst rowStyle = css`\n  --lg-cell-min-height: 20px;\n  position: relative;\n  z-index: 1;\n\n  & > :is(td, th) > .${tdInnerDivClassName} {\n    min-height: var(--lg-cell-min-height);\n    max-height: unset;\n  }\n`;\n\nconst hideRow = css`\n  opacity: 0;\n`;\n\nfunction styleColumn(index: string, dataType?: DataType) {\n  let justify;\n\n  if (dataType === DataType.Number) {\n    justify = 'flex-end';\n  } else {\n    justify = 'flex-start';\n  }\n\n  return css`\n    & :is(td, th):nth-child(${index}) > div {\n      justify-content: ${justify};\n    }\n  `;\n}\n\nfunction getIndentLevelStyle(indentLevel: number) {\n  const indentLevelMultiplier = 36;\n  return css`\n    & > :is(td, th):nth-child(1) {\n      padding-left: ${8 + indentLevel * indentLevelMultiplier}px;\n    }\n  `;\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\nexport interface RowProps extends HTMLElementProps<'tr', HTMLTableRowElement> {\n  /**\n   * Determines whether or not the row is expanded on first render\n   */\n  expanded?: boolean;\n  /**\n   * Determines whether or not the row is disabled\n   */\n  disabled?: boolean;\n  /**\n   * @internal\n   */\n  indentLevel?: number;\n  /**\n   * @internal\n   */\n  isAnyAncestorCollapsed?: boolean;\n}\n\n/**\n * @deprecated\n */\ntype RowElement = React.ReactComponentElement<\n  typeof Row,\n  React.ComponentPropsWithRef<typeof Row>\n>;\n\n/**\n * @deprecated\n */\nconst Row = forwardRef(\n  (\n    {\n      expanded = false,\n      disabled = false,\n      indentLevel = 0,\n      isAnyAncestorCollapsed: isAnyAncestorCollapsedProp,\n      children,\n      className,\n      ...rest\n    }: RowProps,\n    ref: React.Ref<HTMLTableRowElement>,\n  ) => {\n    const { isBrowser } = useSSR();\n    const {\n      state: { data, columnInfo, hasNestedRows, hasRowSpan },\n      dispatch: tableDispatch,\n    } = useTableContext();\n    const { theme, darkMode } = useDarkMode();\n\n    const shouldAltRowColor =\n      data && data.length >= 10 && hasNestedRows != null && !hasNestedRows;\n\n    const indexRef = useRef(useIdAllocator({ prefix: 'row' }));\n    const [isExpanded, setIsExpanded] = useState(expanded);\n    const nestedRowParentRef = useRef<HTMLTableRowElement>(null);\n\n    useEffect(() => {\n      let shouldDispatchHasNestedRows = false;\n      let shouldDispatchHasRowSpan = false;\n\n      if (hasNestedRows && hasRowSpan) {\n        return;\n      }\n\n      React.Children.forEach(children, child => {\n        if (\n          isComponentType<RowElement>(child, 'Row') &&\n          !shouldDispatchHasNestedRows &&\n          !hasNestedRows\n        ) {\n          shouldDispatchHasNestedRows = true;\n        }\n\n        if (\n          isComponentType<CellElement>(child, 'Cell') &&\n          child.props.rowSpan &&\n          child.props.rowSpan > 1 &&\n          !hasRowSpan &&\n          !shouldDispatchHasRowSpan\n        ) {\n          shouldDispatchHasRowSpan = true;\n        }\n      });\n\n      if (\n        shouldDispatchHasNestedRows &&\n        hasNestedRows !== shouldDispatchHasNestedRows\n      ) {\n        tableDispatch({\n          type: TableActionTypes.SetHasNestedRows,\n          payload: true,\n        });\n      }\n\n      if (shouldDispatchHasRowSpan && hasRowSpan !== shouldDispatchHasRowSpan) {\n        tableDispatch({\n          type: TableActionTypes.SetHasRowSpan,\n          payload: true,\n        });\n      }\n    }, [children, hasNestedRows, hasRowSpan, tableDispatch, data]);\n\n    // Render any nested rows and their transition group\n    const { rowHasNestedRows, renderedNestedRowTransitionGroup } =\n      useMemo(() => {\n        const renderedNestedRows: Array<React.ReactElement> = [];\n        const rowHasNestedRows = React.Children.toArray(children).some(child =>\n          isComponentType<RowElement>(child, 'Row'),\n        );\n\n        const shouldTransitionGroupBeVisible =\n          isExpanded && !isAnyAncestorCollapsedProp;\n\n        // We don't need the transition group except on the client here, and rendering this bit on the server breaks rendering these rows.\n        const renderedNestedRowTransitionGroup = isBrowser ? (\n          <Transition\n            in={shouldTransitionGroupBeVisible}\n            timeout={{\n              enter: 0,\n              exit: transitionTime,\n            }}\n            nodeRef={nestedRowParentRef}\n          >\n            {state =>\n              React.Children.map(children, (child, index) => {\n                if (\n                  child != null &&\n                  isComponentType<RowElement>(child, 'Row')\n                ) {\n                  return (\n                    <NestedRow\n                      isAnyAncestorCollapsed={\n                        isAnyAncestorCollapsedProp || !isExpanded\n                      }\n                      indentLevel={indentLevel + 1}\n                      key={`${indexRef.current}-${indentLevel}-${index}`}\n                      state={state}\n                      {...child.props}\n                    />\n                  );\n                }\n              })\n            }\n          </Transition>\n        ) : (\n          renderedNestedRows\n        );\n\n        return {\n          rowHasNestedRows,\n          renderedNestedRows,\n          renderedNestedRowTransitionGroup,\n        };\n      }, [\n        children,\n        isExpanded,\n        isAnyAncestorCollapsedProp,\n        isBrowser,\n        indentLevel,\n      ]);\n\n    const renderedChildren = useMemo(() => {\n      const renderedChildren: Array<React.ReactElement> = [];\n\n      React.Children.forEach(children, (child, index) => {\n        if (isComponentType<CellElement>(child, 'Cell')) {\n          if (child.props.children == null) {\n            return null;\n          }\n\n          renderedChildren.push(\n            React.cloneElement(child, {\n              children: <span>{child.props.children}</span>,\n              key: `${indexRef.current}-${index}`,\n              isDisabled: disabled,\n              isHeader: child.props.isHeader,\n              ...child.props,\n            }),\n          );\n        }\n      });\n\n      if (rowHasNestedRows) {\n        const Icon = isExpanded ? ChevronDownIcon : ChevronRightIcon;\n\n        const chevronButton = (\n          <IconButton\n            onClick={() => setIsExpanded(curr => !curr)}\n            aria-label={isExpanded ? 'Collapse row' : 'Expand row'}\n            aria-expanded={isExpanded}\n            className={cx(iconButtonMargin, iconButtonThemeStyles[theme], {\n              [iconButtonThemeDisabledStyles[theme]]: disabled,\n            })}\n            darkMode={darkMode}\n          >\n            <Icon aria-hidden />\n          </IconButton>\n        );\n        const { children: firstChildChildren, ...firstChildProps } =\n          renderedChildren[0].props;\n        renderedChildren[0] = React.cloneElement(renderedChildren[0], {\n          children: (\n            <>\n              {chevronButton}\n              <span>{firstChildChildren}</span>\n            </>\n          ),\n          key: `${indexRef.current}-${renderedChildren[0].props.children}`,\n          ...firstChildProps,\n        });\n      }\n\n      return renderedChildren;\n    }, [children, rowHasNestedRows, disabled, isExpanded, theme, darkMode]);\n\n    const alignmentStyles = columnInfo\n      ? Object.entries(columnInfo).map(([key, { dataType }]) =>\n          styleColumn(key, dataType),\n        )\n      : [''];\n\n    const rowClassName = cx(\n      rowStyle,\n      themeStyles[theme].rowStyle,\n      getIndentLevelStyle(indentLevel),\n      [...alignmentStyles],\n      {\n        // Hide the row until we can apply correct alignment to cells.\n        [hideRow]: !columnInfo,\n        [themeStyles[theme].altColor]: shouldAltRowColor,\n        [themeStyles[theme].disabledStyle]: disabled,\n      },\n      className,\n    );\n\n    return (\n      <>\n        <tr\n          role=\"row\"\n          className={rowClassName}\n          aria-disabled={disabled}\n          ref={ref}\n          key={indexRef.current}\n          {...rest}\n        >\n          {renderedChildren}\n        </tr>\n\n        {renderedNestedRowTransitionGroup}\n      </>\n    );\n  },\n);\n\nRow.displayName = 'Row';\n\nexport default Row;\n","import React, { createContext, useContext, useMemo, useState } from 'react';\n\n/**\n * @deprecated\n */\nexport type SortDirection = 'asc' | 'desc';\n\n/**\n * @deprecated\n */\ninterface Sort {\n  columnId: number;\n  direction: SortDirection;\n  accessorValue?: (data: any) => string;\n  compareFn?: (a: any, b: any, direction: SortDirection) => number;\n  handleSort?: (direction: SortDirection) => void;\n}\n\n/**\n * @deprecated\n */\ninterface ContextInterface {\n  sort?: Sort;\n  setSort: React.Dispatch<React.SetStateAction<Sort | undefined>>;\n}\n\nconst SortContext = createContext<ContextInterface>({\n  sort: undefined,\n  setSort: () => {},\n});\n\nexport function SortProvider({ children }: { children: React.ReactNode }) {\n  const [sort, setSort] = useState<Sort | undefined>(undefined);\n\n  const contextValue = useMemo(() => {\n    return { sort, setSort };\n  }, [sort, setSort]);\n\n  return (\n    <SortContext.Provider value={contextValue}>{children}</SortContext.Provider>\n  );\n}\n\nexport function useSortContext() {\n  return useContext(SortContext);\n}\n\nconst alphanumericCollator = new Intl.Collator(undefined, {\n  numeric: true,\n  sensitivity: 'base',\n});\n\nexport const getDataComparisonFunction = <T extends {}>({\n  direction,\n  accessorValue,\n  compareFn,\n}: {\n  direction: SortDirection;\n  accessorValue?: (data: T) => string;\n  compareFn?: (a: T, b: T, dir: SortDirection) => number;\n}) => {\n  if (accessorValue) {\n    return (a: T, b: T) => {\n      const aVal = accessorValue(a);\n      const bVal = accessorValue(b);\n\n      if (direction !== 'desc') {\n        return alphanumericCollator.compare(aVal, bVal);\n      }\n\n      return alphanumericCollator.compare(bVal, aVal);\n    };\n  }\n\n  if (compareFn) {\n    return (a: T, b: T) => compareFn(a, b, direction);\n  }\n\n  console.error(\n    'Error getting Table data comparison function. Please supply either an `accessorValue` or `compareFn`',\n  );\n};\n","import React, { useCallback, useMemo } from 'react';\n\nimport { getDataComparisonFunction, useSortContext } from './SortContext';\nimport { TableProps, TableRowInterface } from './Table';\nimport { useTableContext } from './TableContext';\n\n/**\n * @deprecated\n */\ntype TableBodyProps<Shape> = Pick<TableProps<Shape>, 'children'>;\n\n/**\n * Hook that avoids re-rendering children when the data used to\n * render them hasn't changed, even if their ordering has changed.\n */\nfunction useRenderedChildren<Datum>(\n  data: Array<Datum>,\n  renderFunction: React.FunctionComponent<\n    React.PropsWithChildren<TableRowInterface<Datum>>\n  >,\n  compareFn?: (a: Datum, b: Datum) => number,\n): Array<React.ReactNode> {\n  const resultMap = useMemo(() => {\n    const resultMap = new Map<Datum, React.ReactNode>();\n    data.forEach((datum, index) =>\n      resultMap.set(\n        datum,\n        <React.Fragment key={index}>\n          {renderFunction({ datum, index })}\n        </React.Fragment>,\n      ),\n    );\n    return resultMap;\n  }, [data, renderFunction]);\n\n  return useMemo(() => {\n    if (!compareFn) {\n      return Array.from(resultMap.values());\n    }\n\n    return [...data].sort(compareFn).map(datum => resultMap.get(datum));\n  }, [data, resultMap, compareFn]);\n}\n\n/**\n * @deprecated\n */\nfunction TableBody<Shape>({ children }: TableBodyProps<Shape>) {\n  const {\n    state: { data },\n  } = useTableContext();\n\n  const { sort } = useSortContext();\n\n  const compareFn = useMemo(() => {\n    if (sort) {\n      const { direction, accessorValue, compareFn } = sort;\n\n      if (compareFn) {\n        return getDataComparisonFunction({ direction, compareFn });\n      }\n\n      if (accessorValue) {\n        return getDataComparisonFunction({ direction, accessorValue });\n      }\n    }\n  }, [sort]);\n\n  const renderFunction = useCallback(\n    ({ datum, index }: TableRowInterface<Shape>) => children({ datum, index }),\n    [children],\n  );\n\n  const rows = useRenderedChildren(data, renderFunction, compareFn);\n\n  return <tbody>{rows}</tbody>;\n}\n\nTableBody.displayName = 'TableBody';\n\nexport default TableBody;\n","import React from 'react';\n\nimport { isComponentType } from '@leafygreen-ui/lib';\n\nimport HeaderRow, { HeaderRowElement } from './HeaderRow';\nimport { TableProps } from './Table';\nimport { TableHeaderElement } from './TableHeader';\n\n/**\n * @deprecated\n */\ntype TableHeaderProps<Shape> = Pick<TableProps<Shape>, 'columns'>;\n\n/**\n * @deprecated\n */\nfunction TableHead<Shape>({ columns = [] }: TableHeaderProps<Shape>) {\n  const usingHeaderRow = React.useRef(false);\n\n  function createCols(array: Array<React.ReactNode>): React.ReactNode {\n    return array.map((child, index) => {\n      const tableHeaderCommonProps = {\n        key: index,\n        index,\n      };\n\n      if (isComponentType<HeaderRowElement>(child, 'HeaderRow')) {\n        usingHeaderRow.current = true;\n\n        // FIXME:\n        // eslint-disable-next-line no-unsafe-optional-chaining\n        const { children } = child?.props;\n\n        return React.cloneElement(child, {\n          children: createCols(React.Children.toArray(children)),\n        });\n      }\n\n      if (isComponentType<TableHeaderElement>(child, 'TableHeader')) {\n        return React.cloneElement(child, tableHeaderCommonProps);\n      }\n\n      return child;\n    });\n  }\n\n  const columnArray: Array<React.ReactElement> =\n    // @ts-expect-error Property 'type' does not exist on type '{}'.ts(2339)\n    columns.type === React.Fragment ||\n    isComponentType<HeaderRowElement>(columns, 'HeaderRow')\n      ? React.Children.toArray((columns as React.ReactElement).props.children)\n      : (columns as Array<any>);\n\n  const cols = createCols(columnArray);\n\n  if (usingHeaderRow.current) {\n    return <thead>{cols}</thead>;\n  }\n\n  return (\n    <thead>\n      <HeaderRow>{cols}</HeaderRow>\n    </thead>\n  );\n}\n\nexport default TableHead;\n","import React from 'react';\nimport debounce from 'lodash/debounce';\nimport { transparentize } from 'polished';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport {\n  useIsomorphicLayoutEffect,\n  useViewportSize,\n} from '@leafygreen-ui/hooks';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, transitionDuration } from '@leafygreen-ui/tokens';\n\nimport { HeaderRowProps } from './HeaderRow';\nimport { SortProvider } from './SortContext';\nimport TableBody from './TableBody';\nimport { TableProvider } from './TableContext';\nimport TableHead from './TableHead';\nimport { TableHeaderProps } from './TableHeader';\n\nconst lmShadowColor = transparentize(0.7, palette.black);\nconst dmShadowColor = transparentize(0.3, 'black');\n\nconst containerStyle = css`\n  position: relative;\n  max-width: 100%;\n`;\n\nconst tableStyles = css`\n  font-family: ${fontFamilies.default};\n  position: relative;\n  border-collapse: collapse;\n  box-sizing: border-box;\n  width: 100%;\n  z-index: 0;\n`;\n\nconst shadow = css`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 16px;\n  overflow: hidden;\n  pointer-events: none;\n\n  &:after {\n    opacity: 0;\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 16px;\n    border-radius: 100%;\n    transition: opacity ${transitionDuration.default}ms ease-in-out;\n  }\n`;\n\nconst leftShadow = (darkMode: boolean) => css`\n  left: 0;\n\n  &:after {\n    right: 100%;\n    box-shadow: ${darkMode\n      ? '4px 0 9px 5px ' + dmShadowColor\n      : '4px 0 4px ' +\n        lmShadowColor}; //TODO: Bug: currently the full height of the shadow is not showing unless the background color is removed from <tr>\n  }\n`;\n\nconst rightShadow = (darkMode: boolean) => css`\n  right: 0;\n\n  &:after {\n    left: 100%;\n    box-shadow: ${darkMode\n      ? '-4px 0 9px 5px ' + dmShadowColor\n      : '-4px 0 4px ' + lmShadowColor};\n  }\n`;\n\nconst showScroll = css`\n  &:after {\n    opacity: 1;\n  }\n`;\n\nconst ScrollState = {\n  None: 'none',\n  Left: 'left',\n  Right: 'right',\n  Both: 'both',\n} as const;\n\ntype ScrollState = (typeof ScrollState)[keyof typeof ScrollState];\n\n/**\n * @deprecated\n */\nexport interface TableRowInterface<Shape = {}> {\n  datum: Shape;\n  index: number;\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\nexport interface TableProps<Shape>\n  extends Omit<HTMLElementProps<'table'>, 'children' | 'columns'> {\n  /**\n   * The array of data displayed in rows. Each array element's type is determined by the `Shape` generic.\n   *\n   * @type Array of Objects\n   */\n  data: Array<Shape>;\n\n  /**\n   * React element to render the table's header row.\n   * @type Array of `<TableHeader />`\n   */\n  columns:\n    | React.ReactElement<HeaderRowProps | TableHeaderProps<Shape>>\n    | Array<React.ReactElement<HeaderRowProps | TableHeaderProps<Shape>>>\n    | React.ReactFragment;\n\n  /**\n   * A function that takes in the datum of a single row as a parameter and returns a `JSX.Element` determining how it should be rendered.\n   *\n   * Should make use of the `<Cell>` component.\n   * @type ({datum}) => JSX.Element\n   */\n  children: (TableRowArgs: TableRowInterface<Shape>) => JSX.Element;\n\n  /**\n   * Override the global `baseFontSize` set in LeafyGreenProvider\n   */\n  baseFontSize?: 14 | 16;\n\n  /**\n   * Determines whether or not the component will appear in dark mode.\n   */\n  darkMode?: boolean;\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\nexport default function Table<Shape>({\n  columns = [],\n  data: dataProp = [],\n  children,\n  className,\n  baseFontSize,\n  darkMode: darkModeProp,\n  ...rest\n}: TableProps<Shape>) {\n  const [scrollState, setScrollState] = React.useState<ScrollState>(\n    ScrollState.None,\n  );\n  const divRef = React.useRef<HTMLDivElement>(null);\n  const viewportSize = useViewportSize();\n  const { darkMode } = useDarkMode(darkModeProp);\n\n  useIsomorphicLayoutEffect(() => {\n    const divNode = divRef.current;\n\n    if (divNode == null) {\n      return;\n    }\n\n    if (divNode.scrollWidth > divNode.clientWidth) {\n      setScrollState(ScrollState.Right);\n    } else if (\n      viewportSize != null &&\n      divNode.getBoundingClientRect().width <= viewportSize.width\n    ) {\n      setScrollState(ScrollState.None);\n    }\n  }, [viewportSize]);\n\n  const handleScroll = (e: React.UIEvent) => {\n    const { scrollWidth, clientWidth: elementWidth } =\n      e.target as HTMLDivElement;\n    const isScrollable = scrollWidth > elementWidth;\n\n    if (isScrollable) {\n      const scrollPosition = (e.target as HTMLDivElement).scrollLeft;\n      const maxPosition = scrollWidth - elementWidth;\n\n      if (scrollPosition > 0 && scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Both);\n      } else if (scrollPosition > 0) {\n        setScrollState(ScrollState.Left);\n      } else if (scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Right);\n      }\n    }\n  };\n\n  const debounceScroll = debounce(handleScroll, 50, { leading: true });\n\n  const onScroll: React.EventHandler<React.UIEvent> = e => {\n    e.persist();\n    debounceScroll(e);\n  };\n\n  const showLeft =\n    scrollState === ScrollState.Left || scrollState === ScrollState.Both;\n  const showRight =\n    scrollState === ScrollState.Right || scrollState === ScrollState.Both;\n\n  return (\n    <div className={containerStyle}>\n      <div\n        className={cx(shadow, leftShadow(darkMode), {\n          [showScroll]: showLeft,\n        })}\n      />\n      <div\n        className={cx(shadow, rightShadow(darkMode), {\n          [showScroll]: showRight,\n        })}\n      />\n\n      <div\n        ref={divRef}\n        onScroll={onScroll}\n        className={cx(\n          css`\n            overflow-x: auto;\n          `,\n        )}\n      >\n        <table\n          cellSpacing=\"0\"\n          cellPadding=\"0\"\n          className={cx(tableStyles, className)}\n          {...rest}\n        >\n          <TableProvider data={dataProp}>\n            <SortProvider>\n              <LeafyGreenProvider\n                darkMode={darkMode}\n                baseFontSize={baseFontSize}\n              >\n                <TableHead columns={columns} />\n                <TableBody>{children}</TableBody>\n              </LeafyGreenProvider>\n            </SortProvider>\n          </TableProvider>\n        </table>\n      </div>\n    </div>\n  );\n}\nTable.displayName = 'Table';\n//  TODO: missing proptypes\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport SortAscendingIcon from '@leafygreen-ui/icon/dist/SortAscending';\nimport SortDescendingIcon from '@leafygreen-ui/icon/dist/SortDescending';\nimport UnsortedIcon from '@leafygreen-ui/icon/dist/Unsorted';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { enforceExhaustive, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport { SortDirection, useSortContext } from './SortContext';\nimport { getCommonCellStyles } from './styles';\nimport { DataType, TableActionTypes, useTableContext } from './TableContext';\n\ntype StyledElements = 'thStyle' | 'labelStyle' | 'glyphColor';\n\nconst themeStyles: Record<Theme, Record<StyledElements, string>> = {\n  [Theme.Light]: {\n    thStyle: css`\n      border-color: ${palette.gray.light2};\n    `,\n    labelStyle: css`\n      color: ${palette.gray.dark3};\n    `,\n    glyphColor: css`\n      color: ${palette.blue.base};\n    `,\n  },\n\n  [Theme.Dark]: {\n    thStyle: css`\n      background-color: ${palette.black};\n      border-color: ${palette.gray.dark2};\n    `,\n    labelStyle: css`\n      color: ${palette.gray.light2};\n    `,\n    glyphColor: css`\n      color: ${palette.blue.light1};\n    `,\n  },\n};\n\nconst thStyle = css`\n  border-bottom: 3px solid;\n`;\n\nconst flexDisplay = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst labelStyle = css`\n  padding-right: 4px;\n`;\n\nconst iconButtonMargin = css`\n  margin: -4px 0;\n`;\n\nconst glyphMap = {\n  unsorted: UnsortedIcon,\n  asc: SortDescendingIcon,\n  desc: SortAscendingIcon,\n} as const;\n\ntype NormalizedAccessor<T extends string | Function> = T extends string\n  ? <U>(data: U) => T extends keyof U ? U[T] : undefined\n  : T;\nexport function normalizeAccessor<T extends string | Function>(\n  accessor: T,\n): NormalizedAccessor<T> {\n  let accessorFn = accessor as NormalizedAccessor<T>;\n\n  if (typeof accessor === 'string') {\n    if (accessor.includes('.')) {\n      const accessorArr = accessor.split('.');\n\n      accessorFn = ((data: any) => {\n        return accessorArr.reduce((obj, access) => {\n          return obj[access];\n        }, data);\n      }) as NormalizedAccessor<T>;\n    } else {\n      accessorFn = ((data: any) => data[accessor]) as NormalizedAccessor<T>;\n    }\n  }\n\n  return accessorFn;\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\ninterface TableHeaderInterface<Shape> {\n  /**\n   * The label of the column\n   *\n   * @type string\n   */\n  label: React.ReactElement | string;\n\n  /**\n   * The index of the column\n   */\n  index?: number;\n\n  /**\n   * Callback fired when the header is clicked\n   */\n  onClick?: (\n    colId: number,\n    accessorValue: ((data: any) => string) | string,\n  ) => void;\n\n  /**\n   * A callback to define which property of the data structure to sort on\n   */\n  sortBy?: ((data: Shape) => string) | string;\n\n  /**\n   * A callback to provide more customization in column sorting.\n   * This callback has a similar signature to the Array.sort method,\n   * with the addition of a `direction` parameter, which has values `asc` or `desc`.\n   *\n   * Pin a row to the top by returning -1 if `a` matches, and 1 if `b` matches the desired row\n   */\n  compareFn?: (a: Shape, b: Shape, direction: SortDirection) => number;\n\n  /**\n   * A callback that gets called when a user initiates sort on the column.\n   * Internal sorting is disabled when this callback is provided.\n   */\n  handleSort?: (direction: SortDirection) => void;\n\n  /**\n   * The type of data as a `DataType`\n   */\n  dataType?: DataType;\n}\n\nexport type TableHeaderProps<Shape> = Omit<\n  React.ComponentPropsWithoutRef<'th'>,\n  keyof TableHeaderInterface<Shape>\n> &\n  TableHeaderInterface<Shape>;\n\nexport type TableHeaderElement = React.ReactComponentElement<\n  typeof TableHeader\n>;\n\n/**\n * @deprecated\n * @noDocgen\n */\nfunction TableHeader<Shape>({\n  label,\n  onClick,\n  index,\n  className,\n  dataType,\n  sortBy,\n  compareFn,\n  handleSort,\n  ...rest\n}: TableHeaderProps<Shape>) {\n  const { dispatch } = useTableContext();\n  const { sort, setSort } = useSortContext();\n  const baseFontSize = useUpdatedBaseFontSize();\n  const { theme, darkMode } = useDarkMode();\n\n  React.useEffect(() => {\n    if (typeof index === 'number') {\n      dispatch({\n        type: TableActionTypes.RegisterColumn,\n        payload: {\n          // Offsetting 0-index\n          index: index + 1,\n          dataType,\n        },\n      });\n    }\n  }, [index, dataType, dispatch]);\n\n  const normalizedAccessor = sortBy && normalizeAccessor(sortBy);\n  const isSortable = !!(sortBy || compareFn || handleSort);\n\n  const sortDirection = sort && sort.columnId === index ? sort.direction : null;\n  const glyph: 'unsorted' | SortDirection = sortDirection ?? 'unsorted';\n  const Glyph = glyphMap[glyph];\n\n  const sortRows = () => {\n    if (typeof index === 'number' && isSortable) {\n      const newDirection: SortDirection =\n        index === sort?.columnId\n          ? sort.direction === 'asc'\n            ? 'desc'\n            : 'asc'\n          : 'desc';\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setSort(prevSort => {\n        return {\n          columnId: index,\n          direction: newDirection,\n          accessorValue: normalizedAccessor || undefined,\n          compareFn,\n        };\n      });\n\n      handleSort?.(newDirection);\n    }\n  };\n\n  let ariaSort: React.AriaAttributes['aria-sort'];\n\n  switch (sortDirection) {\n    case 'asc':\n      ariaSort = 'ascending';\n      break;\n    case 'desc':\n      ariaSort = 'descending';\n      break;\n    case null:\n      ariaSort = 'none';\n      break;\n    default:\n      enforceExhaustive(sortDirection);\n  }\n\n  return (\n    <th\n      role=\"columnheader\"\n      scope=\"col\"\n      aria-sort={ariaSort}\n      {...rest}\n      className={cx(\n        getCommonCellStyles(baseFontSize),\n        thStyle,\n        themeStyles[theme].thStyle,\n        className,\n      )}\n    >\n      <div className={flexDisplay}>\n        <span className={cx(labelStyle, themeStyles[theme].labelStyle)}>\n          {label}\n        </span>\n        {isSortable && (\n          <IconButton\n            className={iconButtonMargin}\n            aria-label=\"sort\"\n            onClick={sortRows}\n            darkMode={darkMode}\n          >\n            <Glyph\n              size=\"small\"\n              title={`${glyph}-${index}`}\n              className={cx({\n                [themeStyles[theme].glyphColor]:\n                  glyph === 'asc' || glyph === 'desc',\n              })}\n            />\n          </IconButton>\n        )}\n      </div>\n    </th>\n  );\n}\n\nTableHeader.displayName = 'TableHeader';\n\nexport default TableHeader;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const disabledTableRowCheckStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    input + div {\n      border-color: ${palette.gray.light1};\n      background-color: ${palette.gray.light2};\n    }\n    input[aria-checked='true'] + div {\n      &:before {\n        background-color: ${palette.gray.light1};\n      }\n      & path {\n        stroke: ${palette.white};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    input + div {\n      border-color: ${palette.gray.dark1};\n      background-color: ${palette.gray.dark2};\n    }\n    input[aria-checked='true'] + div {\n      &:before {\n        background-color: ${palette.gray.dark1};\n      }\n      & path {\n        stroke: ${palette.gray.base};\n      }\n    }\n  `,\n};\n","import React from 'react';\nimport { Table } from '@tanstack/react-table';\n\nimport Checkbox from '@leafygreen-ui/checkbox';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { useRowContext } from '../Row/RowContext';\n\nimport { disabledTableRowCheckStyles } from './useLeafyGreenTable.styles';\nimport { LGRowData, LGTableDataType } from '.';\n\nexport const TableHeaderCheckbox = <T extends LGRowData>({\n  table,\n}: {\n  table: Table<LGTableDataType<T>>;\n}) => {\n  const { theme } = useDarkMode();\n  const { disabled: rowIsDisabled } = useRowContext();\n  return (\n    <Checkbox\n      className={cx({\n        [disabledTableRowCheckStyles[theme]]: rowIsDisabled,\n      })}\n      disabled={rowIsDisabled}\n      checked={table.getIsAllRowsSelected()}\n      indeterminate={table.getIsSomeRowsSelected()}\n      onChange={table.getToggleAllRowsSelectedHandler()}\n      aria-label=\"Select all rows\"\n    />\n  );\n};\n","import React from 'react';\nimport { Row, Table } from '@tanstack/react-table';\n\nimport Checkbox from '@leafygreen-ui/checkbox';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { useRowContext } from '../Row/RowContext';\n\nimport { disabledTableRowCheckStyles } from './useLeafyGreenTable.styles';\nimport { LGRowData, LGTableDataType } from '.';\n\nexport const TableRowCheckbox = <T extends LGRowData>({\n  row,\n  table,\n}: {\n  table: Table<LGTableDataType<T>>;\n  row: Row<LGTableDataType<T>>;\n}) => {\n  const { theme } = useDarkMode();\n  const { disabled: rowIsDisabled } = useRowContext();\n  return (\n    <Checkbox\n      className={cx({\n        [disabledTableRowCheckStyles[theme]]: rowIsDisabled,\n      })}\n      disabled={rowIsDisabled}\n      checked={row.getIsSelected()}\n      indeterminate={row.getIsSomeSelected()}\n      onChange={row.getToggleSelectedHandler()}\n      aria-label={`Select row ${row.id}`}\n      aria-controls={`lg-table-row-${row.id}`}\n      // Don't animate if _all_ rows have been checked (usually, if header row is clicked). Not the _best_ check, but it mostly works\n      animate={!table.getIsAllRowsSelected()}\n    />\n  );\n};\n","import React from 'react';\nimport { useVirtual } from 'react-virtual';\nimport { useReactTable } from '@tanstack/react-table';\nimport {\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n} from '@tanstack/react-table';\nimport omit from 'lodash/omit';\n\nimport { TableHeaderCheckbox } from './TableHeaderCheckbox';\nimport { TableRowCheckbox } from './TableRowCheckbox';\nimport { LeafyGreenTableOptions, LGRowData } from './useLeafyGreenTable.types';\nimport { LeafyGreenTable, LGColumnDef, LGTableDataType } from '.';\n\nconst CHECKBOX_WIDTH = 14;\n\nfunction useLeafyGreenTable<T extends LGRowData, V extends unknown = unknown>({\n  containerRef,\n  data,\n  columns: columnsProp,\n  hasSelectableRows,\n  withPagination = false,\n  useVirtualScrolling = false,\n  allowSelectAll = true,\n  virtualizerOptions,\n  ...rest\n}: LeafyGreenTableOptions<T, V>): LeafyGreenTable<T> {\n  /**\n   * A `ColumnDef` object injected into `useReactTable`'s `columns` option when the user is using selectable rows.\n   */\n  const baseSelectColumnConfig: LGColumnDef<T, V> = {\n    id: 'select',\n    size: CHECKBOX_WIDTH,\n    header: TableHeaderCheckbox,\n    cell: TableRowCheckbox,\n  };\n\n  const hasSortableColumns = React.useMemo(\n    () => columnsProp.some(propCol => !!propCol.enableSorting),\n    [columnsProp],\n  );\n  const selectColumnConfig = allowSelectAll\n    ? baseSelectColumnConfig\n    : omit(baseSelectColumnConfig, 'header');\n  const columns = React.useMemo<Array<LGColumnDef<T, V>>>(\n    () => [\n      ...(hasSelectableRows ? [selectColumnConfig as LGColumnDef<T, V>] : []),\n      ...columnsProp.map(propColumn => {\n        return {\n          ...propColumn,\n          align: propColumn.align ?? 'left',\n          enableSorting: propColumn.enableSorting ?? false,\n        } as LGColumnDef<T, V>;\n      }),\n    ],\n    [columnsProp, hasSelectableRows, selectColumnConfig],\n  );\n\n  const table = useReactTable<LGTableDataType<T>>({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getRowCanExpand: row => {\n      return !!row.original.renderExpandedContent || !!row.subRows?.length;\n    },\n    enableExpanding: true,\n    enableSortingRemoval: hasSortableColumns ? true : undefined,\n    getSubRows: row => row.subRows,\n    getSortedRowModel: getSortedRowModel(),\n    getPaginationRowModel: withPagination ? getPaginationRowModel() : undefined,\n    ...rest,\n  });\n\n  const { rows } = table.getRowModel();\n  const _rowVirtualizer = useVirtual({\n    parentRef: containerRef,\n    size: rows.length,\n    overscan: 30,\n    ...virtualizerOptions,\n  });\n\n  return {\n    ...table,\n    ...(useVirtualScrolling && {\n      virtualRows: _rowVirtualizer.virtualItems,\n      totalSize: _rowVirtualizer.totalSize,\n      scrollToIndex: _rowVirtualizer.scrollToIndex,\n    }),\n    hasSelectableRows,\n  } as LeafyGreenTable<T>;\n}\n\nexport default useLeafyGreenTable;\n","import React, { ReactElement } from 'react';\nimport { Row, SortingFn } from '@tanstack/react-table';\nimport camelCase from 'lodash/camelCase';\n\nimport { Align } from '../Cell/Cell.types';\nimport { TableProps } from '../TableV10/Table';\n\nimport { ValidDataType } from './V11Adapter.types';\n\n/**\n * Converts V10's HeaderRow ReactElement to an Array<ColumnDef>\n * to be consumed by `react-table`.\n *\n * @param data returned value from `processData`\n * @param columns V10's `columns` prop\n * @param headerLabels any overrides to the header's label when the label does not correspond to its data's key in `data`\n * @returns Array<ColumnDef>\n */\nconst processColumns = <T extends ValidDataType>(\n  data: Array<T>,\n  columns: TableProps<T>['columns'],\n  headerLabels?: { [key: string]: string },\n) => {\n  const columnsChildren = React.Children.toArray(columns);\n\n  let TableHeaders;\n\n  // when columnsChildren.length > 1, columns was passed an array of TableHeaders instead of a HeaderRow.\n  if (columnsChildren.length > 1) {\n    TableHeaders = columnsChildren;\n  } else {\n    const HeaderRow = columnsChildren[0] as ReactElement;\n    TableHeaders = React.Children.toArray(HeaderRow.props.children);\n  }\n\n  const processedColumns = TableHeaders.map(TableHeader => {\n    const headerProps = (TableHeader as ReactElement).props;\n\n    const hasSorting =\n      !!headerProps.sortBy ||\n      !!headerProps.handleSort ||\n      !!headerProps.compareFn;\n\n    const convertedCompareFn: SortingFn<T> = (\n      rowA: Row<T>,\n      rowB: Row<T>,\n      _: any,\n    ) => {\n      const indexA = rowA.index;\n      const indexB = rowB.index;\n      return headerProps.compareFn(data[indexA], data[indexB]);\n    };\n\n    const defaultSortingFn = (rowA: Row<T>, rowB: Row<T>, columnId: string) => {\n      const indexA = rowA.index;\n      const indexB = rowB.index;\n      return (data[indexA] as T)[columnId] > (data[indexB] as T)[columnId]\n        ? -1\n        : (data[indexB] as T)[columnId] > (data[indexA] as T)[columnId]\n        ? 1\n        : 0;\n    };\n\n    const retVal = {\n      accessorKey:\n        (headerLabels && headerLabels[headerProps.label]) ??\n        camelCase(headerProps.label),\n      header: headerProps.label,\n      align: (headerProps.dataType === 'number' ? 'right' : 'left') as Align,\n      enableSorting: hasSorting,\n      sortingFn: headerProps.compareFn\n        ? convertedCompareFn\n        : hasSorting\n        ? defaultSortingFn\n        : undefined,\n    };\n\n    return retVal;\n  });\n  return processedColumns;\n};\n\nexport default processColumns;\n","import React, { ReactElement } from 'react';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { AccessorKeyColumnDef } from '@tanstack/react-table';\n\nimport { isComponentType } from '@leafygreen-ui/lib';\n\nimport { TableRowInterface } from '../TableV10/Table';\nimport { LGTableDataType } from '../useLeafyGreenTable';\n\nimport { ProcessedRowData, ValidDataType } from './V11Adapter.types';\n\nconst processData: (\n  data: Array<any>,\n  processedColumns: Array<AccessorKeyColumnDef<any>>,\n  childrenFn: (TableRowArgs: TableRowInterface<unknown>) => JSX.Element,\n) => Array<ProcessedRowData> = <T extends ValidDataType>(\n  data: Array<any>,\n  processedColumns: Array<AccessorKeyColumnDef<T>>,\n  childrenFn: (TableRowArgs: TableRowInterface<unknown>) => JSX.Element,\n) => {\n  const processedData = data.map((oldDatum, index) => {\n    // for each row, evaluate childrenFn\n    const evaluatedChildren = childrenFn({ datum: oldDatum, index });\n    const childrenArray = flattenChildren(evaluatedChildren);\n\n    const evaluatedRow = childrenArray.filter(child =>\n      isComponentType(child, 'Row'),\n    )[0];\n    const rowChildren = flattenChildren(\n      (evaluatedRow as ReactElement).props.children,\n    );\n\n    const evaluatedCells = rowChildren.filter(child =>\n      isComponentType(child, 'Cell'),\n    );\n\n    const newDatum: LGTableDataType<T> = evaluatedCells.reduce(\n      (acc: T, currVal, index) => {\n        return {\n          ...acc,\n          [processedColumns[index]?.accessorKey]: () => currVal as ReactElement,\n        } as T;\n      },\n      {} as T,\n    );\n\n    const subRowChildren = rowChildren.filter(child =>\n      isComponentType(child, 'Row'),\n    );\n    if (subRowChildren.length > 0) newDatum.subRows = [];\n    subRowChildren.map(subRow => {\n      const subRowCells = flattenChildren(\n        (subRow as ReactElement).props.children,\n      );\n      const firstSubRowCell = subRowCells[0];\n      const firstSubRowCellColSpan = (firstSubRowCell as ReactElement).props\n        .colSpan;\n\n      if (\n        firstSubRowCellColSpan &&\n        firstSubRowCellColSpan === processedColumns.length\n      ) {\n        // eslint-disable-next-line react/display-name\n        newDatum.renderExpandedContent = () => (\n          <div style={{ padding: '10px 8px 10px 32px' }}>\n            {(firstSubRowCell as ReactElement).props.children}\n          </div>\n        );\n      } else {\n        const processedSubRow = subRowCells.reduce((acc: T, currVal, index) => {\n          return {\n            ...acc,\n            [processedColumns[index]?.accessorKey]: () =>\n              currVal as ReactElement,\n          };\n        }, {} as T);\n        const {\n          children,\n          expanded,\n          indentLevel,\n          isAnyAncestorCollapsed,\n          ...rowProps\n        } = (subRow as ReactElement).props;\n        newDatum.subRows &&\n          newDatum.subRows.push({\n            ...processedSubRow,\n            rowProps,\n          } as T);\n      }\n    });\n\n    return { ...newDatum, rowProps: (evaluatedRow as ReactElement).props };\n  });\n  return processedData;\n};\n\nexport default processData;\n","import React, {\n  ReactElement,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { VirtualItem } from 'react-virtual';\nimport { flexRender } from '@tanstack/react-table';\nimport omit from 'lodash/omit';\n\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { consoleOnce, isComponentType } from '@leafygreen-ui/lib';\n\nimport { Cell, HeaderCell } from '../Cell';\nimport ExpandedContent from '../ExpandedContent/ExpandedContent';\nimport { HeaderRow, Row } from '../Row';\nimport Table from '../Table';\nimport TableBody from '../TableBody';\nimport TableHead from '../TableHead';\nimport { TableProps as V10TableProps } from '../TableV10/Table';\nimport { TableHeaderProps } from '../TableV10/TableHeader';\nimport useLeafyGreenTable, {\n  LeafyGreenTableCell,\n  LeafyGreenTableRow,\n  LGColumnDef,\n  LGTableDataType,\n} from '../useLeafyGreenTable';\n\nimport processColumns from './processColumns';\nimport processData from './processData';\nimport {\n  ProcessedRowData,\n  V11AdapterProps,\n  ValidDataType,\n} from './V11Adapter.types';\n\n/**\n * Converts a v10 Table component to a v11 Table component.\n *\n * Given the two versions' significant differences in API, the adapter makes several assumptions about the v10 Table's usage:\n * - It is assumed that the v10 Table component will be the first child.\n * - The v11 columns are read from the v10 columns' labels. If the key of the cells' data does not correspond to the v10 column's label,\n * the user is expected to pass in the labels through the `headerLabels` prop.\n * - Currently only supports up to one layer of nested rows\n */\nconst V11Adapter = <T extends ValidDataType>({\n  children,\n  shouldAlternateRowColor,\n  useVirtualScrolling = false,\n  hasSelectableRows = false,\n  headerLabels,\n  className,\n}: V11AdapterProps<T>) => {\n  const containerRef = useRef(null);\n  const OldTable = flattenChildren(children)[0];\n\n  if (!isComponentType(OldTable, 'Table')) {\n    consoleOnce.error(\n      'The first and only child of `Table.V11Adapter` must be a `V10Table` component',\n    );\n  }\n\n  const OldTableProps = (OldTable as ReactElement).props;\n  const { darkMode } = useDarkMode(OldTableProps.darkMode);\n  type TData = typeof OldTableProps.data extends Array<infer U> ? U : never;\n\n  const {\n    data: initialData,\n    columns: initialColumns,\n    children: childrenFn,\n    baseFontSize,\n    ...oldTableProps\n  } = OldTableProps as V10TableProps<TData>;\n\n  const data = initialData as Array<T>;\n\n  const processedColumns = useMemo(\n    () => processColumns(data, initialColumns, headerLabels),\n    [data, initialColumns, headerLabels],\n  );\n\n  const [processedData, setProcessedData] = useState<\n    Array<LGTableDataType<ProcessedRowData>>\n  >(() => processData(data, processedColumns, childrenFn));\n\n  useEffect(() => {\n    setProcessedData(processData(data, processedColumns, childrenFn));\n  }, [data, processedColumns, childrenFn]);\n\n  const table = useLeafyGreenTable<T>({\n    containerRef,\n    data: processedData as Array<LGTableDataType<T>>,\n    columns: processedColumns as Array<LGColumnDef<T>>,\n    useVirtualScrolling,\n    hasSelectableRows,\n  });\n\n  const { rows } = table.getRowModel();\n\n  const iterables = useVirtualScrolling ? table.virtualRows ?? [] : rows;\n\n  const columnsChildren = React.Children.toArray(initialColumns);\n  const oldHeaderRow = columnsChildren[0] as ReactElement;\n\n  const oldHeaderCellProps: Array<TableHeaderProps<T>> = [];\n\n  if (columnsChildren.length < 2) {\n    React.Children.toArray(oldHeaderRow.props.children).map(child => {\n      const { label, dataType, ...props } = (child as ReactElement).props;\n      oldHeaderCellProps.push(props);\n    });\n  }\n\n  return (\n    <Table\n      darkMode={darkMode}\n      table={table}\n      shouldAlternateRowColor={\n        shouldAlternateRowColor ?? processedData.length > 10\n      }\n      className={className}\n      ref={containerRef}\n      baseFontSize={baseFontSize === 14 ? 13 : baseFontSize}\n      {...oldTableProps}\n    >\n      <TableHead>\n        <HeaderRow {...oldHeaderRow.props}>\n          {table.getHeaderGroups()[0].headers.map((header, i) => {\n            // remove onClick as the API is incompatible with the new API\n            const validOldHeaderCellProps = omit(\n              oldHeaderCellProps[i],\n              'onClick',\n            );\n            return (\n              <HeaderCell\n                key={header.id}\n                header={header}\n                {...validOldHeaderCellProps}\n              >\n                {flexRender(\n                  header.column.columnDef.header,\n                  header.getContext(),\n                )}\n              </HeaderCell>\n            );\n          })}\n        </HeaderRow>\n      </TableHead>\n      <TableBody>\n        {iterables.map((iterable: LeafyGreenTableRow<T> | VirtualItem) => {\n          const row = (\n            useVirtualScrolling ? rows[iterable.index] : iterable\n          ) as LeafyGreenTableRow<T>;\n          return (\n            <Row\n              key={row.index}\n              row={row}\n              virtualRow={\n                useVirtualScrolling ? (iterable as VirtualItem) : undefined\n              }\n              {...(row.original as T).rowProps}\n            >\n              {row.getVisibleCells().map((cell: LeafyGreenTableCell<T>) => {\n                if (cell?.column?.id) {\n                  if (cell?.column?.id === 'select') {\n                    return (\n                      <Cell key={cell.column.id}>\n                        {cell.column.columnDef?.cell &&\n                          typeof cell.column.columnDef?.cell != 'string' &&\n                          // Use default values defined by react-table instead of passing in expected parameters\n                          // @ts-expect-error\n                          cell.column.columnDef?.cell({ row, table })}\n                      </Cell>\n                    );\n                  } else {\n                    const cellChild =\n                      processedData[row.index]?.[cell.column.id]?.();\n                    const {\n                      children,\n                      isHeader,\n                      isDisabled,\n                      ...cellChildProps\n                    } = cellChild.props;\n                    return cellChild ? (\n                      <Cell key={cell.id} {...cellChildProps}>\n                        <>{children}</>\n                      </Cell>\n                    ) : (\n                      <></>\n                    );\n                  }\n                } else {\n                  return <></>;\n                }\n              })}\n              {row.original.renderExpandedContent && (\n                <ExpandedContent row={row} />\n              )}\n              {row.subRows &&\n                row.subRows.map(subRow => {\n                  const { children, ...subRowProps } = subRow.original\n                    .rowProps as ValidDataType['rowProps'];\n                  return (\n                    <Row key={subRow.id} row={subRow} {...subRowProps}>\n                      {subRow.getVisibleCells().map(srCell => {\n                        const subRowCell = subRow.original[srCell.column.id]();\n                        const {\n                          children,\n                          isHeader,\n                          isDisabled,\n                          ...subRowCellProps\n                        } = subRowCell.props;\n                        return (\n                          <Cell key={subRowCell.id} {...subRowCellProps}>\n                            {children}\n                          </Cell>\n                        );\n                      })}\n                    </Row>\n                  );\n                })}\n            </Row>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default V11Adapter;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","TableContext","createContext","useTableContext","useContext","TableContextProvider","_ref","children","darkMode","table","shouldAlternateRowColor","disableAnimations","getRowById","id","_table$getRowModel$ro","getRowModel","rowsById","undefined","TableProvider","Provider","React","default","createElement","LeafyGreenProvider","value","getParentRow","childId","childIds","split","parentId","slice","length","join","getParentRowId","baseTableSidePadding","spacing","standardCellHeight","baseCellStyles","css","_taggedTemplateLiteral","alignmentStyles","align","arguments","getCellPadding","_ref$depth","depth","isExpandable","isSelectable","depthPadding","basicCellStyles","cellTransitionContainerStyles","transitionDuration","truncatedContentStyles","typeScales","body1","lineHeight","disableAnimationStyles","cellContentTransitionStateStyles","height","_hiddenStyles","entered","entering","exiting","exited","unmounted","_excluded","Cell","className","contentClassName","rest","_objectWithoutProperties","_extends","cx","_defineProperty","Cell$1","displayName","_templateObject12","SortState","glyphs","themeGlyphColors","Theme","Dark","palette","blue","base","gray","light1","Light","dark1","SortIcon","sortState","onSortIconClick","theme","useDarkMode","Fragment","IconButton","onClick","e","Icon","glyph","fill","headerCellContentStyles","HeaderSortState","false","asc","desc","HeaderCell","_header$getSize","_header$column$column","columnName","size","cellIndex","header","isFirstCell","hasSelectableRows","column","getCanSort","columnDef","headerSortDirection","getIsSorted","toString","getToggleSortingHandler","getSize","scope","concat","expandedContentParentStyles","dark4","light3","selectedRowStyles","dark3","grayZebraRowStyles","zebraStyles","clickableStyles","hoverRing","focusRing","input","disabledStyles","dark2","light2","RowContext","useRowContext","RowContextProvider","disabled","InternalRowBase","tabIndex","getAreAncestorsExpanded","startId","isExpanded","parent","_isExpanded","_parent","getIsExpanded","baseStyles","expandedContentStyles","ExpandedContent","row","_useTableContext","contentRef","useRef","transitionRef","areAncestorsExpanded","isNestedRow","content","original","renderExpandedContent","contentHeight","useMemo","current","clientHeight","colSpan","getVisibleCells","Transition","in","timeout","nodeRef","state","ref","HeaderRow","Children","map","child","index","props","HeaderRow$1","InternalRowWithoutRT","forEach","isComponentType","consoleOnce","warn","CellOverflowBehavior","InternalCell","_contentRef$current","_ref$isVisible","isVisible","_ref$isExpandable","overflow","scrollHeight","shouldTruncate","propTypes","PropTypes","number","bool","iconButtonTransitionStyles","iconFills","rotatedStyles","ToggleExpandedIcon","toggleExpanded","role","func","isRequired","RowCellChildren","CellChildren","parentRow","isNested","isParentExpanded","isRowVisible","getCanExpand","colIndex","_props","cell","InternalRowWithRT","virtualRow","rowRef","measureRef","isTableExpandable","getCanSomeRowsExpand","isOddVSRow","isSelected","getIsSelected","flattenedChildren","flattenChildren","filter","OtherChildren","shouldRenderAsTBody","containerAs","tBodyProps","Polymorph","as","Row","Row$1","any","themeStyles","tableContainerStyles","Table","forwardRef","containerRef","_ref$shouldAlternateR","baseFontSizeProp","baseFontSize","darkModeProp","_ref$disableAnimation","useUpdatedBaseFontSize","_useDarkMode","bodyTypeScaleStyles","Table$1","oneOf","Object","values","BaseFontSize","TableBody","paddingTop","paddingBottom","areSomeRowsExpandable","bodyAs","virtualRows","_virtualRows$","_virtualRows","totalSize","start","end","style","TableBody$1","stickyStyles","black","white","TableHead","isSticky","TableHead$1","sharedStyles","getCommonCellStyles","tdInnerDivClassName","createUniqueClassName","thStyles","lightModeThStyles","darkModeThStyles","innerDivStyles","lightModeDisabledHeaderStyles","darkModeDisabledHeaderStyles","_ref$isHeader","isHeader","isDisabled","Root","nestedRowInitialStyle","hiddenRowStyles","nestedRowTransitionStyles","NestedRow","_useState2","_slicedToArray","useState","nestedRowHeight","setNestedRowHeight","nestedRowNodeRef","useEffect","innerSpan","querySelector","offsetHeight","calculateRowContentHeight","TableActionTypes","RegisterColumn","SetHasNestedRows","SetHasRowSpan","SetData","DataType","Number","Weight","ZipCode","String","Date","data","dispatch","reducer","action","type","_objectSpread","hasRowSpan","payload","hasNestedRows","columnInfo","dataType","initialState","_useReducer2","useReducer","contextValue","obj","_templateObject13","_templateObject14","_templateObject15","Device","Browser","Server","Native","canUseDOM","window","document","device","navigator","product","SSRObject","isBrowser","isServer","isNative","canUseWorkers","Worker","canUseEventListeners","addEventListener","canUseViewport","screen","useSSRObject","_len","args","Array","_key","reduce","acc","assign","keys","key","_excluded2","iconButtonMargin","iconButtonThemeStyles","iconButtonThemeDisabledStyles","rowStyle","altColor","disabledStyle","hideRow","_ref$expanded","expanded","_ref$disabled","_ref$indentLevel","indentLevel","isAnyAncestorCollapsedProp","isAnyAncestorCollapsed","_useTableContext$stat","tableDispatch","shouldAltRowColor","indexRef","useIdAllocator","prefix","setIsExpanded","nestedRowParentRef","shouldDispatchHasNestedRows","shouldDispatchHasRowSpan","rowSpan","_useMemo","renderedNestedRows","rowHasNestedRows","toArray","some","shouldTransitionGroupBeVisible","renderedNestedRowTransitionGroup","enter","exit","renderedChildren","push","cloneElement","ChevronDownIcon","ChevronRightIcon","chevronButton","curr","_renderedChildren$0$p","firstChildChildren","firstChildProps","entries","_ref2","_ref3","justify","styleColumn","rowClassName","getIndentLevelStyle","_toConsumableArray","SortContext","sort","setSort","SortProvider","useSortContext","alphanumericCollator","Intl","Collator","numeric","sensitivity","getDataComparisonFunction","direction","accessorValue","compareFn","a","b","aVal","bVal","compare","console","error","_compareFn","rows","renderFunction","resultMap","Map","datum","set","get","from","useRenderedChildren","useCallback","_ref$columns","columns","usingHeaderRow","cols","createCols","array","tableHeaderCommonProps","lmShadowColor","transparentize","dmShadowColor","containerStyle","tableStyles","fontFamilies","shadow","leftShadow","rightShadow","showScroll","ScrollState","_ref$data","dataProp","_React$useState2","scrollState","setScrollState","divRef","viewportSize","useViewportSize","useIsomorphicLayoutEffect","divNode","scrollWidth","clientWidth","getBoundingClientRect","width","debounceScroll","debounce","target","elementWidth","scrollPosition","scrollLeft","maxPosition","leading","showLeft","showRight","onScroll","persist","cellSpacing","cellPadding","thStyle","labelStyle","glyphColor","flexDisplay","glyphMap","unsorted","UnsortedIcon","SortDescendingIcon","SortAscendingIcon","TableHeader","label","sortBy","handleSort","_useSortContext","ariaSort","normalizedAccessor","accessor","accessorFn","includes","accessorArr","access","normalizeAccessor","isSortable","sortDirection","columnId","Glyph","enforceExhaustive","newDirection","prevSort","title","disabledTableRowCheckStyles","TableHeaderCheckbox","rowIsDisabled","Checkbox","checked","getIsAllRowsSelected","indeterminate","getIsSomeRowsSelected","onChange","getToggleAllRowsSelectedHandler","TableRowCheckbox","getIsSomeSelected","getToggleSelectedHandler","animate","useLeafyGreenTable","columnsProp","_ref$withPagination","withPagination","_ref$useVirtualScroll","useVirtualScrolling","_ref$allowSelectAll","allowSelectAll","virtualizerOptions","baseSelectColumnConfig","hasSortableColumns","propCol","enableSorting","selectColumnConfig","omit","propColumn","_propColumn$align","_propColumn$enableSor","useReactTable","getCoreRowModel","getRowCanExpand","_row$subRows","subRows","enableExpanding","enableSortingRemoval","getSubRows","getSortedRowModel","getPaginationRowModel","_rowVirtualizer","useVirtual","parentRef","overscan","virtualItems","scrollToIndex","processData","processedColumns","childrenFn","oldDatum","evaluatedChildren","evaluatedRow","rowChildren","newDatum","currVal","_processedColumns$ind","accessorKey","subRowChildren","subRow","subRowCells","firstSubRowCell","firstSubRowCellColSpan","padding","processedSubRow","_processedColumns$ind2","rowProps","_excluded3","_excluded4","_excluded5","_table$virtualRows","_ref$hasSelectableRow","headerLabels","OldTable","OldTableProps","initialData","initialColumns","oldTableProps","TableHeaders","columnsChildren","headerProps","hasSorting","camelCase","sortingFn","rowA","rowB","_","indexA","indexB","processColumns","processedData","setProcessedData","iterables","oldHeaderRow","oldHeaderCellProps","getHeaderGroups","headers","i","validOldHeaderCellProps","flexRender","getContext","iterable","_cell$column","_cell$column2","_cell$column$columnDe","_cell$column$columnDe2","_cell$column$columnDe3","_processedData$row$in","_processedData$row$in2","cellChild","call","_cellChild$props","_children","cellChildProps","subRowProps","srCell","subRowCell","_subRowCell$props","subRowCellProps"],"mappings":"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"}