{"version":3,"file":"index.js","sources":["../../src/TableContext/TableContext.tsx","../../src/Cell/Cell.styles.ts","../../src/utils/getParentRowId.ts","../../src/Cell/Cell.tsx","../../src/Cell/HeaderCell/HeaderCell.types.ts","../../src/Cell/HeaderCell/HeaderCell.styles.ts","../../src/Row/Row.styles.ts","../../src/ExpandedContent/ExpandedContent.styles.ts","../../src/Cell/HeaderCell/SortIcon/SortIcon.tsx","../../src/Cell/HeaderCell/HeaderCell.tsx","../../src/Row/RowContext.tsx","../../src/Row/InternalRowBase.tsx","../../src/utils/areAncestorsExpanded.ts","../../src/ExpandedContent/ExpandedContent.tsx","../../src/Row/HeaderRow/HeaderRow.tsx","../../src/Row/InternalRowWithoutRT.tsx","../../src/ToggleExpandedIcon/ToggleExpandedIcon.styles.tsx","../../src/Cell/Cell.types.ts","../../src/Cell/InternalCell.tsx","../../src/ToggleExpandedIcon/ToggleExpandedIcon.tsx","../../src/Row/RowCellChildren.tsx","../../src/Table/Table.styles.ts","../../src/Row/InternalRowWithRT.tsx","../../src/Row/Row.tsx","../../src/Table/Table.tsx","../../src/TableBody/TableBody.tsx","../../src/TableHead/TableHead.styles.tsx","../../src/TableV10/styles.tsx","../../src/TableHead/TableHead.tsx","../../src/TableV10/Cell.tsx","../../src/TableV10/HeaderRow.tsx","../../src/TableV10/NestedRow.tsx","../../src/TableV10/TableContext.tsx","../../src/TableV10/useSSR.ts","../../src/TableV10/Row.tsx","../../src/TableV10/SortContext.tsx","../../src/TableV10/TableBody.tsx","../../src/TableV10/TableHead.tsx","../../src/TableV10/Table.tsx","../../src/TableV10/TableHeader.tsx","../../src/useLeafyGreenTable/useLeafyGreenTable.styles.ts","../../src/useLeafyGreenTable/TableHeaderCheckbox.tsx","../../src/useLeafyGreenTable/TableRowCheckbox.tsx","../../src/useLeafyGreenTable/useLeafyGreenTable.tsx","../../src/V11Adapter/processColumns.tsx","../../src/V11Adapter/processData.tsx","../../src/V11Adapter/V11Adapter.tsx"],"sourcesContent":["import React, { createContext, PropsWithChildren, useContext } from 'react';\n\nimport LeafyGreenProvider from '@leafygreen-ui/leafygreen-provider';\n\nimport { LGRowData } from '../useLeafyGreenTable';\nimport getParentRowId from '../utils/getParentRowId';\n\nimport { type TableContextValues } from './TableContext.types';\n\nexport const TableContext = createContext<\n  Partial<TableContextValues<LGRowData>>\n>({});\n\nexport const useTableContext = <T extends LGRowData>() =>\n  useContext<TableContextValues<T>>(\n    TableContext as React.Context<TableContextValues<T>>,\n  );\n\nconst TableContextProvider = <T extends LGRowData>({\n  children,\n  darkMode,\n  table,\n  shouldAlternateRowColor,\n  disableAnimations,\n}: PropsWithChildren<Partial<TableContextValues<T>>>) => {\n  const getRowById = (id?: string) =>\n    id ? table?.getRowModel().rowsById?.[id] : undefined;\n\n  const getParentRow = (childId?: string) =>\n    getRowById(getParentRowId(childId));\n\n  /** The appropriately typed context provider */\n  const TableProvider = (TableContext as React.Context<TableContextValues<T>>)\n    .Provider;\n\n  return (\n    <LeafyGreenProvider darkMode={darkMode}>\n      <TableProvider\n        value={{\n          table,\n          getRowById,\n          getParentRow,\n          shouldAlternateRowColor,\n          disableAnimations,\n        }}\n      >\n        {children}\n      </TableProvider>\n    </LeafyGreenProvider>\n  );\n};\n\nexport default TableContextProvider;\n","import { TransitionStatus } from 'react-transition-group';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { spacing, transitionDuration, typeScales } from '@leafygreen-ui/tokens';\n\nimport { Align } from './Cell.types';\n\n/** The base left & right padding in the table */\nexport const baseTableSidePadding = spacing[4];\n\n/** the default width of the expand icon */\nconst iconSize = 28;\n\n/** the default height of a cell */\nexport const standardCellHeight = spacing[5] + spacing[2];\n\nexport const baseCellStyles = css`\n  padding: 0 8px;\n  overflow: hidden;\n\n  &:focus-visible {\n    box-shadow: inset;\n  }\n\n  &:last-child {\n    padding-right: ${baseTableSidePadding}px;\n  }\n`;\n\nexport const alignmentStyles = (align: Align = 'left') => css`\n  justify-content: ${align};\n  text-align: ${align};\n`;\n\nexport const getCellPadding = ({\n  depth = 0,\n  isExpandable,\n  isSelectable,\n}: {\n  depth?: number;\n  isExpandable?: boolean;\n  isSelectable?: boolean;\n}) => {\n  if (depth === 0) {\n    if (isSelectable) {\n      return css`\n        padding-left: ${spacing[2]}px;\n        padding-right: ${spacing[2]}px;\n      `;\n    } else {\n      return css`\n        padding-left: ${baseTableSidePadding +\n        (isExpandable ? 0 : spacing[2])}px;\n      `;\n    }\n  }\n\n  const parentIconsPadding = 8 * (depth - 1); // how much space do parent icons take up\n  const thisIconPadding = isExpandable ? spacing[2] : 0;\n  const depthPadding =\n    iconSize * depth - (parentIconsPadding + thisIconPadding);\n  return css`\n    padding-left: ${baseTableSidePadding + depthPadding}px;\n  `;\n};\n\nexport const basicCellStyles = css`\n  &:first-child {\n    ${getCellPadding({\n      depth: 0,\n      isExpandable: false,\n      isSelectable: false,\n    })}\n  }\n`;\n\nexport const cellTransitionContainerStyles = css`\n  display: flex;\n  align-items: center;\n  min-height: ${standardCellHeight}px;\n  transition-property: min-height, max-height, opacity, padding, transform;\n  transition-duration: ${transitionDuration.default}ms;\n  transition-timing-function: ease;\n`;\n\nexport const truncatedContentStyles = css`\n  /* See https://css-tricks.com/line-clampin/#aa-the-standardized-way */\n  display: -webkit-box;\n  -webkit-line-clamp: ${standardCellHeight / typeScales.body1.lineHeight};\n  -webkit-box-orient: vertical;\n  -webkit-box-align: start;\n`;\n\nexport const disableAnimationStyles = css`\n  transition-duration: 0;\n  transition: none;\n`;\n\nexport const cellContentTransitionStateStyles = (\n  height?: number,\n): Record<TransitionStatus, string> => {\n  const _hiddenStyles = css`\n    opacity: 0;\n    min-height: 0;\n    max-height: 0;\n    overflow: hidden;\n  `;\n\n  return {\n    entered: css`\n      opacity: 1;\n      min-height: ${standardCellHeight}px;\n      max-height: ${height ? height + 'px' : 'unset'};\n    `,\n    entering: _hiddenStyles,\n    exiting: _hiddenStyles,\n    exited: _hiddenStyles,\n    unmounted: _hiddenStyles,\n  };\n};\n","/**\n * `react-table`'s Row `id`s are configured so that the first nested row of Row with `id` '0' is: '0.0'.\n *\n * This function parses a Row's `id` to return its immediate parent Row's id if it exists, and returns `undefined` otherwise.\n *\n * @param childId `id` of the referenced row\n * @returns the `id` of the parent row\n */\nfunction getParentRowId(childId?: string) {\n  if (childId) {\n    const childIds = childId.split('.');\n    const parentId = childIds.slice(0, childIds.length - 1).join('.');\n    return parentId.length > 0 ? parentId : undefined;\n  }\n}\n\nexport default getParentRowId;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\n\nimport { useTableContext } from '../TableContext';\n\nimport {\n  alignmentStyles,\n  baseCellStyles,\n  basicCellStyles,\n  cellTransitionContainerStyles,\n  disableAnimationStyles,\n} from './Cell.styles';\nimport { CellProps } from '.';\n\nconst Cell = ({\n  className,\n  contentClassName,\n  align,\n  children,\n  ...rest\n}: CellProps) => {\n  const { disableAnimations } = useTableContext();\n  return (\n    <td className={cx(baseCellStyles, basicCellStyles, className)} {...rest}>\n      <div\n        className={cx(\n          cellTransitionContainerStyles,\n          alignmentStyles(align),\n          { [disableAnimationStyles]: disableAnimations },\n          contentClassName,\n        )}\n      >\n        {children}\n      </div>\n    </td>\n  );\n};\n\nCell.displayName = 'Cell';\n\nexport default Cell;\n","import { Header } from '@tanstack/react-table';\n\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\n\nimport { LGRowData } from '../../useLeafyGreenTable';\n\nexport const SortState = {\n  Asc: 'asc',\n  Desc: 'desc',\n  Off: 'off',\n  None: 'none',\n} as const;\n\nexport type SortState = (typeof SortState)[keyof typeof SortState];\n\nexport interface SortStates {\n  [key: string]: SortState;\n}\n\nexport interface HeaderCellProps<T extends LGRowData>\n  extends HTMLElementProps<'th'> {\n  /**\n   * The `align` prop set on a HeaderCell will serve as the default `align` prop on the TableCell corresponding to the HeaderCell's index.\n   */\n  align?: HTMLElementProps<'th'>['align'];\n  /**\n   * Determines the current sorting direction.\n   */\n  sortState?: SortState;\n  /**\n   * Header object passed from the `useLeafyGreenTable` hook.\n   */\n  header?: Header<T, unknown>;\n  /**\n   * Index of the HeaderCell set internally in HeaderRow\n   */\n  cellIndex?: number;\n}\n","import { css } from '@leafygreen-ui/emotion';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const headerCellContentStyles = css`\n  height: ${spacing[5] + spacing[2]}px;\n`;\n\nexport const getHeaderCellWidthStyles = (size: number) => css`\n  width: ${size}px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { focusRing, hoverRing } from '@leafygreen-ui/tokens';\n\nexport const expandedContentParentStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.dark4};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.gray.light3};\n  `,\n};\n\n// applied directly to rows for VS\nexport const selectedRowStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.blue.dark3};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.blue.light3};\n  `,\n};\n\n// applied directly to rows for VS\nexport const grayZebraRowStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.dark4};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.gray.light3};\n  `,\n};\n\nexport const zebraStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    &:nth-of-type(even) {\n      ${grayZebraRowStyles[Theme.Dark]}\n    }\n  `,\n  [Theme.Light]: css`\n    &:nth-of-type(even) {\n      ${grayZebraRowStyles[Theme.Light]}\n    }\n  `,\n};\n\nexport const clickableStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    border-radius: 6px;\n    cursor: pointer;\n    &:hover:not(:focus) {\n      outline: none;\n      box-shadow: inset ${hoverRing[Theme.Dark].gray};\n    }\n\n    &:focus,\n    &:focus-visible {\n      outline: none;\n      box-shadow: inset ${focusRing[Theme.Dark].input};\n    }\n  `,\n  [Theme.Light]: css`\n    border-radius: 6px;\n    cursor: pointer;\n    &:hover:not(:focus) {\n      outline: none;\n      box-shadow: inset ${hoverRing[Theme.Light].gray};\n    }\n\n    &:focus,\n    &:focus-visible {\n      outline: none;\n      box-shadow: inset ${focusRing[Theme.Light].input};\n    }\n  `,\n};\n\nexport const disabledStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    pointer-events: none;\n    background-color: ${palette.gray.dark2};\n    color: ${palette.gray.base};\n  `,\n  [Theme.Light]: css`\n    pointer-events: none;\n    background-color: ${palette.gray.light2};\n    color: ${palette.gray.base};\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { transitionDuration } from '@leafygreen-ui/tokens';\n\nexport const baseStyles = css`\n  padding: 0;\n  overflow: hidden;\n  transition: ${transitionDuration.default}ms ease;\n`;\n\nexport const expandedContentStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.dark4};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.gray.light3};\n  `,\n};\n","import React, { MouseEventHandler } from 'react';\n\nimport Icon from '@leafygreen-ui/icon';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nimport { SortState } from '../HeaderCell.types';\n\nimport { SortIconProps } from './SortIcon.types';\n\nconst glyphs: Record<SortState, string> = {\n  [SortState.Asc]: 'SortAscending',\n  [SortState.Desc]: 'SortDescending',\n  [SortState.Off]: 'Unsorted',\n  [SortState.None]: '',\n};\n\nconst themeGlyphColors: Record<\n  Theme,\n  Record<Exclude<SortState, 'none'>, string>\n> = {\n  [Theme.Dark]: {\n    [SortState.Asc]: palette.blue.base,\n    [SortState.Desc]: palette.blue.base,\n    [SortState.Off]: palette.gray.light1,\n  },\n  [Theme.Light]: {\n    [SortState.Asc]: palette.blue.base,\n    [SortState.Desc]: palette.blue.base,\n    [SortState.Off]: palette.gray.dark1,\n  },\n};\n\nconst SortIcon = ({ sortState, onSortIconClick, ...rest }: SortIconProps) => {\n  const { theme } = useDarkMode();\n\n  const handleClick: MouseEventHandler = e => {\n    onSortIconClick?.(e);\n  };\n\n  if (sortState === SortState.None) {\n    return <></>;\n  } else {\n    return (\n      <IconButton onClick={handleClick} {...rest}>\n        <Icon\n          glyph={glyphs[sortState]}\n          fill={themeGlyphColors[theme][sortState]}\n        />\n      </IconButton>\n    );\n  }\n};\n\nexport default SortIcon;\n","import React, { PropsWithChildren } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\n\nimport { useTableContext } from '../../TableContext';\nimport { LGRowData } from '../../useLeafyGreenTable';\nimport {\n  alignmentStyles,\n  baseCellStyles,\n  cellTransitionContainerStyles,\n  getCellPadding,\n} from '../Cell.styles';\n\nimport SortIcon from './SortIcon/SortIcon';\nimport {\n  getHeaderCellWidthStyles,\n  headerCellContentStyles,\n} from './HeaderCell.styles';\nimport { HeaderCellProps, SortState, SortStates } from './HeaderCell.types';\n\nconst HeaderSortState: SortStates = {\n  false: SortState.Off,\n  asc: SortState.Asc,\n  desc: SortState.Desc,\n};\n\n/**\n * Component to wrap `<th>` elements for use inside `<thead>` elements.\n */\nconst HeaderCell = <T extends LGRowData>({\n  children,\n  className,\n  cellIndex,\n  header,\n  ...rest\n}: PropsWithChildren<HeaderCellProps<T>>) => {\n  const { table } = useTableContext();\n\n  const isFirstCell = cellIndex === 0;\n  const isSelectable = !!table && !!table.hasSelectableRows;\n\n  let columnName, sortState, onSortIconClick;\n\n  if (header && header.column.getCanSort()) {\n    columnName = header.column.columnDef.header as string;\n    const headerSortDirection = header.column.getIsSorted().toString();\n    sortState = HeaderSortState[headerSortDirection];\n    onSortIconClick = header.column.getToggleSortingHandler();\n  }\n\n  return (\n    <th\n      className={cx(\n        baseCellStyles,\n        {\n          [getCellPadding({ depth: 0, isExpandable: false, isSelectable })]:\n            isFirstCell,\n          [getHeaderCellWidthStyles(header?.getSize() ?? 0)]:\n            !!header?.getSize(),\n        },\n        className,\n      )}\n      scope=\"col\"\n      {...rest}\n    >\n      <div\n        className={cx(\n          cellTransitionContainerStyles,\n          headerCellContentStyles,\n          // TS error is ignored (and not expected) as it doesn't show up locally but interrupts build\n          // @ts-ignore Header types need to be extended or declared in the react-table namespace\n          alignmentStyles(header?.column.columnDef?.align),\n        )}\n      >\n        {children}\n        {sortState && onSortIconClick && (\n          <SortIcon\n            sortState={sortState}\n            onSortIconClick={onSortIconClick}\n            aria-label={`Sort by ${columnName}`}\n            data-testid=\"lg-table-sort-icon-button\"\n          />\n        )}\n      </div>\n    </th>\n  );\n};\n\nexport default HeaderCell;\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\n\ntype RowContextProps = PropsWithChildren<{\n  disabled?: boolean;\n}>;\n\nconst RowContext = createContext<RowContextProps>({});\n\nexport const useRowContext = () => useContext(RowContext);\n\nexport const RowContextProvider = ({ children, disabled }: RowContextProps) => {\n  return (\n    <RowContext.Provider\n      value={{\n        disabled,\n      }}\n    >\n      {children}\n    </RowContext.Provider>\n  );\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { clickableStyles, disabledStyles } from './Row.styles';\nimport { InternalRowBaseProps } from './Row.types';\nimport { useRowContext } from './RowContext';\n\n/**\n * The base Row component, extended by `InternalRow(With/Without)RT`\n */\nconst InternalRowBase = ({\n  className,\n  onClick,\n  ...rest\n}: InternalRowBaseProps) => {\n  const { theme } = useDarkMode();\n  const { disabled } = useRowContext();\n  return (\n    <tr\n      onClick={onClick}\n      aria-disabled={disabled}\n      tabIndex={onClick ? 0 : undefined}\n      className={cx(\n        {\n          [disabledStyles[theme]]: disabled,\n          [clickableStyles[theme]]: !!onClick,\n        },\n        className,\n      )}\n      {...rest}\n    />\n  );\n};\n\nexport default InternalRowBase;\n","import { type TableContextValues } from '../TableContext';\nimport { LGRowData } from '../useLeafyGreenTable';\n\n/**\n * Returns whether a given row has _all_ ancestor rows expanded\n */\nexport function getAreAncestorsExpanded<T extends LGRowData>(\n  /** The starting id */\n  startId: string,\n  /** The parent getter function */\n  getParentRow: TableContextValues<T>['getParentRow'],\n) {\n  if (!getParentRow) return false;\n\n  let id = startId;\n  let parent = getParentRow(id);\n  let isExpanded;\n\n  while (parent) {\n    isExpanded = (isExpanded ?? true) && parent?.getIsExpanded();\n    id = parent.id;\n    parent = getParentRow(id);\n  }\n\n  return isExpanded;\n}\n","import React, { useMemo, useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport { RowData } from '@tanstack/react-table';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport {\n  cellContentTransitionStateStyles,\n  cellTransitionContainerStyles,\n  disableAnimationStyles,\n} from '../Cell/Cell.styles';\nimport InternalRowBase from '../Row/InternalRowBase';\nimport { useTableContext } from '../TableContext';\nimport { getAreAncestorsExpanded } from '../utils/areAncestorsExpanded';\n\nimport { baseStyles, expandedContentStyles } from './ExpandedContent.styles';\nimport { ExpandedContentProps } from './ExpandedContent.types';\n\nconst ExpandedContent = <T extends RowData>({\n  row,\n  ...rest\n}: ExpandedContentProps<T>) => {\n  const { disableAnimations, getParentRow } = useTableContext();\n  const contentRef = useRef<HTMLDivElement>(null);\n  const transitionRef = useRef<HTMLElement | null>(null);\n  const areAncestorsExpanded = getAreAncestorsExpanded(row.id, getParentRow);\n  const isNestedRow = !!getParentRow?.(row.id);\n  const isExpanded =\n    row.getIsExpanded() && (!isNestedRow || areAncestorsExpanded);\n  const content =\n    row.original.renderExpandedContent &&\n    row.original.renderExpandedContent(row);\n\n  const { theme } = useDarkMode();\n\n  const contentHeight = useMemo(\n    () => (contentRef.current ? contentRef.current.clientHeight : 0),\n    // Lint flags `content` as an unnecessary dependency, but we want to update `contentHeight` when the value of `content` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [content],\n  );\n\n  return (\n    <InternalRowBase {...rest}>\n      <td colSpan={row.getVisibleCells().length} className={cx(baseStyles)}>\n        <Transition in={isExpanded} timeout={0} nodeRef={transitionRef}>\n          {state => (\n            <div\n              data-state={state}\n              className={cx(\n                cellTransitionContainerStyles,\n                { [disableAnimationStyles]: disableAnimations },\n                expandedContentStyles[theme],\n                cellContentTransitionStateStyles(contentHeight)[state],\n              )}\n            >\n              <div ref={contentRef}>{content}</div>\n            </div>\n          )}\n        </Transition>\n      </td>\n    </InternalRowBase>\n  );\n};\n\nExpandedContent.displayName = 'ExpandedContent';\n\nexport default ExpandedContent;\n","import React, { PropsWithChildren, ReactElement, ReactNode } from 'react';\n\nimport { HeaderCell } from '../../Cell';\n\nimport { HeaderRowProps } from './HeaderRow.types';\n\nconst HeaderRow = ({\n  children,\n  ...rest\n}: PropsWithChildren<HeaderRowProps>) => {\n  return (\n    <tr {...rest}>\n      {React.Children.map(children, (child: ReactNode, index: number) => {\n        return (\n          <HeaderCell {...(child as ReactElement).props} cellIndex={index} />\n        );\n      })}\n    </tr>\n  );\n};\n\nHeaderRow.displayName = 'HeaderRow';\n\nexport default HeaderRow;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { consoleOnce, isComponentType } from '@leafygreen-ui/lib';\n\nimport { useTableContext } from '../TableContext';\n\nimport InternalRowBase from './InternalRowBase';\nimport { zebraStyles } from './Row.styles';\nimport { InternalRowBaseProps } from './Row.types';\n\n/**\n * Renders basic array row data\n */\nconst InternalRowWithoutRT = ({\n  children,\n  className,\n  ...rest\n}: InternalRowBaseProps) => {\n  const { shouldAlternateRowColor } = useTableContext();\n  const { theme } = useDarkMode();\n\n  React.Children.forEach(children, child => {\n    if (!isComponentType(child, 'Cell'))\n      consoleOnce.warn(\n        'LG Row is rendering a custom cell element. Utilize the `Cell` component for standardized styles, correct HTML properties and additional functionalities when using `useLeafyGreenTable`.',\n      );\n  });\n\n  return (\n    <InternalRowBase\n      className={cx(\n        {\n          [zebraStyles[theme]]: shouldAlternateRowColor,\n        },\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </InternalRowBase>\n  );\n};\n\nexport default InternalRowWithoutRT;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { transitionDuration } from '@leafygreen-ui/tokens';\n\nexport const iconButtonTransitionStyles = css`\n  transition: transform ${transitionDuration.default}ms ease-in-out;\n`;\n\nexport const iconFills = (theme: Theme, disabled: boolean) => {\n  const fills = {\n    [Theme.Dark]: disabled ? palette.gray.dark1 : palette.gray.light2,\n    [Theme.Light]: disabled ? palette.gray.light1 : palette.gray.dark1,\n  };\n\n  return fills[theme];\n};\n\nexport const rotatedStyles = css`\n  transform: rotate(90deg);\n`;\n","import { HTMLElementProps } from '@leafygreen-ui/lib';\n\nexport type Align = Extract<\n  HTMLElementProps<'td'>['align'],\n  'left' | 'right' | 'center'\n>;\n\nexport const CellOverflowBehavior = {\n  Default: 'default',\n  Truncate: 'truncate',\n  // TODO: `Expand`: The cell will expand to the height of its content\n  // Expand: 'expand',\n} as const;\nexport type CellOverflowBehavior =\n  (typeof CellOverflowBehavior)[keyof typeof CellOverflowBehavior];\n\ninterface BaseCellProps extends HTMLElementProps<'td'> {\n  /**\n   * Alignment of the cell's contents\n   *\n   * Overrides `<td>`'s deprecated `align` prop\n   */\n  align?: Align;\n\n  /** A `className` applied to the inner `div` of the Cell  */\n  contentClassName?: string;\n\n  /**\n   * Defines how a cell should behave when its content is larger than the standard cell height.\n   *\n   * `Default`: The cell height will be fixed to the standard cell height (40px by default).\n   * Any overflowing content will be clipped.\n   *\n   * `Truncate`: The cell height will be fixed to the standard cell height (40px by default),\n   * and include an ellipsis before the content is clipped.\n   *\n   * Note: It's recommended to provide the same value for all cells in a given row.\n   *\n   * @default CellOverflowBehavior.Default\n   */\n  overflow?: CellOverflowBehavior;\n}\n\nexport type CellProps = BaseCellProps;\n\nexport interface InternalCellProps extends BaseCellProps {\n  /**\n   * Index of the cell in its parent row.\n   */\n  cellIndex: number;\n\n  /**\n   * Depth of nesting its parent row has.\n   */\n  depth: number;\n\n  /**\n   * Defines whether the cell's row is visible (i.e. expanded)\n   *\n   * @default true\n   */\n  isVisible?: boolean;\n\n  /**\n   * Defines whether the cell's row is expandable\n   *\n   * @default false\n   */\n  isExpandable?: boolean;\n}\n","import React, { useMemo, useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\n\nimport { useTableContext } from '../TableContext';\n\nimport {\n  alignmentStyles,\n  baseCellStyles,\n  cellContentTransitionStateStyles,\n  cellTransitionContainerStyles,\n  disableAnimationStyles,\n  getCellPadding,\n  standardCellHeight,\n  truncatedContentStyles,\n} from './Cell.styles';\nimport { CellOverflowBehavior, InternalCellProps } from './Cell.types';\n\nconst InternalCell = ({\n  children,\n  className,\n  contentClassName,\n  cellIndex,\n  depth,\n  isVisible = true,\n  isExpandable = false,\n  overflow,\n  align,\n  ...rest\n}: InternalCellProps) => {\n  const isFirstCell = cellIndex === 0;\n  const { table, disableAnimations } = useTableContext();\n  const isSelectable = !!table && !!table.hasSelectableRows;\n  const transitionRef = useRef<HTMLElement | null>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const contentHeight = standardCellHeight;\n  const scrollHeight = contentRef.current\n    ? contentRef.current?.scrollHeight\n    : 0;\n  const shouldTruncate = useMemo(() => {\n    return (\n      overflow === CellOverflowBehavior.Truncate && scrollHeight > contentHeight\n    );\n  }, [contentHeight, overflow, scrollHeight]);\n  return (\n    <td\n      className={cx(\n        baseCellStyles,\n        {\n          [getCellPadding({ depth, isExpandable, isSelectable })]: isFirstCell,\n        },\n        className,\n      )}\n      {...rest}\n    >\n      <Transition in={isVisible} timeout={0} nodeRef={transitionRef}>\n        {state => (\n          <div\n            data-state={state}\n            ref={contentRef}\n            className={cx(\n              cellTransitionContainerStyles,\n              cellContentTransitionStateStyles(contentHeight)[state],\n              alignmentStyles(align),\n              {\n                [disableAnimationStyles]: disableAnimations,\n                [truncatedContentStyles]: shouldTruncate,\n              },\n              contentClassName,\n            )}\n          >\n            {children}\n          </div>\n        )}\n      </Transition>\n    </td>\n  );\n};\n\nInternalCell.displayName = 'Cell';\nInternalCell.propTypes = {\n  cellIndex: PropTypes.number,\n  depth: PropTypes.number,\n  isVisible: PropTypes.bool,\n  isExpandable: PropTypes.bool,\n};\n\nexport default InternalCell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport Icon from '@leafygreen-ui/icon';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { useTableContext } from '../TableContext';\n\nimport {\n  iconButtonTransitionStyles,\n  iconFills,\n  rotatedStyles,\n} from './ToggleExpandedIcon.styles';\nimport { type ToggleExpandedIconProps } from './ToggleExpandedIcon.types';\n\n/**\n * @internal\n */\nconst ToggleExpandedIcon = ({\n  isExpanded,\n  toggleExpanded,\n  disabled,\n  ...rest\n}: ToggleExpandedIconProps) => {\n  const { theme } = useDarkMode();\n  const { disableAnimations } = useTableContext();\n\n  return (\n    <IconButton\n      aria-label={`${isExpanded ? 'Collapse' : 'Expand'} row`}\n      disabled={disabled}\n      onClick={toggleExpanded}\n      className={cx({\n        [rotatedStyles]: isExpanded,\n        [iconButtonTransitionStyles]: !disableAnimations,\n      })}\n      {...rest}\n    >\n      <Icon\n        glyph=\"ChevronRight\"\n        role=\"presentation\"\n        fill={iconFills(theme, !!disabled)}\n      />\n    </IconButton>\n  );\n};\n\nToggleExpandedIcon.propTypes = {\n  disabled: PropTypes.bool,\n  toggleExpanded: PropTypes.func.isRequired,\n  isExpanded: PropTypes.bool.isRequired,\n};\n\nexport default ToggleExpandedIcon;\n","import React, { ReactElement, ReactNode } from 'react';\n\nimport InternalCell from '../Cell/InternalCell';\nimport { useTableContext } from '../TableContext';\nimport ToggleExpandedIcon from '../ToggleExpandedIcon';\nimport { LGRowData } from '../useLeafyGreenTable';\nimport { getAreAncestorsExpanded } from '../utils/areAncestorsExpanded';\n\nimport { useRowContext } from './RowContext';\nimport { RowProps } from '.';\n\ntype RowCellChildrenProps<T extends LGRowData> = Required<\n  Pick<RowProps<T>, 'row'>\n> &\n  Pick<RowProps<T>, 'disabled' | 'children'>;\n\n/**\n * Renders row cells provided by `useReactTable`\n */\nconst RowCellChildren = <T extends LGRowData>({\n  row,\n  children: CellChildren,\n}: RowCellChildrenProps<T>) => {\n  const { getParentRow } = useTableContext();\n  const { disabled } = useRowContext();\n  const parentRow = getParentRow?.(row.id);\n  const isNested = !!parentRow;\n  const isParentExpanded = !!parentRow && parentRow.getIsExpanded();\n  const areAncestorsExpanded = getAreAncestorsExpanded(row.id, getParentRow);\n  const isRowVisible = (areAncestorsExpanded && isParentExpanded) || !isNested;\n\n  const isExpandable = row.getCanExpand();\n  const isExpanded = row.getIsExpanded();\n\n  const toggleExpanded = () => row.toggleExpanded();\n\n  return (\n    <>\n      {React.Children.map(\n        CellChildren,\n        (child: ReactNode, colIndex: number) => {\n          // FIXME:\n          // eslint-disable-next-line no-unsafe-optional-chaining\n          const { children, ...props } = (child as ReactElement)?.props;\n          const isFirstCell = colIndex === 0;\n          const cell = row.getVisibleCells()[colIndex];\n          return (\n            <InternalCell\n              {...props}\n              cellIndex={colIndex}\n              isVisible={isRowVisible}\n              isExpandable={isExpandable}\n              disabled={disabled}\n              depth={row.depth}\n              // @ts-expect-error Cell is not deeply extended\n              align={cell.column.columnDef.align}\n            >\n              {isFirstCell && isExpandable && (\n                <ToggleExpandedIcon\n                  isExpanded={isExpanded}\n                  toggleExpanded={toggleExpanded}\n                  aria-hidden={!isRowVisible}\n                  disabled={disabled}\n                  tabIndex={isRowVisible ? 0 : -1}\n                />\n              )}\n              {children}\n            </InternalCell>\n          );\n        },\n      )}\n    </>\n  );\n};\n\nexport default RowCellChildren;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const baseStyles = css`\n  border-spacing: 0;\n  border-collapse: collapse;\n  width: 100%;\n`;\n\nexport const themeStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n  [Theme.Light]: css`\n    color: ${palette.gray.dark3};\n  `,\n};\n\nexport const tableContainerStyles = css`\n  overflow: auto;\n  width: 100%;\n  position: relative;\n`;\n","import React, { Fragment, useMemo } from 'react';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { VirtualItem } from 'react-virtual';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { HTMLElementProps, isComponentType } from '@leafygreen-ui/lib';\nimport { Polymorph } from '@leafygreen-ui/polymorphic';\n\nimport { useTableContext } from '../TableContext';\nimport { LGRowData } from '../useLeafyGreenTable';\n\nimport InternalRowBase from './InternalRowBase';\nimport {\n  expandedContentParentStyles,\n  grayZebraRowStyles,\n  selectedRowStyles,\n  zebraStyles,\n} from './Row.styles';\nimport { InternalRowWithRTProps } from './Row.types';\nimport RowCellChildren from './RowCellChildren';\nimport { useRowContext } from './RowContext';\n\n/**\n * Renders row data provided by `useReactTable`\n */\nconst InternalRowWithRT = <T extends LGRowData>({\n  children,\n  className,\n  row,\n  virtualRow,\n  ...rest\n}: InternalRowWithRTProps<T>) => {\n  const { theme } = useDarkMode();\n  const { disabled } = useRowContext();\n  const { table, getParentRow, shouldAlternateRowColor } = useTableContext();\n  const parentRow = getParentRow?.(row.id);\n  const rowRef = virtualRow?.measureRef;\n\n  const isTableExpandable = table?.getCanSomeRowsExpand();\n  const isNested = !!parentRow;\n  const isParentExpanded = !!parentRow && parentRow.getIsExpanded();\n  const isRowVisible = isParentExpanded || !isNested;\n  const isOddVSRow = !!virtualRow && virtualRow.index % 2 !== 0;\n\n  const isExpanded = row.getIsExpanded();\n  const isSelected = row.getIsSelected();\n\n  const flattenedChildren = flattenChildren(children);\n\n  const CellChildren = flattenedChildren.filter(child =>\n    isComponentType(child, 'Cell'),\n  );\n\n  /**\n   * OtherChildren is looking for nested Row components or ExpandedContent components.\n   * This filter does not look explicitly for those two components since we may want to allow developers to use their own `td` elements.\n   */\n  const OtherChildren = flattenedChildren.filter(\n    child => !isComponentType(child, 'Cell'),\n  );\n\n  /**\n   * Render the row within a `tbody` if\n   * the table itself has any row that is expandable\n   * but not if this row is nested\n   */\n  const shouldRenderAsTBody = isTableExpandable && !isNested;\n  const containerAs = useMemo(\n    () => (shouldRenderAsTBody ? 'tbody' : Fragment),\n    [shouldRenderAsTBody],\n  );\n\n  const tBodyProps: HTMLElementProps<'tbody'> &\n    Pick<VirtualItem, 'measureRef'> = {\n    className: cx({\n      [expandedContentParentStyles[theme]]: isExpanded,\n    }),\n    'data-expanded': isExpanded,\n    // @ts-expect-error - VirtualItem.measureRef is not typed as a ref\n    ref: rowRef,\n  };\n\n  return (\n    <Polymorph as={containerAs} {...(shouldRenderAsTBody && tBodyProps)}>\n      <InternalRowBase\n        className={cx(\n          {\n            [grayZebraRowStyles[theme]]:\n              isOddVSRow && shouldAlternateRowColor && !isSelected,\n            [zebraStyles[theme]]:\n              !virtualRow && shouldAlternateRowColor && !isSelected,\n            [selectedRowStyles[theme]]: isSelected && !disabled,\n          },\n          className,\n        )}\n        data-selected={isSelected}\n        aria-hidden={!isRowVisible}\n        id={`lg-table-row-${row.id}`}\n        {...rest}\n      >\n        <RowCellChildren row={row}>{CellChildren}</RowCellChildren>\n      </InternalRowBase>\n      {OtherChildren}\n    </Polymorph>\n  );\n};\n\nexport default InternalRowWithRT;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LGRowData } from '../useLeafyGreenTable';\n\nimport InternalRowWithoutRT from './InternalRowWithoutRT';\nimport InternalRowWithRT from './InternalRowWithRT';\nimport { RowProps } from './Row.types';\nimport { RowContextProvider } from './RowContext';\n\n/**\n * Renders the provided cells\n */\nconst Row = <T extends LGRowData>({\n  row,\n  virtualRow,\n  disabled,\n  ...rest\n}: RowProps<T>) => {\n  return (\n    <RowContextProvider disabled={disabled}>\n      {row ? (\n        <InternalRowWithRT row={row} virtualRow={virtualRow} {...rest} />\n      ) : (\n        <InternalRowWithoutRT {...rest} />\n      )}\n    </RowContextProvider>\n  );\n};\n\nRow.propTypes = {\n  virtualRow: PropTypes.any,\n  row: PropTypes.any,\n  disabled: PropTypes.bool,\n};\n\nRow.displayName = 'Row';\n\nexport default Row;\n","import React, { ForwardedRef, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport {\n  bodyTypeScaleStyles,\n  useUpdatedBaseFontSize,\n} from '@leafygreen-ui/typography';\n\nimport { TableContextProvider } from '../TableContext';\nimport { LGRowData } from '../useLeafyGreenTable';\n\nimport { baseStyles, tableContainerStyles, themeStyles } from './Table.styles';\nimport { TableProps } from './Table.types';\n\n// Inferred generic type from component gets used in place of `any`\nconst Table = forwardRef<HTMLDivElement, TableProps<any>>(\n  <T extends LGRowData>(\n    {\n      children,\n      className,\n      shouldAlternateRowColor = false,\n      baseFontSize: baseFontSizeProp,\n      darkMode: darkModeProp,\n      table,\n      disableAnimations = false,\n      ...rest\n    }: TableProps<T>,\n    containerRef: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const baseFontSize: BaseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n    const { theme, darkMode } = useDarkMode(darkModeProp);\n\n    return (\n      <div\n        ref={containerRef}\n        className={cx(tableContainerStyles, className)}\n        // allow select by keyboard to allow scroll by keyboard\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n        tabIndex={0}\n      >\n        <TableContextProvider\n          shouldAlternateRowColor={shouldAlternateRowColor}\n          darkMode={darkMode}\n          table={table}\n          disableAnimations={disableAnimations}\n        >\n          <table\n            className={cx(\n              baseStyles,\n              themeStyles[theme],\n              bodyTypeScaleStyles[baseFontSize],\n            )}\n            {...rest}\n          >\n            {children}\n          </table>\n        </TableContextProvider>\n      </div>\n    );\n  },\n);\n\nTable.propTypes = {\n  darkMode: PropTypes.bool,\n  baseFontSize: PropTypes.oneOf(Object.values(BaseFontSize)),\n  shouldAlternateRowColor: PropTypes.bool,\n};\n\nTable.displayName = 'Table';\n\nexport default Table;\n","import React, { Fragment, useMemo } from 'react';\n\nimport { Polymorph } from '@leafygreen-ui/polymorphic';\n\nimport { useTableContext } from '../TableContext';\n\nimport { TableBodyProps } from './TableBody.types';\n\nconst TableBody = ({ children, ...rest }: TableBodyProps) => {\n  let paddingTop = 0;\n  let paddingBottom = 0;\n\n  const { table } = useTableContext();\n  const areSomeRowsExpandable = table?.getCanSomeRowsExpand();\n\n  const bodyAs = useMemo(\n    () => (areSomeRowsExpandable ? Fragment : 'tbody'),\n    [areSomeRowsExpandable],\n  );\n\n  if (table && table.virtualRows) {\n    const { virtualRows, totalSize } = table;\n    paddingTop = virtualRows.length > 0 ? virtualRows?.[0]?.start || 0 : 0;\n    paddingBottom =\n      virtualRows.length > 0\n        ? totalSize - (virtualRows?.[virtualRows.length - 1]?.end || 0)\n        : 0;\n  }\n\n  return (\n    <Polymorph as={bodyAs} {...rest}>\n      {/* As the user scrolls down, the paddingTop grows bigger, creating the effect of virtual scrolling */}\n      {paddingTop > 0 && (\n        <tr aria-hidden>\n          <td style={{ height: `${paddingTop}px` }} />\n        </tr>\n      )}\n      {children}\n      {/* As the user scrolls down, the paddingBottom gets smaller, creating the effect of virtual scrolling */}\n      {paddingBottom > 0 && (\n        <tr aria-hidden>\n          <td style={{ height: `${paddingBottom}px` }} />\n        </tr>\n      )}\n    </Polymorph>\n  );\n};\n\nTableBody.displayName = 'TableBody';\n\nexport default TableBody;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const stickyStyles = css`\n  position: sticky;\n  z-index: 1;\n  top: 0;\n`;\nexport const themeStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.black};\n    box-shadow: 0 4px ${palette.gray.dark2};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.white};\n    box-shadow: 0 4px ${palette.gray.light2};\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { bodyTypeScaleStyles } from '@leafygreen-ui/typography';\n\nconst sharedStyles = css`\n  --lg-cell-padding-block: 10px;\n  min-width: 40px;\n  padding: var(--lg-cell-padding-block) 8px;\n  box-sizing: border-box;\n  vertical-align: baseline;\n  text-align: left; // Justification is updated in \\`Row.tsx\\` for number cells\n`;\n\nexport const getCommonCellStyles = (baseFontSize: 13 | 16): string => {\n  return css`\n    ${sharedStyles}\n    ${bodyTypeScaleStyles[baseFontSize]}\n  `;\n};\n","import React, { PropsWithChildren } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { stickyStyles, themeStyles } from './TableHead.styles';\nimport { TableHeadProps } from './TableHead.types';\n\nconst TableHead = ({\n  children,\n  isSticky,\n  className,\n  ...rest\n}: PropsWithChildren<TableHeadProps>) => {\n  const { theme } = useDarkMode();\n  return (\n    <thead\n      className={cx(\n        {\n          [stickyStyles]: isSticky,\n        },\n        themeStyles[theme],\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </thead>\n  );\n};\n\nTableHead.displayName = 'TableHead';\n\nexport default TableHead;\n","import React, { forwardRef } from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { createUniqueClassName, HTMLElementProps } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport { getCommonCellStyles } from './styles';\n\nexport const tdInnerDivClassName = createUniqueClassName('td-inner-div');\n\n/**\n * @deprecated\n */\ninterface HeaderCellProps\n  extends HTMLElementProps<'th', HTMLTableHeaderCellElement> {\n  /**\n   * Renders the cell as a th element\n   */\n  isHeader: true;\n\n  /**\n   * Determines whether the cell renders as disabled\n   */\n  isDisabled?: boolean;\n}\n\n/**\n * @deprecated\n */\ninterface TableCellProps extends HTMLElementProps<'td', HTMLTableCellElement> {\n  /**\n   * Determines whether the cell renders as disabled\n   */\n  isDisabled?: boolean;\n  /**\n   * Renders the cell as a th element\n   */\n  isHeader?: false;\n}\n\n/**\n * @deprecated\n */\ntype CellProps = HeaderCellProps | TableCellProps;\n\nconst baseStyles = css`\n  position: relative;\n`;\n\nconst thStyles = css`\n  font-weight: 600;\n`;\n\nconst lightModeThStyles = css`\n  border-right: 3px solid ${palette.gray.light2};\n  background-color: ${palette.gray.light3};\n`;\n\nconst darkModeThStyles = css`\n  border-right: 3px solid ${palette.gray.dark2};\n  background-color: ${palette.gray.dark4};\n`;\n\nconst innerDivStyles = css`\n  display: flex;\n  align-items: center;\n`;\n\nconst lightModeDisabledHeaderStyles = css`\n  border-top: 1px solid ${palette.gray.light3};\n  border-bottom: 1px solid ${palette.gray.light3};\n  color: ${palette.black};\n  cursor: auto;\n`;\n\nconst darkModeDisabledHeaderStyles = css`\n  color: ${palette.white};\n  cursor: auto;\n`;\n\n/**\n * @deprecated\n */\nexport type CellElement = React.ReactComponentElement<typeof Cell>;\n\n/**\n * @deprecated\n */\nconst Cell = forwardRef(\n  (\n    { children, className, isHeader = false, isDisabled, ...rest }: CellProps,\n    ref: React.Ref<HTMLTableHeaderCellElement | HTMLTableCellElement>,\n  ) => {\n    const Root = isHeader ? 'th' : 'td';\n\n    const baseFontSize = useUpdatedBaseFontSize();\n    const { darkMode } = useDarkMode();\n\n    const props: Partial<CellProps> = {\n      ref,\n      className: cx(\n        getCommonCellStyles(baseFontSize),\n        baseStyles,\n        {\n          [thStyles]: isHeader,\n          [lightModeThStyles]: isHeader && !darkMode,\n          [darkModeThStyles]: isHeader && darkMode,\n          [lightModeDisabledHeaderStyles]: isHeader && isDisabled && !darkMode,\n          [darkModeDisabledHeaderStyles]: isHeader && isDisabled && darkMode,\n        },\n        className,\n      ),\n    };\n\n    if (isHeader) {\n      props.scope = 'row';\n      props.role = 'rowheader';\n    }\n\n    return (\n      <Root {...props} {...rest}>\n        <div className={cx(tdInnerDivClassName, innerDivStyles)}>\n          <span\n            className={css`\n              display: flex;\n            `}\n          >\n            {children}\n          </span>\n        </div>\n      </Root>\n    );\n  },\n);\n\nCell.displayName = 'Cell';\n\nexport default Cell;\n","import React from 'react';\n\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\n\n/**\n * @deprecated\n */\nexport interface HeaderRowProps extends HTMLElementProps<'tr'> {}\n\n/**\n * @deprecated\n */\nexport type HeaderRowElement = React.ReactComponentElement<typeof HeaderRow>;\n\n/**\n * @deprecated\n */\nfunction HeaderRow({ children, className, ...rest }: HeaderRowProps) {\n  return (\n    <tr {...rest} className={className} data-testid=\"leafygreen-ui-header-row\">\n      {children}\n    </tr>\n  );\n}\n\nHeaderRow.displayName = 'HeaderRow';\n\nexport default HeaderRow;\n","import React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\n\nimport { tdInnerDivClassName } from './Cell';\nimport Row, { RowProps } from './Row';\n\nconst transitionTime = 200;\n\nconst nestedRowInitialStyle = css`\n  position: relative;\n  opacity: 0;\n  transform-origin: 50% 0%;\n  transition: ${transitionTime}ms ease-in-out;\n  transition-property: outline-color, opacity;\n\n  // This makes it so that any tall nested rows appear \"below\" the parents\n  // This may cause issues if there are multiple levels of nesting\n  // that all have more than one line of text. However this scenario is unlikely\n  z-index: 0;\n\n  & > :is(td, th) {\n    transition: ${transitionTime}ms ease-in-out;\n    transition-property: padding-block;\n\n    & > .${tdInnerDivClassName} {\n      transition: ${transitionTime}ms ease-in-out;\n      transition-property: min-height, max-height;\n    }\n  }\n`;\n\nconst hiddenRowStyles = css`\n  opacity: 0;\n  outline-color: transparent;\n\n  & > :is(td, th) {\n    padding-block: 0;\n\n    & > .${tdInnerDivClassName} {\n      min-height: 0px;\n      max-height: 0px;\n    }\n  }\n`;\n\nconst nestedRowTransitionStyles = (\n  state: TransitionStatus,\n  height?: number,\n): string => {\n  switch (state) {\n    case 'entered':\n      return css`\n        opacity: 1;\n        & > :is(td, th) {\n          & > .${tdInnerDivClassName} {\n            --lg-cell-max-height: max(var(--lg-cell-min-height), ${height}px);\n            min-height: var(--lg-cell-min-height);\n            max-height: var(--lg-cell-max-height);\n          }\n        }\n      `;\n    default:\n      return hiddenRowStyles;\n  }\n};\n\n/**\n * @deprecated\n */\ninterface NestedRowProps extends RowProps {\n  state: TransitionStatus;\n}\n\nconst NestedRow = ({ ref, className, state, ...rest }: NestedRowProps) => {\n  const [nestedRowHeight, setNestedRowHeight] = useState(0);\n  const nestedRowNodeRef = useRef<HTMLTableRowElement>(null);\n\n  const calculateRowContentHeight = () => {\n    if (nestedRowNodeRef && nestedRowNodeRef.current) {\n      const innerSpan: HTMLSpanElement | null =\n        nestedRowNodeRef.current.querySelector(\n          `.${tdInnerDivClassName} > span`,\n        );\n\n      if (innerSpan && innerSpan.offsetHeight) {\n        setNestedRowHeight(innerSpan.offsetHeight);\n      }\n    }\n  };\n\n  useEffect(() => {\n    calculateRowContentHeight();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [nestedRowNodeRef.current]);\n\n  return (\n    <Row\n      {...rest}\n      ref={nestedRowNodeRef}\n      className={cx(\n        nestedRowInitialStyle,\n        nestedRowTransitionStyles(state, nestedRowHeight),\n        className,\n      )}\n    />\n  );\n};\n\nexport default NestedRow;\n","import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from 'react';\n\nconst TableActionTypes = {\n  RegisterColumn: 'REGISTER_COLUMN_INFO',\n  SetHasNestedRows: 'SET_HAS_NESTED_ROWS',\n  SetHasRowSpan: 'SET_HAS_ROW_SPAN',\n  SetData: 'SET_DATA',\n} as const;\n\n/**\n * @deprecated\n */\ntype TableActionTypes =\n  (typeof TableActionTypes)[keyof typeof TableActionTypes];\n\nexport { TableActionTypes };\n\n/**\n * @deprecated\n */\ninterface ActionPayload {\n  [TableActionTypes.RegisterColumn]: {\n    dataType?: DataType;\n    index: number;\n  };\n  [TableActionTypes.SetData]: Array<any>;\n  [TableActionTypes.SetHasRowSpan]: boolean;\n  [TableActionTypes.SetHasNestedRows]: boolean;\n}\n\ntype ActionMap<A extends Record<string, any>> = {\n  [Key in keyof A]: A[Key] extends undefined\n    ? {\n        type: Key;\n      }\n    : {\n        type: Key;\n        payload: A[Key];\n      };\n};\n\ntype Action = ActionMap<ActionPayload>[keyof ActionMap<ActionPayload>];\n\ntype Dispatch = (action: Action) => void;\n\nconst DataType = {\n  Number: 'number',\n  Weight: 'weight',\n  ZipCode: 'zipCode',\n  String: 'string',\n  Date: 'date',\n} as const;\n\ntype DataType = (typeof DataType)[keyof typeof DataType];\n\nexport { DataType };\n\n/**\n * @deprecated\n */\nexport interface State {\n  data: Array<any>;\n  columnInfo?: Record<number, { dataType?: DataType }>;\n  hasNestedRows?: boolean;\n  hasRowSpan?: boolean;\n}\n\n/**\n * @deprecated\n */\ninterface TableProviderInterface {\n  children: React.ReactNode;\n  data: Array<any>;\n}\n\n/**\n * @deprecated\n */\ninterface ContextInterface {\n  state: State;\n  dispatch: Dispatch;\n}\n\n/**\n * @deprecated\n */\nconst TableContext = createContext<ContextInterface>({\n  state: {\n    data: [],\n  },\n  dispatch: () => {},\n});\n\n/**\n * @deprecated\n */\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case TableActionTypes.SetHasRowSpan:\n      return {\n        ...state,\n        hasRowSpan: action.payload,\n      };\n\n    case TableActionTypes.SetHasNestedRows:\n      return {\n        ...state,\n        hasNestedRows: action.payload,\n      };\n\n    case TableActionTypes.RegisterColumn:\n      return {\n        ...state,\n        columnInfo: {\n          ...state.columnInfo,\n          [action.payload.index]: {\n            dataType: action.payload.dataType,\n          },\n        },\n      };\n\n    case TableActionTypes.SetData:\n      return {\n        ...state,\n        data: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function TableProvider({ children, data }: TableProviderInterface) {\n  const initialState: State = {\n    data,\n    hasNestedRows: false,\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    dispatch({\n      type: TableActionTypes.SetData,\n      payload: data,\n    });\n  }, [data]);\n\n  const contextValue = useMemo(() => {\n    return { state, dispatch };\n  }, [state, dispatch]);\n\n  return (\n    <TableContext.Provider value={contextValue}>\n      {children}\n    </TableContext.Provider>\n  );\n}\n\nexport function useTableContext() {\n  return useContext(TableContext);\n}\n","/**\n * There is a security vulnerability related to https://github.com/alex-cory/use-ssr\n * The only location this package is used is within the Table component, in Row.tsx.\n *\n * TODO: In the long term, we should re-evaluate its usage and whether it's needed,\n * and if it is, maintain our own useSSR hook instead within the @leafygreen-ui/hooks package.\n */\n\ninterface UseSSRReturn {\n  isBrowser: boolean;\n  isServer: boolean;\n  isNative: boolean;\n  device: Device;\n  canUseWorkers: boolean;\n  canUseEventListeners: boolean;\n  canUseViewport: boolean;\n}\n\nexport enum Device {\n  Browser = 'browser',\n  Server = 'server',\n  Native = 'native',\n}\n\nconst { Browser, Server, Native } = Device;\n\nconst canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nconst canUseNative: boolean =\n  typeof navigator != 'undefined' && navigator.product == 'ReactNative';\n\nconst device = canUseNative ? Native : canUseDOM ? Browser : Server;\n\nconst SSRObject = {\n  isBrowser: device === Browser,\n  isServer: device === Server,\n  isNative: device === Native,\n  device,\n  canUseWorkers: typeof Worker !== 'undefined',\n  canUseEventListeners: device === Browser && !!window.addEventListener,\n  canUseViewport: device === Browser && !!window.screen,\n};\n\n// TODO: instead of this, do a polyfill for `Object.assign` https://www.npmjs.com/package/es6-object-assign\nconst assign = (...args: Array<any>) =>\n  args.reduce((acc, obj) => ({ ...acc, ...obj }), {});\nconst values = (obj: any) => Object.keys(obj).map(key => obj[key]);\nconst toArrayObject = (): UseSSRReturn =>\n  assign((values(SSRObject), SSRObject));\n\nlet useSSRObject = toArrayObject();\n\nexport const weAreServer = () => {\n  SSRObject.isServer = true;\n  useSSRObject = toArrayObject();\n};\n\nexport const useSSR = (): UseSSRReturn => useSSRObject;\nexport default useSSR;\n","import React, { forwardRef, useEffect, useMemo, useRef, useState } from 'react';\nimport { Transition } from 'react-transition-group';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport ChevronDownIcon from '@leafygreen-ui/icon/dist/ChevronDown';\nimport ChevronRightIcon from '@leafygreen-ui/icon/dist/ChevronRight';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { HTMLElementProps, isComponentType, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nimport { CellElement, tdInnerDivClassName } from './Cell';\nimport NestedRow from './NestedRow';\nimport { DataType, TableActionTypes, useTableContext } from './TableContext';\nimport useSSR from './useSSR';\n\n/**\n * Types & Constants\n */\n\nconst transitionTime = 200;\n\n/**\n * Styles\n */\nconst iconButtonMargin = css`\n  margin: -4px;\n  margin-right: 4px;\n`;\n\nconst iconButtonThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.base};\n  `,\n};\n\nexport const iconButtonThemeDisabledStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.light1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.dark1};\n  `,\n};\n\n/**\n * @deprecated\n */\ntype StyledElements = 'rowStyle' | 'altColor' | 'disabledStyle';\n\nconst themeStyles: Record<Theme, Record<StyledElements, string>> = {\n  [Theme.Light]: {\n    rowStyle: css`\n      background-color: ${palette.white};\n      color: ${palette.gray.dark3};\n    `,\n\n    altColor: css`\n      &:nth-of-type(even) {\n        background-color: ${palette.gray.light3};\n      }\n\n      &:nth-of-type(odd) > th {\n        background-color: ${palette.white};\n      }\n    `,\n\n    disabledStyle: css`\n      background-color: ${palette.gray.light2};\n      color: ${palette.gray.base};\n      border-top: 1px inset ${palette.gray.light1};\n      border-bottom: 1px inset ${palette.gray.light1};\n    `,\n  },\n\n  [Theme.Dark]: {\n    rowStyle: css`\n      background-color: ${palette.black};\n      color: ${palette.gray.light2};\n    `,\n\n    altColor: css`\n      &:nth-of-type(even) {\n        background-color: ${palette.gray.dark4};\n      }\n\n      &:nth-of-type(odd) > th {\n        background-color: ${palette.black};\n      }\n    `,\n\n    disabledStyle: css`\n      background-color: ${palette.gray.dark2};\n      color: ${palette.gray.base};\n    `,\n  },\n};\n\nconst rowStyle = css`\n  --lg-cell-min-height: 20px;\n  position: relative;\n  z-index: 1;\n\n  & > :is(td, th) > .${tdInnerDivClassName} {\n    min-height: var(--lg-cell-min-height);\n    max-height: unset;\n  }\n`;\n\nconst hideRow = css`\n  opacity: 0;\n`;\n\nfunction styleColumn(index: string, dataType?: DataType) {\n  let justify;\n\n  if (dataType === DataType.Number) {\n    justify = 'flex-end';\n  } else {\n    justify = 'flex-start';\n  }\n\n  return css`\n    & :is(td, th):nth-child(${index}) > div {\n      justify-content: ${justify};\n    }\n  `;\n}\n\nfunction getIndentLevelStyle(indentLevel: number) {\n  const indentLevelMultiplier = 36;\n  return css`\n    & > :is(td, th):nth-child(1) {\n      padding-left: ${8 + indentLevel * indentLevelMultiplier}px;\n    }\n  `;\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\nexport interface RowProps extends HTMLElementProps<'tr', HTMLTableRowElement> {\n  /**\n   * Determines whether or not the row is expanded on first render\n   */\n  expanded?: boolean;\n  /**\n   * Determines whether or not the row is disabled\n   */\n  disabled?: boolean;\n  /**\n   * @internal\n   */\n  indentLevel?: number;\n  /**\n   * @internal\n   */\n  isAnyAncestorCollapsed?: boolean;\n}\n\n/**\n * @deprecated\n */\ntype RowElement = React.ReactComponentElement<\n  typeof Row,\n  React.ComponentPropsWithRef<typeof Row>\n>;\n\n/**\n * @deprecated\n */\nconst Row = forwardRef(\n  (\n    {\n      expanded = false,\n      disabled = false,\n      indentLevel = 0,\n      isAnyAncestorCollapsed: isAnyAncestorCollapsedProp,\n      children,\n      className,\n      ...rest\n    }: RowProps,\n    ref: React.Ref<HTMLTableRowElement>,\n  ) => {\n    const { isBrowser } = useSSR();\n    const {\n      state: { data, columnInfo, hasNestedRows, hasRowSpan },\n      dispatch: tableDispatch,\n    } = useTableContext();\n    const { theme, darkMode } = useDarkMode();\n\n    const shouldAltRowColor =\n      data && data.length >= 10 && hasNestedRows != null && !hasNestedRows;\n\n    const indexRef = useRef(useIdAllocator({ prefix: 'row' }));\n    const [isExpanded, setIsExpanded] = useState(expanded);\n    const nestedRowParentRef = useRef<HTMLTableRowElement>(null);\n\n    useEffect(() => {\n      let shouldDispatchHasNestedRows = false;\n      let shouldDispatchHasRowSpan = false;\n\n      if (hasNestedRows && hasRowSpan) {\n        return;\n      }\n\n      React.Children.forEach(children, child => {\n        if (\n          isComponentType<RowElement>(child, 'Row') &&\n          !shouldDispatchHasNestedRows &&\n          !hasNestedRows\n        ) {\n          shouldDispatchHasNestedRows = true;\n        }\n\n        if (\n          isComponentType<CellElement>(child, 'Cell') &&\n          child.props.rowSpan &&\n          child.props.rowSpan > 1 &&\n          !hasRowSpan &&\n          !shouldDispatchHasRowSpan\n        ) {\n          shouldDispatchHasRowSpan = true;\n        }\n      });\n\n      if (\n        shouldDispatchHasNestedRows &&\n        hasNestedRows !== shouldDispatchHasNestedRows\n      ) {\n        tableDispatch({\n          type: TableActionTypes.SetHasNestedRows,\n          payload: true,\n        });\n      }\n\n      if (shouldDispatchHasRowSpan && hasRowSpan !== shouldDispatchHasRowSpan) {\n        tableDispatch({\n          type: TableActionTypes.SetHasRowSpan,\n          payload: true,\n        });\n      }\n    }, [children, hasNestedRows, hasRowSpan, tableDispatch, data]);\n\n    // Render any nested rows and their transition group\n    const { rowHasNestedRows, renderedNestedRowTransitionGroup } =\n      useMemo(() => {\n        const renderedNestedRows: Array<React.ReactElement> = [];\n        const rowHasNestedRows = React.Children.toArray(children).some(child =>\n          isComponentType<RowElement>(child, 'Row'),\n        );\n\n        const shouldTransitionGroupBeVisible =\n          isExpanded && !isAnyAncestorCollapsedProp;\n\n        // We don't need the transition group except on the client here, and rendering this bit on the server breaks rendering these rows.\n        const renderedNestedRowTransitionGroup = isBrowser ? (\n          <Transition\n            in={shouldTransitionGroupBeVisible}\n            timeout={{\n              enter: 0,\n              exit: transitionTime,\n            }}\n            nodeRef={nestedRowParentRef}\n          >\n            {state =>\n              React.Children.map(children, (child, index) => {\n                if (\n                  child != null &&\n                  isComponentType<RowElement>(child, 'Row')\n                ) {\n                  return (\n                    <NestedRow\n                      isAnyAncestorCollapsed={\n                        isAnyAncestorCollapsedProp || !isExpanded\n                      }\n                      indentLevel={indentLevel + 1}\n                      key={`${indexRef.current}-${indentLevel}-${index}`}\n                      state={state}\n                      {...child.props}\n                    />\n                  );\n                }\n              })\n            }\n          </Transition>\n        ) : (\n          renderedNestedRows\n        );\n\n        return {\n          rowHasNestedRows,\n          renderedNestedRows,\n          renderedNestedRowTransitionGroup,\n        };\n      }, [\n        children,\n        isExpanded,\n        isAnyAncestorCollapsedProp,\n        isBrowser,\n        indentLevel,\n      ]);\n\n    const renderedChildren = useMemo(() => {\n      const renderedChildren: Array<React.ReactElement> = [];\n\n      React.Children.forEach(children, (child, index) => {\n        if (isComponentType<CellElement>(child, 'Cell')) {\n          if (child.props.children == null) {\n            return null;\n          }\n\n          renderedChildren.push(\n            React.cloneElement(child, {\n              children: <span>{child.props.children}</span>,\n              key: `${indexRef.current}-${index}`,\n              isDisabled: disabled,\n              isHeader: child.props.isHeader,\n              ...child.props,\n            }),\n          );\n        }\n      });\n\n      if (rowHasNestedRows) {\n        const Icon = isExpanded ? ChevronDownIcon : ChevronRightIcon;\n\n        const chevronButton = (\n          <IconButton\n            onClick={() => setIsExpanded(curr => !curr)}\n            aria-label={isExpanded ? 'Collapse row' : 'Expand row'}\n            aria-expanded={isExpanded}\n            className={cx(iconButtonMargin, iconButtonThemeStyles[theme], {\n              [iconButtonThemeDisabledStyles[theme]]: disabled,\n            })}\n            darkMode={darkMode}\n          >\n            <Icon aria-hidden />\n          </IconButton>\n        );\n        const { children: firstChildChildren, ...firstChildProps } =\n          renderedChildren[0].props;\n        renderedChildren[0] = React.cloneElement(renderedChildren[0], {\n          children: (\n            <>\n              {chevronButton}\n              <span>{firstChildChildren}</span>\n            </>\n          ),\n          key: `${indexRef.current}-${renderedChildren[0].props.children}`,\n          ...firstChildProps,\n        });\n      }\n\n      return renderedChildren;\n    }, [children, rowHasNestedRows, disabled, isExpanded, theme, darkMode]);\n\n    const alignmentStyles = columnInfo\n      ? Object.entries(columnInfo).map(([key, { dataType }]) =>\n          styleColumn(key, dataType),\n        )\n      : [''];\n\n    const rowClassName = cx(\n      rowStyle,\n      themeStyles[theme].rowStyle,\n      getIndentLevelStyle(indentLevel),\n      [...alignmentStyles],\n      {\n        // Hide the row until we can apply correct alignment to cells.\n        [hideRow]: !columnInfo,\n        [themeStyles[theme].altColor]: shouldAltRowColor,\n        [themeStyles[theme].disabledStyle]: disabled,\n      },\n      className,\n    );\n\n    return (\n      <>\n        <tr\n          role=\"row\"\n          className={rowClassName}\n          aria-disabled={disabled}\n          ref={ref}\n          key={indexRef.current}\n          {...rest}\n        >\n          {renderedChildren}\n        </tr>\n\n        {renderedNestedRowTransitionGroup}\n      </>\n    );\n  },\n);\n\nRow.displayName = 'Row';\n\nexport default Row;\n","import React, { createContext, useContext, useMemo, useState } from 'react';\n\n/**\n * @deprecated\n */\nexport type SortDirection = 'asc' | 'desc';\n\n/**\n * @deprecated\n */\ninterface Sort {\n  columnId: number;\n  direction: SortDirection;\n  accessorValue?: (data: any) => string;\n  compareFn?: (a: any, b: any, direction: SortDirection) => number;\n  handleSort?: (direction: SortDirection) => void;\n}\n\n/**\n * @deprecated\n */\ninterface ContextInterface {\n  sort?: Sort;\n  setSort: React.Dispatch<React.SetStateAction<Sort | undefined>>;\n}\n\nconst SortContext = createContext<ContextInterface>({\n  sort: undefined,\n  setSort: () => {},\n});\n\nexport function SortProvider({ children }: { children: React.ReactNode }) {\n  const [sort, setSort] = useState<Sort | undefined>(undefined);\n\n  const contextValue = useMemo(() => {\n    return { sort, setSort };\n  }, [sort, setSort]);\n\n  return (\n    <SortContext.Provider value={contextValue}>{children}</SortContext.Provider>\n  );\n}\n\nexport function useSortContext() {\n  return useContext(SortContext);\n}\n\nconst alphanumericCollator = new Intl.Collator(undefined, {\n  numeric: true,\n  sensitivity: 'base',\n});\n\nexport const getDataComparisonFunction = <T extends {}>({\n  direction,\n  accessorValue,\n  compareFn,\n}: {\n  direction: SortDirection;\n  accessorValue?: (data: T) => string;\n  compareFn?: (a: T, b: T, dir: SortDirection) => number;\n}) => {\n  if (accessorValue) {\n    return (a: T, b: T) => {\n      const aVal = accessorValue(a);\n      const bVal = accessorValue(b);\n\n      if (direction !== 'desc') {\n        return alphanumericCollator.compare(aVal, bVal);\n      }\n\n      return alphanumericCollator.compare(bVal, aVal);\n    };\n  }\n\n  if (compareFn) {\n    return (a: T, b: T) => compareFn(a, b, direction);\n  }\n\n  console.error(\n    'Error getting Table data comparison function. Please supply either an `accessorValue` or `compareFn`',\n  );\n};\n","import React, { useCallback, useMemo } from 'react';\n\nimport { getDataComparisonFunction, useSortContext } from './SortContext';\nimport { TableProps, TableRowInterface } from './Table';\nimport { useTableContext } from './TableContext';\n\n/**\n * @deprecated\n */\ntype TableBodyProps<Shape> = Pick<TableProps<Shape>, 'children'>;\n\n/**\n * Hook that avoids re-rendering children when the data used to\n * render them hasn't changed, even if their ordering has changed.\n */\nfunction useRenderedChildren<Datum>(\n  data: Array<Datum>,\n  renderFunction: React.FunctionComponent<\n    React.PropsWithChildren<TableRowInterface<Datum>>\n  >,\n  compareFn?: (a: Datum, b: Datum) => number,\n): Array<React.ReactNode> {\n  const resultMap = useMemo(() => {\n    const resultMap = new Map<Datum, React.ReactNode>();\n    data.forEach((datum, index) =>\n      resultMap.set(\n        datum,\n        <React.Fragment key={index}>\n          {renderFunction({ datum, index })}\n        </React.Fragment>,\n      ),\n    );\n    return resultMap;\n  }, [data, renderFunction]);\n\n  return useMemo(() => {\n    if (!compareFn) {\n      return Array.from(resultMap.values());\n    }\n\n    return [...data].sort(compareFn).map(datum => resultMap.get(datum));\n  }, [data, resultMap, compareFn]);\n}\n\n/**\n * @deprecated\n */\nfunction TableBody<Shape>({ children }: TableBodyProps<Shape>) {\n  const {\n    state: { data },\n  } = useTableContext();\n\n  const { sort } = useSortContext();\n\n  const compareFn = useMemo(() => {\n    if (sort) {\n      const { direction, accessorValue, compareFn } = sort;\n\n      if (compareFn) {\n        return getDataComparisonFunction({ direction, compareFn });\n      }\n\n      if (accessorValue) {\n        return getDataComparisonFunction({ direction, accessorValue });\n      }\n    }\n  }, [sort]);\n\n  const renderFunction = useCallback(\n    ({ datum, index }: TableRowInterface<Shape>) => children({ datum, index }),\n    [children],\n  );\n\n  const rows = useRenderedChildren(data, renderFunction, compareFn);\n\n  return <tbody>{rows}</tbody>;\n}\n\nTableBody.displayName = 'TableBody';\n\nexport default TableBody;\n","import React from 'react';\n\nimport { isComponentType } from '@leafygreen-ui/lib';\n\nimport HeaderRow, { HeaderRowElement } from './HeaderRow';\nimport { TableProps } from './Table';\nimport { TableHeaderElement } from './TableHeader';\n\n/**\n * @deprecated\n */\ntype TableHeaderProps<Shape> = Pick<TableProps<Shape>, 'columns'>;\n\n/**\n * @deprecated\n */\nfunction TableHead<Shape>({ columns = [] }: TableHeaderProps<Shape>) {\n  const usingHeaderRow = React.useRef(false);\n\n  function createCols(array: Array<React.ReactNode>): React.ReactNode {\n    return array.map((child, index) => {\n      const tableHeaderCommonProps = {\n        key: index,\n        index,\n      };\n\n      if (isComponentType<HeaderRowElement>(child, 'HeaderRow')) {\n        usingHeaderRow.current = true;\n\n        // FIXME:\n        // eslint-disable-next-line no-unsafe-optional-chaining\n        const { children } = child?.props;\n\n        return React.cloneElement(child, {\n          children: createCols(React.Children.toArray(children)),\n        });\n      }\n\n      if (isComponentType<TableHeaderElement>(child, 'TableHeader')) {\n        return React.cloneElement(child, tableHeaderCommonProps);\n      }\n\n      return child;\n    });\n  }\n\n  const columnArray: Array<React.ReactElement> =\n    // @ts-expect-error Property 'type' does not exist on type '{}'.ts(2339)\n    columns.type === React.Fragment ||\n    isComponentType<HeaderRowElement>(columns, 'HeaderRow')\n      ? React.Children.toArray((columns as React.ReactElement).props.children)\n      : (columns as Array<any>);\n\n  const cols = createCols(columnArray);\n\n  if (usingHeaderRow.current) {\n    return <thead>{cols}</thead>;\n  }\n\n  return (\n    <thead>\n      <HeaderRow>{cols}</HeaderRow>\n    </thead>\n  );\n}\n\nexport default TableHead;\n","import React from 'react';\nimport debounce from 'lodash/debounce';\nimport { transparentize } from 'polished';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport {\n  useIsomorphicLayoutEffect,\n  useViewportSize,\n} from '@leafygreen-ui/hooks';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, transitionDuration } from '@leafygreen-ui/tokens';\n\nimport { HeaderRowProps } from './HeaderRow';\nimport { SortProvider } from './SortContext';\nimport TableBody from './TableBody';\nimport { TableProvider } from './TableContext';\nimport TableHead from './TableHead';\nimport { TableHeaderProps } from './TableHeader';\n\nconst lmShadowColor = transparentize(0.7, palette.black);\nconst dmShadowColor = transparentize(0.3, 'black');\n\nconst containerStyle = css`\n  position: relative;\n  max-width: 100%;\n`;\n\nconst tableStyles = css`\n  font-family: ${fontFamilies.default};\n  position: relative;\n  border-collapse: collapse;\n  box-sizing: border-box;\n  width: 100%;\n  z-index: 0;\n`;\n\nconst shadow = css`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 16px;\n  overflow: hidden;\n  pointer-events: none;\n\n  &:after {\n    opacity: 0;\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 16px;\n    border-radius: 100%;\n    transition: opacity ${transitionDuration.default}ms ease-in-out;\n  }\n`;\n\nconst leftShadow = (darkMode: boolean) => css`\n  left: 0;\n\n  &:after {\n    right: 100%;\n    box-shadow: ${darkMode\n      ? '4px 0 9px 5px ' + dmShadowColor\n      : '4px 0 4px ' +\n        lmShadowColor}; //TODO: Bug: currently the full height of the shadow is not showing unless the background color is removed from <tr>\n  }\n`;\n\nconst rightShadow = (darkMode: boolean) => css`\n  right: 0;\n\n  &:after {\n    left: 100%;\n    box-shadow: ${darkMode\n      ? '-4px 0 9px 5px ' + dmShadowColor\n      : '-4px 0 4px ' + lmShadowColor};\n  }\n`;\n\nconst showScroll = css`\n  &:after {\n    opacity: 1;\n  }\n`;\n\nconst ScrollState = {\n  None: 'none',\n  Left: 'left',\n  Right: 'right',\n  Both: 'both',\n} as const;\n\ntype ScrollState = (typeof ScrollState)[keyof typeof ScrollState];\n\n/**\n * @deprecated\n */\nexport interface TableRowInterface<Shape = {}> {\n  datum: Shape;\n  index: number;\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\nexport interface TableProps<Shape>\n  extends Omit<HTMLElementProps<'table'>, 'children' | 'columns'> {\n  /**\n   * The array of data displayed in rows. Each array element's type is determined by the `Shape` generic.\n   *\n   * @type Array of Objects\n   */\n  data: Array<Shape>;\n\n  /**\n   * React element to render the table's header row.\n   * @type Array of `<TableHeader />`\n   */\n  columns:\n    | React.ReactElement<HeaderRowProps | TableHeaderProps<Shape>>\n    | Array<React.ReactElement<HeaderRowProps | TableHeaderProps<Shape>>>\n    | React.ReactFragment;\n\n  /**\n   * A function that takes in the datum of a single row as a parameter and returns a `JSX.Element` determining how it should be rendered.\n   *\n   * Should make use of the `<Cell>` component.\n   * @type ({datum}) => JSX.Element\n   */\n  children: (TableRowArgs: TableRowInterface<Shape>) => JSX.Element;\n\n  /**\n   * Override the global `baseFontSize` set in LeafyGreenProvider\n   */\n  baseFontSize?: 14 | 16;\n\n  /**\n   * Determines whether or not the component will appear in dark mode.\n   */\n  darkMode?: boolean;\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\nexport default function Table<Shape>({\n  columns = [],\n  data: dataProp = [],\n  children,\n  className,\n  baseFontSize,\n  darkMode: darkModeProp,\n  ...rest\n}: TableProps<Shape>) {\n  const [scrollState, setScrollState] = React.useState<ScrollState>(\n    ScrollState.None,\n  );\n  const divRef = React.useRef<HTMLDivElement>(null);\n  const viewportSize = useViewportSize();\n  const { darkMode } = useDarkMode(darkModeProp);\n\n  useIsomorphicLayoutEffect(() => {\n    const divNode = divRef.current;\n\n    if (divNode == null) {\n      return;\n    }\n\n    if (divNode.scrollWidth > divNode.clientWidth) {\n      setScrollState(ScrollState.Right);\n    } else if (\n      viewportSize != null &&\n      divNode.getBoundingClientRect().width <= viewportSize.width\n    ) {\n      setScrollState(ScrollState.None);\n    }\n  }, [viewportSize]);\n\n  const handleScroll = (e: React.UIEvent) => {\n    const { scrollWidth, clientWidth: elementWidth } =\n      e.target as HTMLDivElement;\n    const isScrollable = scrollWidth > elementWidth;\n\n    if (isScrollable) {\n      const scrollPosition = (e.target as HTMLDivElement).scrollLeft;\n      const maxPosition = scrollWidth - elementWidth;\n\n      if (scrollPosition > 0 && scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Both);\n      } else if (scrollPosition > 0) {\n        setScrollState(ScrollState.Left);\n      } else if (scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Right);\n      }\n    }\n  };\n\n  const debounceScroll = debounce(handleScroll, 50, { leading: true });\n\n  const onScroll: React.EventHandler<React.UIEvent> = e => {\n    e.persist();\n    debounceScroll(e);\n  };\n\n  const showLeft =\n    scrollState === ScrollState.Left || scrollState === ScrollState.Both;\n  const showRight =\n    scrollState === ScrollState.Right || scrollState === ScrollState.Both;\n\n  return (\n    <div className={containerStyle}>\n      <div\n        className={cx(shadow, leftShadow(darkMode), {\n          [showScroll]: showLeft,\n        })}\n      />\n      <div\n        className={cx(shadow, rightShadow(darkMode), {\n          [showScroll]: showRight,\n        })}\n      />\n\n      <div\n        ref={divRef}\n        onScroll={onScroll}\n        className={cx(\n          css`\n            overflow-x: auto;\n          `,\n        )}\n      >\n        <table\n          cellSpacing=\"0\"\n          cellPadding=\"0\"\n          className={cx(tableStyles, className)}\n          {...rest}\n        >\n          <TableProvider data={dataProp}>\n            <SortProvider>\n              <LeafyGreenProvider\n                darkMode={darkMode}\n                baseFontSize={baseFontSize}\n              >\n                <TableHead columns={columns} />\n                <TableBody>{children}</TableBody>\n              </LeafyGreenProvider>\n            </SortProvider>\n          </TableProvider>\n        </table>\n      </div>\n    </div>\n  );\n}\nTable.displayName = 'Table';\n//  TODO: missing proptypes\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport SortAscendingIcon from '@leafygreen-ui/icon/dist/SortAscending';\nimport SortDescendingIcon from '@leafygreen-ui/icon/dist/SortDescending';\nimport UnsortedIcon from '@leafygreen-ui/icon/dist/Unsorted';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { enforceExhaustive, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport { SortDirection, useSortContext } from './SortContext';\nimport { getCommonCellStyles } from './styles';\nimport { DataType, TableActionTypes, useTableContext } from './TableContext';\n\ntype StyledElements = 'thStyle' | 'labelStyle' | 'glyphColor';\n\nconst themeStyles: Record<Theme, Record<StyledElements, string>> = {\n  [Theme.Light]: {\n    thStyle: css`\n      border-color: ${palette.gray.light2};\n    `,\n    labelStyle: css`\n      color: ${palette.gray.dark3};\n    `,\n    glyphColor: css`\n      color: ${palette.blue.base};\n    `,\n  },\n\n  [Theme.Dark]: {\n    thStyle: css`\n      background-color: ${palette.black};\n      border-color: ${palette.gray.dark2};\n    `,\n    labelStyle: css`\n      color: ${palette.gray.light2};\n    `,\n    glyphColor: css`\n      color: ${palette.blue.light1};\n    `,\n  },\n};\n\nconst thStyle = css`\n  border-bottom: 3px solid;\n`;\n\nconst flexDisplay = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst labelStyle = css`\n  padding-right: 4px;\n`;\n\nconst iconButtonMargin = css`\n  margin: -4px 0;\n`;\n\nconst glyphMap = {\n  unsorted: UnsortedIcon,\n  asc: SortDescendingIcon,\n  desc: SortAscendingIcon,\n} as const;\n\ntype NormalizedAccessor<T extends string | Function> = T extends string\n  ? <U>(data: U) => T extends keyof U ? U[T] : undefined\n  : T;\nexport function normalizeAccessor<T extends string | Function>(\n  accessor: T,\n): NormalizedAccessor<T> {\n  let accessorFn = accessor as NormalizedAccessor<T>;\n\n  if (typeof accessor === 'string') {\n    if (accessor.includes('.')) {\n      const accessorArr = accessor.split('.');\n\n      accessorFn = ((data: any) => {\n        return accessorArr.reduce((obj, access) => {\n          return obj[access];\n        }, data);\n      }) as NormalizedAccessor<T>;\n    } else {\n      accessorFn = ((data: any) => data[accessor]) as NormalizedAccessor<T>;\n    }\n  }\n\n  return accessorFn;\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\ninterface TableHeaderInterface<Shape> {\n  /**\n   * The label of the column\n   *\n   * @type string\n   */\n  label: React.ReactElement | string;\n\n  /**\n   * The index of the column\n   */\n  index?: number;\n\n  /**\n   * Callback fired when the header is clicked\n   */\n  onClick?: (\n    colId: number,\n    accessorValue: ((data: any) => string) | string,\n  ) => void;\n\n  /**\n   * A callback to define which property of the data structure to sort on\n   */\n  sortBy?: ((data: Shape) => string) | string;\n\n  /**\n   * A callback to provide more customization in column sorting.\n   * This callback has a similar signature to the Array.sort method,\n   * with the addition of a `direction` parameter, which has values `asc` or `desc`.\n   *\n   * Pin a row to the top by returning -1 if `a` matches, and 1 if `b` matches the desired row\n   */\n  compareFn?: (a: Shape, b: Shape, direction: SortDirection) => number;\n\n  /**\n   * A callback that gets called when a user initiates sort on the column.\n   * Internal sorting is disabled when this callback is provided.\n   */\n  handleSort?: (direction: SortDirection) => void;\n\n  /**\n   * The type of data as a `DataType`\n   */\n  dataType?: DataType;\n}\n\nexport type TableHeaderProps<Shape> = Omit<\n  React.ComponentPropsWithoutRef<'th'>,\n  keyof TableHeaderInterface<Shape>\n> &\n  TableHeaderInterface<Shape>;\n\nexport type TableHeaderElement = React.ReactComponentElement<\n  typeof TableHeader\n>;\n\n/**\n * @deprecated\n * @noDocgen\n */\nfunction TableHeader<Shape>({\n  label,\n  onClick,\n  index,\n  className,\n  dataType,\n  sortBy,\n  compareFn,\n  handleSort,\n  ...rest\n}: TableHeaderProps<Shape>) {\n  const { dispatch } = useTableContext();\n  const { sort, setSort } = useSortContext();\n  const baseFontSize = useUpdatedBaseFontSize();\n  const { theme, darkMode } = useDarkMode();\n\n  React.useEffect(() => {\n    if (typeof index === 'number') {\n      dispatch({\n        type: TableActionTypes.RegisterColumn,\n        payload: {\n          // Offsetting 0-index\n          index: index + 1,\n          dataType,\n        },\n      });\n    }\n  }, [index, dataType, dispatch]);\n\n  const normalizedAccessor = sortBy && normalizeAccessor(sortBy);\n  const isSortable = !!(sortBy || compareFn || handleSort);\n\n  const sortDirection = sort && sort.columnId === index ? sort.direction : null;\n  const glyph: 'unsorted' | SortDirection = sortDirection ?? 'unsorted';\n  const Glyph = glyphMap[glyph];\n\n  const sortRows = () => {\n    if (typeof index === 'number' && isSortable) {\n      const newDirection: SortDirection =\n        index === sort?.columnId\n          ? sort.direction === 'asc'\n            ? 'desc'\n            : 'asc'\n          : 'desc';\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setSort(prevSort => {\n        return {\n          columnId: index,\n          direction: newDirection,\n          accessorValue: normalizedAccessor || undefined,\n          compareFn,\n        };\n      });\n\n      handleSort?.(newDirection);\n    }\n  };\n\n  let ariaSort: React.AriaAttributes['aria-sort'];\n\n  switch (sortDirection) {\n    case 'asc':\n      ariaSort = 'ascending';\n      break;\n    case 'desc':\n      ariaSort = 'descending';\n      break;\n    case null:\n      ariaSort = 'none';\n      break;\n    default:\n      enforceExhaustive(sortDirection);\n  }\n\n  return (\n    <th\n      role=\"columnheader\"\n      scope=\"col\"\n      aria-sort={ariaSort}\n      {...rest}\n      className={cx(\n        getCommonCellStyles(baseFontSize),\n        thStyle,\n        themeStyles[theme].thStyle,\n        className,\n      )}\n    >\n      <div className={flexDisplay}>\n        <span className={cx(labelStyle, themeStyles[theme].labelStyle)}>\n          {label}\n        </span>\n        {isSortable && (\n          <IconButton\n            className={iconButtonMargin}\n            aria-label=\"sort\"\n            onClick={sortRows}\n            darkMode={darkMode}\n          >\n            <Glyph\n              size=\"small\"\n              title={`${glyph}-${index}`}\n              className={cx({\n                [themeStyles[theme].glyphColor]:\n                  glyph === 'asc' || glyph === 'desc',\n              })}\n            />\n          </IconButton>\n        )}\n      </div>\n    </th>\n  );\n}\n\nTableHeader.displayName = 'TableHeader';\n\nexport default TableHeader;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const disabledTableRowCheckStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    input + div {\n      border-color: ${palette.gray.light1};\n      background-color: ${palette.gray.light2};\n    }\n    input[aria-checked='true'] + div {\n      &:before {\n        background-color: ${palette.gray.light1};\n      }\n      & path {\n        stroke: ${palette.white};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    input + div {\n      border-color: ${palette.gray.dark1};\n      background-color: ${palette.gray.dark2};\n    }\n    input[aria-checked='true'] + div {\n      &:before {\n        background-color: ${palette.gray.dark1};\n      }\n      & path {\n        stroke: ${palette.gray.base};\n      }\n    }\n  `,\n};\n","import React from 'react';\nimport { Table } from '@tanstack/react-table';\n\nimport Checkbox from '@leafygreen-ui/checkbox';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { useRowContext } from '../Row/RowContext';\n\nimport { disabledTableRowCheckStyles } from './useLeafyGreenTable.styles';\nimport { LGRowData, LGTableDataType } from '.';\n\nexport const TableHeaderCheckbox = <T extends LGRowData>({\n  table,\n}: {\n  table: Table<LGTableDataType<T>>;\n}) => {\n  const { theme } = useDarkMode();\n  const { disabled: rowIsDisabled } = useRowContext();\n  return (\n    <Checkbox\n      className={cx({\n        [disabledTableRowCheckStyles[theme]]: rowIsDisabled,\n      })}\n      disabled={rowIsDisabled}\n      checked={table.getIsAllRowsSelected()}\n      indeterminate={table.getIsSomeRowsSelected()}\n      onChange={table.getToggleAllRowsSelectedHandler()}\n      aria-label=\"Select all rows\"\n    />\n  );\n};\n","import React from 'react';\nimport { Row, Table } from '@tanstack/react-table';\n\nimport Checkbox from '@leafygreen-ui/checkbox';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { useRowContext } from '../Row/RowContext';\n\nimport { disabledTableRowCheckStyles } from './useLeafyGreenTable.styles';\nimport { LGRowData, LGTableDataType } from '.';\n\nexport const TableRowCheckbox = <T extends LGRowData>({\n  row,\n  table,\n}: {\n  table: Table<LGTableDataType<T>>;\n  row: Row<LGTableDataType<T>>;\n}) => {\n  const { theme } = useDarkMode();\n  const { disabled: rowIsDisabled } = useRowContext();\n  return (\n    <Checkbox\n      className={cx({\n        [disabledTableRowCheckStyles[theme]]: rowIsDisabled,\n      })}\n      disabled={rowIsDisabled}\n      checked={row.getIsSelected()}\n      indeterminate={row.getIsSomeSelected()}\n      onChange={row.getToggleSelectedHandler()}\n      aria-label={`Select row ${row.id}`}\n      aria-controls={`lg-table-row-${row.id}`}\n      // Don't animate if _all_ rows have been checked (usually, if header row is clicked). Not the _best_ check, but it mostly works\n      animate={!table.getIsAllRowsSelected()}\n    />\n  );\n};\n","import React from 'react';\nimport { useVirtual } from 'react-virtual';\nimport { useReactTable } from '@tanstack/react-table';\nimport {\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n} from '@tanstack/react-table';\nimport omit from 'lodash/omit';\n\nimport { TableHeaderCheckbox } from './TableHeaderCheckbox';\nimport { TableRowCheckbox } from './TableRowCheckbox';\nimport { LeafyGreenTableOptions, LGRowData } from './useLeafyGreenTable.types';\nimport { LeafyGreenTable, LGColumnDef, LGTableDataType } from '.';\n\nconst CHECKBOX_WIDTH = 14;\n\nfunction useLeafyGreenTable<T extends LGRowData, V extends unknown = unknown>({\n  containerRef,\n  data,\n  columns: columnsProp,\n  hasSelectableRows,\n  withPagination = false,\n  useVirtualScrolling = false,\n  allowSelectAll = true,\n  virtualizerOptions,\n  ...rest\n}: LeafyGreenTableOptions<T, V>): LeafyGreenTable<T> {\n  /**\n   * A `ColumnDef` object injected into `useReactTable`'s `columns` option when the user is using selectable rows.\n   */\n  const baseSelectColumnConfig: LGColumnDef<T, V> = {\n    id: 'select',\n    size: CHECKBOX_WIDTH,\n    header: TableHeaderCheckbox,\n    cell: TableRowCheckbox,\n  };\n\n  const hasSortableColumns = React.useMemo(\n    () => columnsProp.some(propCol => !!propCol.enableSorting),\n    [columnsProp],\n  );\n  const selectColumnConfig = allowSelectAll\n    ? baseSelectColumnConfig\n    : omit(baseSelectColumnConfig, 'header');\n  const columns = React.useMemo<Array<LGColumnDef<T, V>>>(\n    () => [\n      ...(hasSelectableRows ? [selectColumnConfig as LGColumnDef<T, V>] : []),\n      ...columnsProp.map(propColumn => {\n        return {\n          ...propColumn,\n          align: propColumn.align ?? 'left',\n          enableSorting: propColumn.enableSorting ?? false,\n        } as LGColumnDef<T, V>;\n      }),\n    ],\n    [columnsProp, hasSelectableRows, selectColumnConfig],\n  );\n\n  const table = useReactTable<LGTableDataType<T>>({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getRowCanExpand: row => {\n      return !!row.original.renderExpandedContent || !!row.subRows?.length;\n    },\n    enableExpanding: true,\n    enableSortingRemoval: hasSortableColumns ? true : undefined,\n    getSubRows: row => row.subRows,\n    getSortedRowModel: getSortedRowModel(),\n    getPaginationRowModel: withPagination ? getPaginationRowModel() : undefined,\n    ...rest,\n  });\n\n  const { rows } = table.getRowModel();\n  const _rowVirtualizer = useVirtual({\n    parentRef: containerRef,\n    size: rows.length,\n    overscan: 30,\n    ...virtualizerOptions,\n  });\n\n  return {\n    ...table,\n    ...(useVirtualScrolling && {\n      virtualRows: _rowVirtualizer.virtualItems,\n      totalSize: _rowVirtualizer.totalSize,\n      scrollToIndex: _rowVirtualizer.scrollToIndex,\n    }),\n    hasSelectableRows,\n  } as LeafyGreenTable<T>;\n}\n\nexport default useLeafyGreenTable;\n","import React, { ReactElement } from 'react';\nimport { Row, SortingFn } from '@tanstack/react-table';\nimport camelCase from 'lodash/camelCase';\n\nimport { Align } from '../Cell/Cell.types';\nimport { TableProps } from '../TableV10/Table';\n\nimport { ValidDataType } from './V11Adapter.types';\n\n/**\n * Converts V10's HeaderRow ReactElement to an Array<ColumnDef>\n * to be consumed by `react-table`.\n *\n * @param data returned value from `processData`\n * @param columns V10's `columns` prop\n * @param headerLabels any overrides to the header's label when the label does not correspond to its data's key in `data`\n * @returns Array<ColumnDef>\n */\nconst processColumns = <T extends ValidDataType>(\n  data: Array<T>,\n  columns: TableProps<T>['columns'],\n  headerLabels?: { [key: string]: string },\n) => {\n  const columnsChildren = React.Children.toArray(columns);\n\n  let TableHeaders;\n\n  // when columnsChildren.length > 1, columns was passed an array of TableHeaders instead of a HeaderRow.\n  if (columnsChildren.length > 1) {\n    TableHeaders = columnsChildren;\n  } else {\n    const HeaderRow = columnsChildren[0] as ReactElement;\n    TableHeaders = React.Children.toArray(HeaderRow.props.children);\n  }\n\n  const processedColumns = TableHeaders.map(TableHeader => {\n    const headerProps = (TableHeader as ReactElement).props;\n\n    const hasSorting =\n      !!headerProps.sortBy ||\n      !!headerProps.handleSort ||\n      !!headerProps.compareFn;\n\n    const convertedCompareFn: SortingFn<T> = (\n      rowA: Row<T>,\n      rowB: Row<T>,\n      _: any,\n    ) => {\n      const indexA = rowA.index;\n      const indexB = rowB.index;\n      return headerProps.compareFn(data[indexA], data[indexB]);\n    };\n\n    const defaultSortingFn = (rowA: Row<T>, rowB: Row<T>, columnId: string) => {\n      const indexA = rowA.index;\n      const indexB = rowB.index;\n      return (data[indexA] as T)[columnId] > (data[indexB] as T)[columnId]\n        ? -1\n        : (data[indexB] as T)[columnId] > (data[indexA] as T)[columnId]\n        ? 1\n        : 0;\n    };\n\n    const retVal = {\n      accessorKey:\n        (headerLabels && headerLabels[headerProps.label]) ??\n        camelCase(headerProps.label),\n      header: headerProps.label,\n      align: (headerProps.dataType === 'number' ? 'right' : 'left') as Align,\n      enableSorting: hasSorting,\n      sortingFn: headerProps.compareFn\n        ? convertedCompareFn\n        : hasSorting\n        ? defaultSortingFn\n        : undefined,\n    };\n\n    return retVal;\n  });\n  return processedColumns;\n};\n\nexport default processColumns;\n","import React, { ReactElement } from 'react';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { AccessorKeyColumnDef } from '@tanstack/react-table';\n\nimport { isComponentType } from '@leafygreen-ui/lib';\n\nimport { TableRowInterface } from '../TableV10/Table';\nimport { LGTableDataType } from '../useLeafyGreenTable';\n\nimport { ProcessedRowData, ValidDataType } from './V11Adapter.types';\n\nconst processData: (\n  data: Array<any>,\n  processedColumns: Array<AccessorKeyColumnDef<any>>,\n  childrenFn: (TableRowArgs: TableRowInterface<unknown>) => JSX.Element,\n) => Array<ProcessedRowData> = <T extends ValidDataType>(\n  data: Array<any>,\n  processedColumns: Array<AccessorKeyColumnDef<T>>,\n  childrenFn: (TableRowArgs: TableRowInterface<unknown>) => JSX.Element,\n) => {\n  const processedData = data.map((oldDatum, index) => {\n    // for each row, evaluate childrenFn\n    const evaluatedChildren = childrenFn({ datum: oldDatum, index });\n    const childrenArray = flattenChildren(evaluatedChildren);\n\n    const evaluatedRow = childrenArray.filter(child =>\n      isComponentType(child, 'Row'),\n    )[0];\n    const rowChildren = flattenChildren(\n      (evaluatedRow as ReactElement).props.children,\n    );\n\n    const evaluatedCells = rowChildren.filter(child =>\n      isComponentType(child, 'Cell'),\n    );\n\n    const newDatum: LGTableDataType<T> = evaluatedCells.reduce(\n      (acc: T, currVal, index) => {\n        return {\n          ...acc,\n          [processedColumns[index]?.accessorKey]: () => currVal as ReactElement,\n        } as T;\n      },\n      {} as T,\n    );\n\n    const subRowChildren = rowChildren.filter(child =>\n      isComponentType(child, 'Row'),\n    );\n    if (subRowChildren.length > 0) newDatum.subRows = [];\n    subRowChildren.map(subRow => {\n      const subRowCells = flattenChildren(\n        (subRow as ReactElement).props.children,\n      );\n      const firstSubRowCell = subRowCells[0];\n      const firstSubRowCellColSpan = (firstSubRowCell as ReactElement).props\n        .colSpan;\n\n      if (\n        firstSubRowCellColSpan &&\n        firstSubRowCellColSpan === processedColumns.length\n      ) {\n        // eslint-disable-next-line react/display-name\n        newDatum.renderExpandedContent = () => (\n          <div style={{ padding: '10px 8px 10px 32px' }}>\n            {(firstSubRowCell as ReactElement).props.children}\n          </div>\n        );\n      } else {\n        const processedSubRow = subRowCells.reduce((acc: T, currVal, index) => {\n          return {\n            ...acc,\n            [processedColumns[index]?.accessorKey]: () =>\n              currVal as ReactElement,\n          };\n        }, {} as T);\n        const {\n          children,\n          expanded,\n          indentLevel,\n          isAnyAncestorCollapsed,\n          ...rowProps\n        } = (subRow as ReactElement).props;\n        newDatum.subRows &&\n          newDatum.subRows.push({\n            ...processedSubRow,\n            rowProps,\n          } as T);\n      }\n    });\n\n    return { ...newDatum, rowProps: (evaluatedRow as ReactElement).props };\n  });\n  return processedData;\n};\n\nexport default processData;\n","import React, {\n  ReactElement,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { VirtualItem } from 'react-virtual';\nimport { flexRender } from '@tanstack/react-table';\nimport omit from 'lodash/omit';\n\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { consoleOnce, isComponentType } from '@leafygreen-ui/lib';\n\nimport { Cell, HeaderCell } from '../Cell';\nimport ExpandedContent from '../ExpandedContent/ExpandedContent';\nimport { HeaderRow, Row } from '../Row';\nimport Table from '../Table';\nimport TableBody from '../TableBody';\nimport TableHead from '../TableHead';\nimport { TableProps as V10TableProps } from '../TableV10/Table';\nimport { TableHeaderProps } from '../TableV10/TableHeader';\nimport useLeafyGreenTable, {\n  LeafyGreenTableCell,\n  LeafyGreenTableRow,\n  LGColumnDef,\n  LGTableDataType,\n} from '../useLeafyGreenTable';\n\nimport processColumns from './processColumns';\nimport processData from './processData';\nimport {\n  ProcessedRowData,\n  V11AdapterProps,\n  ValidDataType,\n} from './V11Adapter.types';\n\n/**\n * Converts a v10 Table component to a v11 Table component.\n *\n * Given the two versions' significant differences in API, the adapter makes several assumptions about the v10 Table's usage:\n * - It is assumed that the v10 Table component will be the first child.\n * - The v11 columns are read from the v10 columns' labels. If the key of the cells' data does not correspond to the v10 column's label,\n * the user is expected to pass in the labels through the `headerLabels` prop.\n * - Currently only supports up to one layer of nested rows\n */\nconst V11Adapter = <T extends ValidDataType>({\n  children,\n  shouldAlternateRowColor,\n  useVirtualScrolling = false,\n  hasSelectableRows = false,\n  headerLabels,\n  className,\n}: V11AdapterProps<T>) => {\n  const containerRef = useRef(null);\n  const OldTable = flattenChildren(children)[0];\n\n  if (!isComponentType(OldTable, 'Table')) {\n    consoleOnce.error(\n      'The first and only child of `Table.V11Adapter` must be a `V10Table` component',\n    );\n  }\n\n  const OldTableProps = (OldTable as ReactElement).props;\n  const { darkMode } = useDarkMode(OldTableProps.darkMode);\n  type TData = typeof OldTableProps.data extends Array<infer U> ? U : never;\n\n  const {\n    data: initialData,\n    columns: initialColumns,\n    children: childrenFn,\n    baseFontSize,\n    ...oldTableProps\n  } = OldTableProps as V10TableProps<TData>;\n\n  const data = initialData as Array<T>;\n\n  const processedColumns = useMemo(\n    () => processColumns(data, initialColumns, headerLabels),\n    [data, initialColumns, headerLabels],\n  );\n\n  const [processedData, setProcessedData] = useState<\n    Array<LGTableDataType<ProcessedRowData>>\n  >(() => processData(data, processedColumns, childrenFn));\n\n  useEffect(() => {\n    setProcessedData(processData(data, processedColumns, childrenFn));\n  }, [data, processedColumns, childrenFn]);\n\n  const table = useLeafyGreenTable<T>({\n    containerRef,\n    data: processedData as Array<LGTableDataType<T>>,\n    columns: processedColumns as Array<LGColumnDef<T>>,\n    useVirtualScrolling,\n    hasSelectableRows,\n  });\n\n  const { rows } = table.getRowModel();\n\n  const iterables = useVirtualScrolling ? table.virtualRows ?? [] : rows;\n\n  const columnsChildren = React.Children.toArray(initialColumns);\n  const oldHeaderRow = columnsChildren[0] as ReactElement;\n\n  const oldHeaderCellProps: Array<TableHeaderProps<T>> = [];\n\n  if (columnsChildren.length < 2) {\n    React.Children.toArray(oldHeaderRow.props.children).map(child => {\n      const { label, dataType, ...props } = (child as ReactElement).props;\n      oldHeaderCellProps.push(props);\n    });\n  }\n\n  return (\n    <Table\n      darkMode={darkMode}\n      table={table}\n      shouldAlternateRowColor={\n        shouldAlternateRowColor ?? processedData.length > 10\n      }\n      className={className}\n      ref={containerRef}\n      baseFontSize={baseFontSize === 14 ? 13 : baseFontSize}\n      {...oldTableProps}\n    >\n      <TableHead>\n        <HeaderRow {...oldHeaderRow.props}>\n          {table.getHeaderGroups()[0].headers.map((header, i) => {\n            // remove onClick as the API is incompatible with the new API\n            const validOldHeaderCellProps = omit(\n              oldHeaderCellProps[i],\n              'onClick',\n            );\n            return (\n              <HeaderCell\n                key={header.id}\n                header={header}\n                {...validOldHeaderCellProps}\n              >\n                {flexRender(\n                  header.column.columnDef.header,\n                  header.getContext(),\n                )}\n              </HeaderCell>\n            );\n          })}\n        </HeaderRow>\n      </TableHead>\n      <TableBody>\n        {iterables.map((iterable: LeafyGreenTableRow<T> | VirtualItem) => {\n          const row = (\n            useVirtualScrolling ? rows[iterable.index] : iterable\n          ) as LeafyGreenTableRow<T>;\n          return (\n            <Row\n              key={row.index}\n              row={row}\n              virtualRow={\n                useVirtualScrolling ? (iterable as VirtualItem) : undefined\n              }\n              {...(row.original as T).rowProps}\n            >\n              {row.getVisibleCells().map((cell: LeafyGreenTableCell<T>) => {\n                if (cell?.column?.id) {\n                  if (cell?.column?.id === 'select') {\n                    return (\n                      <Cell key={cell.column.id}>\n                        {cell.column.columnDef?.cell &&\n                          typeof cell.column.columnDef?.cell != 'string' &&\n                          // Use default values defined by react-table instead of passing in expected parameters\n                          // @ts-expect-error\n                          cell.column.columnDef?.cell({ row, table })}\n                      </Cell>\n                    );\n                  } else {\n                    const cellChild =\n                      processedData[row.index]?.[cell.column.id]?.();\n                    const {\n                      children,\n                      isHeader,\n                      isDisabled,\n                      ...cellChildProps\n                    } = cellChild.props;\n                    return cellChild ? (\n                      <Cell key={cell.id} {...cellChildProps}>\n                        <>{children}</>\n                      </Cell>\n                    ) : (\n                      <></>\n                    );\n                  }\n                } else {\n                  return <></>;\n                }\n              })}\n              {row.original.renderExpandedContent && (\n                <ExpandedContent row={row} />\n              )}\n              {row.subRows &&\n                row.subRows.map(subRow => {\n                  const { children, ...subRowProps } = subRow.original\n                    .rowProps as ValidDataType['rowProps'];\n                  return (\n                    <Row key={subRow.id} row={subRow} {...subRowProps}>\n                      {subRow.getVisibleCells().map(srCell => {\n                        const subRowCell = subRow.original[srCell.column.id]();\n                        const {\n                          children,\n                          isHeader,\n                          isDisabled,\n                          ...subRowCellProps\n                        } = subRowCell.props;\n                        return (\n                          <Cell key={subRowCell.id} {...subRowCellProps}>\n                            {children}\n                          </Cell>\n                        );\n                      })}\n                    </Row>\n                  );\n                })}\n            </Row>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default V11Adapter;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","TableContext","createContext","useTableContext","useContext","TableContextProvider","_ref","children","darkMode","table","shouldAlternateRowColor","disableAnimations","getRowById","id","_table$getRowModel$ro","getRowModel","rowsById","undefined","TableProvider","Provider","React","createElement","LeafyGreenProvider","value","getParentRow","childId","childIds","split","parentId","slice","length","join","getParentRowId","baseTableSidePadding","spacing","standardCellHeight","baseCellStyles","css","_taggedTemplateLiteral","alignmentStyles","align","arguments","getCellPadding","_ref$depth","depth","isExpandable","isSelectable","depthPadding","basicCellStyles","cellTransitionContainerStyles","transitionDuration","default","truncatedContentStyles","typeScales","body1","lineHeight","disableAnimationStyles","cellContentTransitionStateStyles","height","_hiddenStyles","entered","entering","exiting","exited","unmounted","_excluded","Cell","className","contentClassName","rest","_objectWithoutProperties","_extends","cx","_defineProperty","displayName","_templateObject12","SortState","glyphs","themeGlyphColors","Theme","Dark","palette","blue","base","gray","light1","Light","dark1","SortIcon","sortState","onSortIconClick","theme","useDarkMode","Fragment","IconButton","onClick","e","Icon","glyph","fill","headerCellContentStyles","HeaderSortState","false","asc","desc","HeaderCell","_header$getSize","_header$column$column","columnName","size","cellIndex","header","isFirstCell","hasSelectableRows","column","getCanSort","columnDef","headerSortDirection","getIsSorted","toString","getToggleSortingHandler","getSize","scope","concat","expandedContentParentStyles","dark4","light3","selectedRowStyles","dark3","grayZebraRowStyles","zebraStyles","clickableStyles","hoverRing","focusRing","input","disabledStyles","dark2","light2","RowContext","useRowContext","RowContextProvider","disabled","InternalRowBase","tabIndex","getAreAncestorsExpanded","startId","isExpanded","parent","_isExpanded","_parent","getIsExpanded","baseStyles","expandedContentStyles","ExpandedContent","row","_useTableContext","contentRef","useRef","transitionRef","areAncestorsExpanded","isNestedRow","content","original","renderExpandedContent","contentHeight","useMemo","current","clientHeight","colSpan","getVisibleCells","Transition","in","timeout","nodeRef","state","ref","HeaderRow","Children","map","child","index","props","InternalRowWithoutRT","forEach","isComponentType","consoleOnce","warn","CellOverflowBehavior","InternalCell","_contentRef$current","_ref$isVisible","isVisible","_ref$isExpandable","overflow","scrollHeight","shouldTruncate","propTypes","PropTypes","number","bool","iconButtonTransitionStyles","iconFills","rotatedStyles","ToggleExpandedIcon","toggleExpanded","role","func","isRequired","RowCellChildren","CellChildren","parentRow","isNested","isParentExpanded","isRowVisible","getCanExpand","colIndex","_props","cell","InternalRowWithRT","virtualRow","rowRef","measureRef","isTableExpandable","getCanSomeRowsExpand","isOddVSRow","isSelected","getIsSelected","flattenedChildren","flattenChildren","filter","OtherChildren","shouldRenderAsTBody","containerAs","tBodyProps","Polymorph","as","Row","any","themeStyles","tableContainerStyles","Table","forwardRef","containerRef","_ref$shouldAlternateR","baseFontSizeProp","baseFontSize","darkModeProp","_ref$disableAnimation","useUpdatedBaseFontSize","_useDarkMode","bodyTypeScaleStyles","oneOf","Object","values","BaseFontSize","TableBody","paddingTop","paddingBottom","areSomeRowsExpandable","bodyAs","virtualRows","_virtualRows$","_virtualRows","totalSize","start","end","style","stickyStyles","black","white","TableHead","isSticky","sharedStyles","getCommonCellStyles","tdInnerDivClassName","createUniqueClassName","thStyles","lightModeThStyles","darkModeThStyles","innerDivStyles","lightModeDisabledHeaderStyles","darkModeDisabledHeaderStyles","_ref$isHeader","isHeader","isDisabled","Root","nestedRowInitialStyle","hiddenRowStyles","nestedRowTransitionStyles","NestedRow","_useState2","_slicedToArray","useState","nestedRowHeight","setNestedRowHeight","nestedRowNodeRef","useEffect","innerSpan","querySelector","offsetHeight","calculateRowContentHeight","TableActionTypes","RegisterColumn","SetHasNestedRows","SetHasRowSpan","SetData","DataType","Number","Weight","ZipCode","String","Date","data","dispatch","reducer","action","type","_objectSpread","hasRowSpan","payload","hasNestedRows","columnInfo","dataType","_useReducer2","useReducer","contextValue","obj","_templateObject13","_templateObject14","_templateObject15","Device","Browser","Server","Native","canUseDOM","window","document","device","navigator","product","SSRObject","isBrowser","isServer","isNative","canUseWorkers","Worker","canUseEventListeners","addEventListener","canUseViewport","screen","useSSRObject","_len","args","Array","_key","reduce","acc","assign","keys","key","_excluded2","iconButtonMargin","iconButtonThemeStyles","iconButtonThemeDisabledStyles","rowStyle","altColor","disabledStyle","hideRow","_ref$expanded","expanded","_ref$disabled","_ref$indentLevel","indentLevel","isAnyAncestorCollapsedProp","isAnyAncestorCollapsed","_useTableContext$stat","tableDispatch","shouldAltRowColor","indexRef","useIdAllocator","prefix","setIsExpanded","nestedRowParentRef","shouldDispatchHasNestedRows","shouldDispatchHasRowSpan","rowSpan","_useMemo","renderedNestedRows","rowHasNestedRows","toArray","some","shouldTransitionGroupBeVisible","renderedNestedRowTransitionGroup","enter","exit","renderedChildren","push","cloneElement","ChevronDownIcon","ChevronRightIcon","chevronButton","curr","_renderedChildren$0$p","firstChildChildren","firstChildProps","entries","_ref2","_ref3","justify","styleColumn","rowClassName","getIndentLevelStyle","_toConsumableArray","SortContext","sort","setSort","SortProvider","useSortContext","alphanumericCollator","Intl","Collator","numeric","sensitivity","getDataComparisonFunction","direction","accessorValue","compareFn","a","b","aVal","bVal","compare","console","error","_compareFn","rows","renderFunction","resultMap","Map","datum","set","get","from","useRenderedChildren","useCallback","_ref$columns","columns","usingHeaderRow","cols","createCols","array","tableHeaderCommonProps","lmShadowColor","transparentize","dmShadowColor","containerStyle","tableStyles","fontFamilies","shadow","leftShadow","rightShadow","showScroll","ScrollState","_ref$data","dataProp","_React$useState2","scrollState","setScrollState","divRef","viewportSize","useViewportSize","useIsomorphicLayoutEffect","divNode","scrollWidth","clientWidth","getBoundingClientRect","width","debounceScroll","debounce","target","elementWidth","scrollPosition","scrollLeft","maxPosition","leading","showLeft","showRight","onScroll","persist","cellSpacing","cellPadding","thStyle","labelStyle","glyphColor","flexDisplay","glyphMap","unsorted","UnsortedIcon","SortDescendingIcon","SortAscendingIcon","TableHeader","label","sortBy","handleSort","_useSortContext","ariaSort","normalizedAccessor","accessor","accessorFn","includes","accessorArr","access","normalizeAccessor","isSortable","sortDirection","columnId","Glyph","enforceExhaustive","newDirection","prevSort","title","disabledTableRowCheckStyles","TableHeaderCheckbox","rowIsDisabled","Checkbox","checked","getIsAllRowsSelected","indeterminate","getIsSomeRowsSelected","onChange","getToggleAllRowsSelectedHandler","TableRowCheckbox","getIsSomeSelected","getToggleSelectedHandler","animate","useLeafyGreenTable","columnsProp","_ref$withPagination","withPagination","_ref$useVirtualScroll","useVirtualScrolling","_ref$allowSelectAll","allowSelectAll","virtualizerOptions","baseSelectColumnConfig","hasSortableColumns","propCol","enableSorting","selectColumnConfig","omit","propColumn","_propColumn$align","_propColumn$enableSor","useReactTable","getCoreRowModel","getRowCanExpand","_row$subRows","subRows","enableExpanding","enableSortingRemoval","getSubRows","getSortedRowModel","getPaginationRowModel","_rowVirtualizer","useVirtual","parentRef","overscan","virtualItems","scrollToIndex","processData","processedColumns","childrenFn","oldDatum","evaluatedChildren","evaluatedRow","rowChildren","newDatum","currVal","_processedColumns$ind","accessorKey","subRowChildren","subRow","subRowCells","firstSubRowCell","firstSubRowCellColSpan","padding","processedSubRow","_processedColumns$ind2","rowProps","_excluded3","_excluded4","_excluded5","V11Adapter","_table$virtualRows","_ref$hasSelectableRow","headerLabels","OldTable","OldTableProps","initialData","initialColumns","oldTableProps","TableHeaders","columnsChildren","headerProps","hasSorting","camelCase","sortingFn","rowA","rowB","_","indexA","indexB","processColumns","processedData","setProcessedData","iterables","oldHeaderRow","oldHeaderCellProps","getHeaderGroups","headers","i","validOldHeaderCellProps","flexRender","getContext","iterable","_cell$column","_cell$column2","_cell$column$columnDe","_cell$column$columnDe2","_cell$column$columnDe3","_processedData$row$in","_processedData$row$in2","cellChild","call","_cellChild$props","_children","cellChildProps","subRowProps","srCell","subRowCell","_subRowCell$props","subRowCellProps"],"mappings":"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"}