import React from 'react';
import { SortDirection } from './SortContext';
import { DataType } from './TableContext';
type NormalizedAccessor<T extends string | Function> = T extends string ? <U>(data: U) => T extends keyof U ? U[T] : undefined : T;
export declare function normalizeAccessor<T extends string | Function>(accessor: T): NormalizedAccessor<T>;
/**
 * @deprecated
 * @noDocgen
 */
interface TableHeaderInterface<Shape> {
    /**
     * The label of the column
     *
     * @type string
     */
    label: React.ReactElement | string;
    /**
     * The index of the column
     */
    index?: number;
    /**
     * Callback fired when the header is clicked
     */
    onClick?: (colId: number, accessorValue: ((data: any) => string) | string) => void;
    /**
     * A callback to define which property of the data structure to sort on
     */
    sortBy?: ((data: Shape) => string) | string;
    /**
     * A callback to provide more customization in column sorting.
     * This callback has a similar signature to the Array.sort method,
     * with the addition of a `direction` parameter, which has values `asc` or `desc`.
     *
     * Pin a row to the top by returning -1 if `a` matches, and 1 if `b` matches the desired row
     */
    compareFn?: (a: Shape, b: Shape, direction: SortDirection) => number;
    /**
     * A callback that gets called when a user initiates sort on the column.
     * Internal sorting is disabled when this callback is provided.
     */
    handleSort?: (direction: SortDirection) => void;
    /**
     * The type of data as a `DataType`
     */
    dataType?: DataType;
}
export type TableHeaderProps<Shape> = Omit<React.ComponentPropsWithoutRef<'th'>, keyof TableHeaderInterface<Shape>> & TableHeaderInterface<Shape>;
export type TableHeaderElement = React.ReactComponentElement<typeof TableHeader>;
/**
 * @deprecated
 * @noDocgen
 */
declare function TableHeader<Shape>({ label, onClick, index, className, dataType, sortBy, compareFn, handleSort, ...rest }: TableHeaderProps<Shape>): React.JSX.Element;
declare namespace TableHeader {
    var displayName: string;
}
export default TableHeader;
//# sourceMappingURL=TableHeader.d.ts.map