[
  {
    "tags": {
      "param": "props.children Content to appear inside of Menu.\nprops.open Boolean to describe whether or not Menu is open.\nprops.setOpen Callback to change the open state of the Menu.\nprops.shouldClose Callback to determine whether or not Menu should close when user tries to close it.\nprops.className Classname applied to Menu.\nprops.align Alignment of Menu relative to another element: `top`, `bottom`, `left`, `right`.\nprops.justify Justification of Menu relative to another element: `start`, `middle`, `end`.\nprops.refEl Reference element that Menu should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.trigger Trigger element can be ReactNode or function, and, if present, internally manages active state of Menu.\nprops.darkMode Determines whether or not the component will be rendered in dark theme."
    },
    "description": "\nMenus are used when a user needs to take an action.\n\nIn a menu a user takes an action (like copy/delete a property or navigate to a different section/screen).",
    "methods": [],
    "displayName": "Menu",
    "props": {
      "MenuProps": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "The menu items, or submenus",
          "required": true,
          "type": {
            "name": "`<MenuItem />` | `<SubMenu />` | `<MenuGroup />` | `<MenuSeparator />`"
          },
          "tags": {
            "type": "`<MenuItem />` | `<SubMenu />` | `<MenuGroup />` | `<MenuSeparator />`"
          }
        },
        "trigger": {
          "name": "trigger",
          "defaultValue": null,
          "description": "A slot for the element used to trigger the Menu. Passing a trigger allows\nMenu to control opening and closing itself internally.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Function | ReactElement<any, string | JSXElementConstructor<any>>",
            "value": [
              {
                "value": "Function",
                "description": "Creates a new function.",
                "fullComment": "Creates a new function.",
                "tags": {}
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "initialOpen": {
          "name": "initialOpen",
          "defaultValue": {
            "value": false
          },
          "description": "Provides an initial value to uncontrolled open/setOpen state\n\ndefault: `false`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "open": {
          "name": "open",
          "defaultValue": null,
          "description": "Determines the open state of the menu\n\ndefault: `false`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "setOpen": {
          "name": "setOpen",
          "defaultValue": null,
          "description": "Callback to change the open state of the Menu.",
          "required": false,
          "type": {
            "name": "Dispatch<SetStateAction<boolean>>"
          },
          "tags": {}
        },
        "shouldClose": {
          "name": "shouldClose",
          "defaultValue": {
            "value": "() => true"
          },
          "description": "Callback to determine whether or not Menu should close when user tries to close it.",
          "required": false,
          "type": {
            "name": "() => boolean"
          },
          "tags": {}
        },
        "maxHeight": {
          "name": "maxHeight",
          "defaultValue": {
            "value": 344
          },
          "description": "The max height of the menu (in px). Defaults to 256",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "darkMode": {
          "name": "darkMode",
          "defaultValue": null,
          "description": "Determines whether or not the component will be rendered in dark mode.\n\ndefault: `false`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "id": {
          "name": "id",
          "defaultValue": null,
          "description": "id passed to the menu dropdown.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "Class name applied to popover container.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "contentClassName": {
          "name": "contentClassName",
          "defaultValue": null,
          "description": "Class name applied to the popover content container",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "align": {
          "name": "align",
          "defaultValue": {
            "value": "Align.Bottom"
          },
          "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Align",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"center-vertical\""
              },
              {
                "value": "\"center-horizontal\""
              }
            ]
          },
          "tags": {}
        },
        "justify": {
          "name": "justify",
          "defaultValue": {
            "value": "Justify.End"
          },
          "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Justify",
            "value": [
              {
                "value": "\"start\""
              },
              {
                "value": "\"middle\""
              },
              {
                "value": "\"end\""
              },
              {
                "value": "\"fit\""
              }
            ]
          },
          "tags": {}
        },
        "refEl": {
          "name": "refEl",
          "defaultValue": null,
          "description": "A reference to the element against which the popover component will be positioned.",
          "required": false,
          "type": {
            "name": "RefObject<HTMLElement>"
          },
          "tags": {}
        },
        "spacing": {
          "name": "spacing",
          "defaultValue": {
            "value": 6
          },
          "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "adjustOnMutation": {
          "name": "adjustOnMutation",
          "defaultValue": {
            "value": false
          },
          "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "onClick": {
          "name": "onClick",
          "defaultValue": null,
          "description": "Click event handler passed to the root div element within the portal container.",
          "required": false,
          "type": {
            "name": "MouseEventHandler<Element>"
          },
          "tags": {}
        },
        "popoverZIndex": {
          "name": "popoverZIndex",
          "defaultValue": null,
          "description": "Number that controls the z-index of the popover element directly.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "portalRef": {
          "name": "portalRef",
          "defaultValue": null,
          "description": "A ref for the portal element",
          "required": false,
          "type": {
            "name": "MutableRefObject<HTMLElement>"
          },
          "tags": {}
        },
        "usePortal": {
          "name": "usePortal",
          "defaultValue": {
            "value": true
          },
          "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "portalClassName": {
          "name": "portalClassName",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "portalContainer": {
          "name": "portalContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "scrollContainer": {
          "name": "scrollContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        }
      },
      "BaseTransitionProps": {
        "onEnter": {
          "name": "onEnter",
          "defaultValue": null,
          "description": "Callback fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntering": {
          "name": "onEntering",
          "defaultValue": null,
          "description": "Callback fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntered": {
          "name": "onEntered",
          "defaultValue": null,
          "description": "Callback fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onExit": {
          "name": "onExit",
          "defaultValue": null,
          "description": "Callback fired before the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExiting": {
          "name": "onExiting",
          "defaultValue": null,
          "description": "Callback fired after the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExited": {
          "name": "onExited",
          "defaultValue": null,
          "description": "Callback fired after the \"exited\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of the MenuGroup."
    },
    "description": "# MenuGroup\n\n```\n<MenuGroup>\n<MenuGroup>Hello World!</MenuGroup>\n</MenuGroup>\n```",
    "methods": [],
    "displayName": "MenuGroup",
    "props": {
      "MenuGroupProps": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Content that will appear inside of MenuGroup component.",
          "required": true,
          "type": {
            "name": "`<MenuItem />` | `<SubMenu />` | `<MenuGroup />` | `<MenuSeparator />`"
          },
          "tags": {
            "type": "`<MenuItem />` | `<SubMenu />` | `<MenuGroup />` | `<MenuSeparator />`"
          }
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes"
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "MenuItem",
    "props": {
      "MenuItemProps": {
        "disabled": {
          "name": "disabled",
          "defaultValue": null,
          "description": "Determines whether or not the MenuItem is disabled.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "glyph": {
          "name": "glyph",
          "defaultValue": null,
          "description": "Slot to pass in an Icon rendered to the left of `MenuItem` text.",
          "required": false,
          "type": {
            "name": "`<Icon />` component"
          },
          "tags": {
            "type": "`<Icon />` component"
          }
        },
        "size": {
          "name": "size",
          "defaultValue": null,
          "description": "Size of the MenuItem component, can be `default` or `large`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Size",
            "value": [
              {
                "value": "\"default\""
              },
              {
                "value": "\"large\""
              }
            ]
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Content to appear inside of `<MenuItem />` component",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "active": {
          "name": "active",
          "defaultValue": null,
          "description": "Determines whether or not the MenuItem is active.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "description": {
          "name": "description",
          "defaultValue": null,
          "description": "Description element displayed below title in MenuItem.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "variant": {
          "name": "variant",
          "defaultValue": null,
          "description": "Variant of MenuItem",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Variant",
            "value": [
              {
                "value": "\"default\""
              },
              {
                "value": "\"destructive\""
              }
            ]
          },
          "tags": {}
        },
        "href": {
          "name": "href",
          "defaultValue": null,
          "description": "`href` is required for Anchor tags",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | NodeUrlLike | (NodeUrlLike & string)",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "NodeUrlLike",
                "description": "A mock of the @types/node URLObject.\nUsed by libraries like NextJS",
                "fullComment": "A mock of the @types/node URLObject.\nUsed by libraries like NextJS",
                "tags": {}
              },
              {
                "value": "NodeUrlLike & string"
              }
            ]
          },
          "tags": {}
        },
        "as": {
          "name": "as",
          "defaultValue": null,
          "description": "The component or element to render as",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 159 more ... | ComponentClass<...>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"center\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"search\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes"
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "MenuSeparator",
    "props": {
      "MenuSeparatorProps": {
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "className applied to `MenuSeparator` li",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "SubMenu",
    "props": {
      "SubMenuProps": {
        "open": {
          "name": "open",
          "defaultValue": null,
          "description": "Determines if `<SubMenu />` item appears open",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "setOpen": {
          "name": "setOpen",
          "defaultValue": null,
          "description": "Function to set the value of `open` in `<SubMenu />`",
          "required": false,
          "type": {
            "name": "(value: boolean) => void"
          },
          "tags": {}
        },
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "className applied to `SubMenu` root element",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "description": {
          "name": "description",
          "defaultValue": null,
          "description": "Content to appear below main text of SubMenu",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | ReactElement<any, string | JSXElementConstructor<any>>",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "disabled": {
          "name": "disabled",
          "defaultValue": null,
          "description": "Determines if `<SubMenu />` item appears disabled",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "active": {
          "name": "active",
          "defaultValue": null,
          "description": "Determines if `<SubMenu />` item appears active",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "glyph": {
          "name": "glyph",
          "defaultValue": null,
          "description": "Slot to pass in an Icon rendered to the left of `SubMenu` text.",
          "required": false,
          "type": {
            "name": "`<Icon />` component"
          },
          "tags": {
            "type": "`<Icon />` component"
          }
        },
        "title": {
          "name": "title",
          "defaultValue": null,
          "description": "Main text rendered in `SubMenu`.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Content rendered inside of `SubMenu`.",
          "required": false,
          "type": {
            "name": "`<MenuItem />` | `<SubMenu />` | `<MenuGroup />` | `<MenuSeparator />`"
          },
          "tags": {
            "type": "`<MenuItem />` | `<SubMenu />` | `<MenuGroup />` | `<MenuSeparator />`"
          }
        },
        "onClick": {
          "name": "onClick",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "MouseEventHandler<Element>"
          },
          "tags": {}
        },
        "onExited": {
          "name": "onExited",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "href": {
          "name": "href",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | (NodeUrlLike & string)",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "NodeUrlLike & string"
              }
            ]
          },
          "tags": {}
        },
        "size": {
          "name": "size",
          "defaultValue": null,
          "description": "Size of the MenuItem component, can be `default` or `large`. This size only affects the parent MenuItem, nested child MenuItems do not change.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Size",
            "value": [
              {
                "value": "\"default\""
              },
              {
                "value": "\"large\""
              }
            ]
          },
          "tags": {}
        },
        "as": {
          "name": "as",
          "defaultValue": null,
          "description": "The component or element to render as",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 159 more ... | ComponentClass<...>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"center\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"search\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      },
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "ButtonHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button",
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes"
    }
  }
]