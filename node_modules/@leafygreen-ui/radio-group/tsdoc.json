[
  {
    "tags": {
      "param": "props.disabled Boolean that determines if the Radio is disabled.\nprops.children Content that will appear inside of Radio.\nprops.value Used to determine what Radio is active.\nprops.id Id for Radio and respective label.\nprops.default If RadioGroup is uncontrolled, the default property makes this Radio checked on the initial render.\nprops.className className supplied to Radio container.\nprops.size Size of Radio buttons."
    },
    "description": "# Radio\n\nRadio component\n\n```\n<Radio value='radio-1'>Radio 1</Radio>\n```",
    "methods": [],
    "displayName": "Radio",
    "props": {
      "RadioProps": {
        "value": {
          "name": "value",
          "defaultValue": null,
          "description": "Used to determine what Radio is active.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          },
          "tags": {}
        },
        "default": {
          "name": "default",
          "defaultValue": null,
          "description": "If RadioGroup is uncontrolled, the default property makes this Radio checked on the initial render.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "disabled": {
          "name": "disabled",
          "defaultValue": {
            "value": false
          },
          "description": "Boolean that determines if the Radio is disabled.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Content that will appear inside of Radio.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "description": {
          "name": "description",
          "defaultValue": null,
          "description": "Description text rendered under the label.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      },
      "InputHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input",
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "RadioGroupProps": {
        "size": {
          "name": "size",
          "defaultValue": {
            "value": "default"
          },
          "description": "Determines the size of the Radio components Can be 'small' or 'default.\n(Use of xsmall should be limited to only Charts)",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Size",
            "value": [
              {
                "value": "\"xsmall\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"default\""
              }
            ]
          },
          "tags": {
            "default": "default"
          }
        },
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Determines whether or not the RadioGroup will appear in dark mode.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "bold": {
          "name": "bold",
          "defaultValue": null,
          "description": "Whether the label's font-weight is bold or regular.\nIf left `undefined` this prop will default to `true` if a description is provided,\notherwise defaults to `false`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of RadioGroup component.\nprops.onChange Callback to be executed when a Radio is selected.\nprops.value Radio that should appear checked. If value passed, component will be controlled by consumer.\nprops.className className applied to RadioGroup container.\nprops.name Name passed to each Radio belonging to the RadioGroup.\nprops.darkMode Determines whether or not the RadioGroup will appear in dark mode.\nprops.size Determines the size of the Radio components Can be 'small' or 'default."
    },
    "description": "\nRadioGroup component\n\n```\n<RadioGroup onChange={() => execute callback onChange}>\n<Radio value='Radio-1'>Radio 1</Radio>\n<Radio value='Radio-2'>Radio 2</Radio>\n</RadioGroup>\n```",
    "methods": [],
    "displayName": "RadioGroup",
    "props": {
      "RadioGroupProps": {
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Determines whether or not the RadioGroup will appear in dark mode.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "onChange": {
          "name": "onChange",
          "defaultValue": null,
          "description": "Callback to be executed when a Radio is selected.\nReceives the associated event object as the first argument.",
          "required": false,
          "type": {
            "name": "ChangeEventHandler<HTMLInputElement>"
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Content that will appear inside of RadioGroup component.\n\nCan be any node; however, only <Radio /> components, will be treated as belonging to the <RadioGroup /> compound component, and will receive internal state from <RadioGroup />",
          "required": true,
          "type": {
            "name": "`<Radio />`"
          },
          "tags": {
            "type": "`<Radio />`"
          }
        },
        "name": {
          "name": "name",
          "defaultValue": null,
          "description": "Name passed to each Radio belonging to the RadioGroup.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "value": {
          "name": "value",
          "defaultValue": null,
          "description": "Determines what radio will be checked on default. Component will be controlled if this prop is used.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          },
          "tags": {}
        },
        "size": {
          "name": "size",
          "defaultValue": {
            "value": "default"
          },
          "description": "Determines the size of the Radio components Can be 'small' or 'default.\n(Use of xsmall should be limited to only Charts)",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Size",
            "value": [
              {
                "value": "\"xsmall\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"default\""
              }
            ]
          },
          "tags": {
            "default": "default"
          }
        },
        "bold": {
          "name": "bold",
          "defaultValue": {
            "value": true
          },
          "description": "Whether the label's font-weight is bold or regular.\nIf left `undefined` this prop will default to `true` if a description is provided,\notherwise defaults to `false`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes"
    }
  }
]