{"version":3,"file":"index.js","sources":["../src/styles.tsx","../src/Body/Body.tsx","../src/utils/useUpdatedBaseFontSize.ts","../src/constants.ts","../src/Description/Description.styles.ts","../src/Disclaimer/Disclaimer.styles.ts","../src/Description/Description.tsx","../src/Error/Error.styles.ts","../src/Disclaimer/Disclaimer.tsx","../src/H1/H1.styles.ts","../src/H2/H2.styles.ts","../src/Error/Error.tsx","../src/H1/H1.tsx","../src/H3/H3.styles.ts","../src/H2/H2.tsx","../src/InlineCode/InlineCode.styles.ts","../src/H3/H3.tsx","../src/InlineKeyCode/InlineKeyCode.styles.ts","../src/InlineCode/InlineCode.tsx","../src/Label/Label.styles.ts","../src/InlineKeyCode/InlineKeyCode.tsx","../src/Link/shared.styles.ts","../src/Label/Label.tsx","../src/Link/BackLink/BackLink.styles.ts","../src/Link/Link/Link.styles.ts","../src/Overline/Overline.styles.ts","../src/Subtitle/Subtitle.styles.ts","../src/Link/BackLink/BackLink.tsx","../src/Link/Link/Link.types.ts","../src/Link/Link/Link.tsx","../src/Overline/Overline.tsx","../src/Subtitle/Subtitle.tsx","../src/utils/StaticWidthText.tsx"],"sourcesContent":["import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { BaseFontSize, fontFamilies, typeScales } from '@leafygreen-ui/tokens';\n\nexport const baseTypographyStyles = css`\n  margin: unset;\n  font-family: ${fontFamilies.default};\n  color: ${palette.black};\n`;\n\nexport const bodyTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: ${typeScales.body2.lineHeight}px;\n  `,\n} as const;\n\nexport const codeTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.code1.fontSize}px;\n    line-height: ${typeScales.code1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.code2.fontSize}px;\n    line-height: ${typeScales.code2.lineHeight}px;\n  `,\n} as const;\n\nexport const defaultTextColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.black};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\nimport { fontWeights as fontWeightTokens } from '@leafygreen-ui/tokens';\n\nimport {\n  baseTypographyStyles,\n  bodyTypeScaleStyles,\n  defaultTextColor,\n} from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport { BaseBodyProps } from './Body.types';\n\nconst Body = Polymorphic<BaseBodyProps>(\n  ({\n    baseFontSize: baseFontSizeOverride,\n    darkMode: darkModeProp,\n    className,\n    weight = 'regular',\n    as = 'p' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = usePolymorphic(as);\n\n    // Currently hardcoding selectors to keys; could consider a dynamic solution that runs once\n    const fontWeight = css`\n      font-weight: ${fontWeightTokens[weight]};\n      strong,\n      b {\n        font-weight: ${fontWeightTokens.bold};\n      }\n    `;\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          bodyTypeScaleStyles[baseFontSize],\n          defaultTextColor[theme],\n          fontWeight,\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nBody.displayName = 'Body';\n\nexport default Body;\n","import { useBaseFontSize } from '@leafygreen-ui/leafygreen-provider';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\n/**\n * A temporary wrapper around {@link useBaseFontSize}\n *\n * Returns a font size token consistent with the visual brand refresh.\n *\n * Once all components have been updated for the refresh,\n * this hook will be removed, and {@link useBaseFontSize} updated\n * to return the updated tokens.\n *\n * @param override: If the calling component accepts a `baseFontSize` prop, pass that prop into this hook to respect it\n * @deprecated\n * @internal\n * @returns - {@link BaseFontSize}\n */\nexport const useUpdatedBaseFontSize = (\n  override?: BaseFontSize | 14,\n): BaseFontSize => {\n  const baseFontSize = useBaseFontSize();\n  if (override)\n    return override === 16 ? BaseFontSize.Body2 : BaseFontSize.Body1;\n  return baseFontSize === 16 ? BaseFontSize.Body2 : BaseFontSize.Body1;\n};\n","export const LGIDS_TYPOGRAPHY = {\n  label: 'lg-label',\n  description: 'lg-description',\n} as const;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  BaseFontSize,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const descriptionStyle = css`\n  font-family: ${fontFamilies.default};\n  font-weight: ${fontWeights.regular};\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const descriptionColorStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light1};\n  `,\n};\n\nexport const disabledDescriptionColorStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.dark1};\n  `,\n};\n\nexport const descriptionTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: 20px; // Hardcoding because it does not match body2 lineHeight\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const disclaimerTextColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light1};\n  `,\n};\n\nexport const disclaimerStyles = css`\n  display: block;\n  font-size: 11px;\n  line-height: 16px;\n  letter-spacing: 0.2px;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { LGIDS_TYPOGRAPHY } from '../constants';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  descriptionColorStyle,\n  descriptionStyle,\n  descriptionTypeScaleStyles,\n  disabledDescriptionColorStyle,\n} from './Description.styles';\nimport { DescriptionProps } from './Description.types';\n\nexport const Description = ({\n  baseFontSize: baseFontSizeOverride,\n  'data-lgid': dataLgId = LGIDS_TYPOGRAPHY.description,\n  darkMode: darkModeProp,\n  disabled = false,\n  children,\n  className,\n  ...rest\n}: DescriptionProps) => {\n  const { theme } = useDarkMode(darkModeProp);\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n\n  return (\n    <p\n      data-lgid={dataLgId}\n      className={cx(\n        descriptionStyle,\n        descriptionColorStyle[theme],\n        descriptionTypeScaleStyles[baseFontSize],\n        {\n          [disabledDescriptionColorStyle[theme]]: disabled,\n        },\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </p>\n  );\n};\n\nDescription.displayName = 'Description';\n\nexport default Description;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  BaseFontSize,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const errorMessageStyle = css`\n  font-family: ${fontFamilies.default};\n  font-weight: ${fontWeights.regular};\n  font-size: inherit;\n  line-height: inherit;\n\n  // Unsets browser default margins\n  margin-block-start: 0;\n  margin-block-end: 0;\n`;\n\nexport const errorMessageModeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.red.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.red.light1};\n  `,\n};\n\nexport const errorMessageTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: 20px; // Hardcoding because it does not match body2 lineHeight\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { disclaimerStyles, disclaimerTextColor } from './Disclaimer.styles';\nimport { DisclaimerProps } from './Disclaimer.types';\n\nexport function Disclaimer({\n  darkMode: darkModeProp,\n  children,\n  className,\n  ...rest\n}: DisclaimerProps) {\n  const { theme } = useDarkMode(darkModeProp);\n\n  return (\n    <small\n      {...rest}\n      className={cx(\n        baseTypographyStyles,\n        disclaimerStyles,\n        disclaimerTextColor[theme],\n        className,\n      )}\n    >\n      {children}\n    </small>\n  );\n}\n\nDisclaimer.displayName = 'Disclaimer';\n\nexport default Disclaimer;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h1Styles = css`\n  font-weight: ${fontWeights.regular};\n  font-size: 48px;\n  line-height: 62px;\n  font-family: ${fontFamilies.serif};\n`;\n\nexport const h1Color: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.green.dark2};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h2Styles = css`\n  font-size: 32px;\n  line-height: 40px;\n  font-weight: ${fontWeights.regular};\n  font-family: ${fontFamilies.serif};\n`;\n\nexport const h2Color: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.green.dark2};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  errorMessageModeStyle,\n  errorMessageStyle,\n  errorMessageTypeScaleStyles,\n} from './Error.styles';\nimport { BaseErrorProps } from './Error.types';\n\nconst Error = Polymorphic<BaseErrorProps>(\n  ({\n    as = 'p' as PolymorphicAs,\n    darkMode: darkModeProp,\n    children,\n    className,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize();\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        {...rest}\n        className={cx(\n          errorMessageStyle,\n          errorMessageModeStyle[theme],\n          errorMessageTypeScaleStyles[baseFontSize],\n          className,\n        )}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nexport default Error;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { h1Color, h1Styles } from './H1.styles';\nimport { BaseH1Props } from './H1.types';\n\nconst H1 = Polymorphic<BaseH1Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h1' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h1Styles,\n          h1Color[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH1.displayName = 'H1';\n\nexport default H1;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h3Styles = css`\n  font-size: 24px;\n  line-height: 32px;\n  font-weight: ${fontWeights.medium};\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { h2Color, h2Styles } from './H2.styles';\nimport { BaseH2Props } from './H2.types';\n\nconst H2 = Polymorphic<BaseH2Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h2' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h2Styles,\n          h2Color[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH2.displayName = 'H2';\n\nexport default H2;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { focusRing, fontFamilies } from '@leafygreen-ui/tokens';\n\nexport const anchorClassName = createUniqueClassName();\n\nexport const code = css`\n  display: inline;\n  transition: all 0.15s ease-in-out;\n  border-radius: 3px;\n  font-family: ${fontFamilies.code};\n  line-height: 20px;\n\n  .${anchorClassName}:hover > & {\n    text-decoration: none;\n  }\n`;\n\nexport const codeModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${palette.gray.light3};\n    border: 1px solid ${palette.gray.light2};\n    color: ${palette.gray.dark3};\n\n    .${anchorClassName}:hover > & {\n      box-shadow: 0 0 0 3px ${palette.gray.light2};\n      border: 1px solid ${palette.gray.light1};\n    }\n  `,\n\n  [Theme.Dark]: css`\n    background-color: transparent;\n    border: 1px solid ${palette.gray.dark2};\n    color: ${palette.gray.light1};\n\n    .${anchorClassName}:hover > & {\n      box-shadow: 0 0 0 3px ${palette.gray.dark2};\n      border: 1px solid ${palette.gray.dark1};\n    }\n  `,\n};\n\nexport const codeFocusModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    .${anchorClassName}:focus-visible > & {\n      box-shadow: ${focusRing[Theme.Light].default};\n      border: 1px solid ${palette.blue.base};\n    }\n  `,\n\n  [Theme.Dark]: css`\n    .${anchorClassName}:focus-visible > & {\n      box-shadow: ${focusRing[Theme.Dark].default};\n      border: 1px solid ${palette.blue.base};\n    }\n  `,\n};\n\nexport const codeLinkStyleModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.blue.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.blue.light1};\n  `,\n};\n\nexport const codeLinkWrapper = css`\n  text-decoration: none;\n  margin: 0;\n  padding: 0;\n  line-height: 20px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const nowrap = css`\n  white-space: nowrap;\n`;\n\nexport const normal = css`\n  white-space: normal;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { h3Styles } from './H3.styles';\nimport { BaseH3Props } from './H3.types';\n\nconst H3 = Polymorphic<BaseH3Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h3' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h3Styles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH3.displayName = 'H3';\n\nexport default H3;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies } from '@leafygreen-ui/tokens';\n\nexport const inlineKeyCodeStyles = css`\n  font-family: ${fontFamilies.code};\n  border: 1px solid;\n  border-radius: 3px;\n  padding-left: 5px;\n  padding-right: 5px;\n`;\n\nexport const inlineKeyCodeColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.black};\n    border-color: ${palette.gray.dark3};\n    background-color: ${palette.white};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n    border-color: ${palette.gray.base};\n    background-color: ${palette.gray.dark3};\n  `,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\nimport { codeTypeScaleStyles } from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  anchorClassName,\n  code,\n  codeFocusModes,\n  codeLinkStyleModes,\n  codeLinkWrapper,\n  codeModes,\n  normal,\n  nowrap,\n} from './InlineCode.styles';\nimport { BaseInlineCodeProps } from './InlineCode.types';\n\nconst InlineCode = InferredPolymorphic<BaseInlineCodeProps, 'code'>(\n  (\n    {\n      children,\n      className,\n      darkMode: darkModeProp,\n      baseFontSize: baseFontSizeOverride,\n      as,\n      ...rest\n    },\n    forwardedRef,\n  ) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = useInferredPolymorphic(as, rest, 'code');\n\n    const whiteSpace =\n      ((typeof children === 'string' && children.match(/./gu)?.length) ?? 0) <=\n      30\n        ? nowrap\n        : normal;\n    const needsWrapper = Component !== 'code';\n\n    const renderedInlineCode = (\n      <code\n        ref={forwardedRef}\n        className={cx(\n          codeTypeScaleStyles[baseFontSize],\n          code,\n          codeModes[theme],\n          codeFocusModes[theme],\n          whiteSpace,\n          {\n            [codeLinkStyleModes[theme]]: needsWrapper,\n          },\n          className,\n        )}\n      >\n        {children}\n      </code>\n    );\n\n    if (needsWrapper) {\n      return (\n        <Component\n          className={cx(anchorClassName, codeLinkWrapper, className)}\n          {...rest}\n        >\n          {renderedInlineCode}\n        </Component>\n      );\n    }\n\n    return React.cloneElement(renderedInlineCode, rest);\n  },\n);\n\nInlineCode.displayName = 'InlineCode';\nInlineCode.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  darkMode: PropTypes.bool,\n  baseFontSize: PropTypes.oneOf(Object.values(BaseFontSize)),\n};\n\nexport default InlineCode;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  BaseFontSize,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const labelStyle = css`\n  font-family: ${fontFamilies.default};\n  font-weight: ${fontWeights.bold};\n`;\n\nexport const labelColorStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.black};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n\nexport const disabledLabelColorStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.dark1};\n  `,\n};\n\nexport const labelTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: 20px; // Hardcoding because it does not match body2 lineHeight\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { codeTypeScaleStyles } from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  inlineKeyCodeColor,\n  inlineKeyCodeStyles,\n} from './InlineKeyCode.styles';\nimport { InlineKeyCodeProps } from './InlineKeyCode.types';\n\nfunction InlineKeyCode({\n  baseFontSize: baseFontSizeOverride,\n  darkMode: darkModeProp,\n  children,\n  className,\n  ...rest\n}: InlineKeyCodeProps) {\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n  const { theme } = useDarkMode(darkModeProp);\n\n  return (\n    <code\n      className={cx(\n        inlineKeyCodeStyles,\n        inlineKeyCodeColor[theme],\n        codeTypeScaleStyles[baseFontSize],\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </code>\n  );\n}\n\nInlineKeyCode.displayName = 'InlineKeyCode';\n\nexport default InlineKeyCode;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  BaseFontSize,\n  fontFamilies,\n  fontWeights,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nimport { bodyTypeScaleStyles } from '../styles';\n\nexport const anchorClassName = createUniqueClassName();\n\nexport const linkStyles = css`\n  font-family: ${fontFamilies.default};\n  display: inline-flex;\n  align-items: center;\n  text-decoration: none;\n  text-decoration-color: transparent;\n  cursor: pointer;\n  font-size: inherit;\n  line-height: inherit;\n  appearance: none;\n  background: none;\n  border: none;\n  padding: 0;\n\n  &:hover,\n  &:focus {\n    text-decoration: underline;\n    transition: text-decoration ${transitionDuration.default}ms ease-in-out;\n    text-underline-offset: 4px;\n    text-decoration-thickness: 2px;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const linkModeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.blue.base};\n    font-weight: ${fontWeights.regular};\n\n    &:hover {\n      text-decoration-color: ${palette.gray.light2};\n    }\n\n    &:focus {\n      text-decoration-color: ${palette.blue.base};\n    }\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.blue.light1};\n    font-weight: ${fontWeights.bold};\n\n    &:hover {\n      text-decoration-color: ${palette.gray.dark2};\n    }\n\n    &:focus {\n      text-decoration-color: ${palette.blue.base};\n    }\n  `,\n};\n\nexport const linkScaleStyles = (baseFontSize?: BaseFontSize) => {\n  if (baseFontSize) {\n    return bodyTypeScaleStyles[baseFontSize];\n  }\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { LGIDS_TYPOGRAPHY } from '../constants';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  disabledLabelColorStyle,\n  labelColorStyle,\n  labelStyle,\n  labelTypeScaleStyles,\n} from './Label.styles';\nimport { BaseLabelProps } from './Label.types';\n\nexport const Label = Polymorphic<BaseLabelProps>(\n  ({\n    baseFontSize: baseFontSizeOverride,\n    darkMode: darkModeProp,\n    className,\n    children,\n    disabled = false,\n    as = 'label' as PolymorphicAs,\n    'data-lgid': dataLgId = LGIDS_TYPOGRAPHY.label,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        data-lgid={dataLgId}\n        className={cx(\n          labelStyle,\n          labelColorStyle[theme],\n          labelTypeScaleStyles[baseFontSize],\n          { [disabledLabelColorStyle[theme]]: disabled },\n          className,\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nLabel.displayName = 'Label';\n\nexport default Label;\n","import { css } from '@leafygreen-ui/emotion';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const backLinkBaseStyles = css`\n  gap: ${spacing[100]}px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\n\nimport { anchorClassName } from '../shared.styles';\n\nexport const arrowRightIconPersist = css`\n  transform: translate3d(3px, 0, 0);\n`;\n\nexport const arrowRightIconHover = css`\n  opacity: 0;\n  transform: translate3d(-3px, 0, 0);\n  transition: 100ms ease-in;\n  transition-property: opacity, transform;\n\n  .${anchorClassName}:hover & {\n    opacity: 1;\n    transform: translate3d(3px, 0, 0);\n  }\n`;\n\nexport const openInNewTabStyles = css`\n  position: relative;\n  bottom: 4px;\n  left: -1px;\n  height: 12px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const overlineStyles = css`\n  font-size: 12px;\n  font-weight: ${fontWeights.bold};\n  text-transform: uppercase;\n  line-height: 20px;\n  letter-spacing: 0.4px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const subtitleStyles = css`\n  font-size: 18px;\n  line-height: 24px;\n  font-weight: ${fontWeights.bold};\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport ArrowLeftIcon from '@leafygreen-ui/icon/dist/ArrowLeft';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../../utils/useUpdatedBaseFontSize';\nimport {\n  anchorClassName,\n  linkModeStyles,\n  linkScaleStyles,\n  linkStyles,\n} from '../shared.styles';\n\nimport { backLinkBaseStyles } from './BackLink.styles';\nimport { BaseBackLinkProps } from './BackLink.types';\n\nconst BackLink = InferredPolymorphic<BaseBackLinkProps, 'span'>(\n  (\n    {\n      children,\n      className,\n      baseFontSize: baseFontSizeOverride,\n      darkMode: darkModeProp,\n      as,\n      ...rest\n    },\n    fwdRef,\n  ) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = useInferredPolymorphic(as, rest, 'span');\n\n    return (\n      <Component\n        className={cx(\n          anchorClassName,\n          linkStyles,\n          linkScaleStyles(baseFontSize),\n          linkModeStyles[theme],\n          backLinkBaseStyles,\n          className,\n        )}\n        ref={fwdRef}\n        {...rest}\n      >\n        <ArrowLeftIcon role=\"presentation\" />\n\n        {children}\n      </Component>\n    );\n  },\n);\n\nexport default BackLink;\n","import {\n  InferredPolymorphicProps,\n  PolymorphicAs,\n} from '@leafygreen-ui/polymorphic';\n\nimport { ResponsiveTypographyProps } from '../../types';\n\nconst ArrowAppearance = {\n  Hover: 'hover',\n  Persist: 'persist',\n  None: 'none',\n} as const;\n\ntype ArrowAppearance = (typeof ArrowAppearance)[keyof typeof ArrowAppearance];\n\nexport { ArrowAppearance };\n\nexport interface BaseLinkProps extends ResponsiveTypographyProps {\n  /**\n   * Displays a right arrow adjacent to the anchor tag. When set to `persist` the arrow will always be present. When set to `hover`, the arrow will only appear when hovering over the arrow.\n   */\n  arrowAppearance?: ArrowAppearance;\n  /**\n   * Hides the external icon when the current host name is different from the host of the destination URL\n   */\n  hideExternalIcon?: boolean;\n}\n\n// For external consumption only\nexport type LinkProps<T extends PolymorphicAs = PolymorphicAs> =\n  InferredPolymorphicProps<T, BaseLinkProps>;\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport ArrowRightIcon from '@leafygreen-ui/icon/dist/ArrowRight';\nimport OpenNewTabIcon from '@leafygreen-ui/icon/dist/OpenNewTab';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  InferredPolymorphic,\n  PolymorphicProps,\n  PolymorphicPropsWithRef,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../../utils/useUpdatedBaseFontSize';\nimport {\n  anchorClassName,\n  linkModeStyles,\n  linkScaleStyles,\n  linkStyles,\n} from '../shared.styles';\n\nimport {\n  arrowRightIconHover,\n  arrowRightIconPersist,\n  openInNewTabStyles,\n} from './Link.styles';\nimport { ArrowAppearance, BaseLinkProps } from './Link.types';\n\ntype LinkRenderProps = PolymorphicPropsWithRef<'span', BaseLinkProps>;\n\ntype AnchorLikeProps = PolymorphicProps<'a', BaseLinkProps>;\n\nconst hasAnchorLikeProps = (\n  props: LinkRenderProps | AnchorLikeProps,\n): props is AnchorLikeProps => {\n  return (props as AnchorLikeProps).href !== undefined;\n};\n\nconst Link = InferredPolymorphic<BaseLinkProps, 'span'>(\n  (\n    {\n      children,\n      className,\n      arrowAppearance = ArrowAppearance.None,\n      hideExternalIcon = false,\n      baseFontSize: baseFontSizeOverride,\n      darkMode: darkModeProp,\n      as,\n      ...rest\n    },\n    fwdRef,\n  ) => {\n    const [currentHostname, setCurrentHostname] = useState('');\n    useEffect(() => {\n      setCurrentHostname(window.location.hostname);\n    }, []);\n\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = useInferredPolymorphic(as, rest, 'span');\n\n    const hrefHostname = useMemo(() => {\n      if (hasAnchorLikeProps(rest)) {\n        const httpRegex = /^http(s)?:\\/\\//;\n        return httpRegex.test(rest.href)\n          ? new URL(rest.href).hostname\n          : currentHostname;\n      }\n    }, [rest, currentHostname]);\n\n    let icon;\n\n    const defaultAnchorProps: Pick<\n      JSX.IntrinsicElements['a'],\n      'target' | 'rel'\n    > = {\n      target: undefined,\n      rel: undefined,\n    };\n\n    if ((rest as AnchorLikeProps).target || (rest as AnchorLikeProps).rel) {\n      defaultAnchorProps.target = (rest as AnchorLikeProps).target;\n      defaultAnchorProps.rel = (rest as AnchorLikeProps).rel;\n    } else if (Component === 'a') {\n      // Sets defaults for target and rel props when Component is an anchor tag\n      if (hrefHostname === currentHostname) {\n        defaultAnchorProps.target = '_self';\n      } else {\n        // Open in new tab\n        defaultAnchorProps.target = '_blank';\n        defaultAnchorProps.rel = 'noopener noreferrer';\n      }\n    }\n\n    if (defaultAnchorProps.target === '_blank' && !hideExternalIcon) {\n      icon = (\n        <OpenNewTabIcon role=\"presentation\" className={openInNewTabStyles} />\n      );\n    } else if (arrowAppearance !== ArrowAppearance.None) {\n      icon = (\n        <ArrowRightIcon\n          role=\"presentation\"\n          size={12}\n          className={cx({\n            [arrowRightIconHover]: arrowAppearance === ArrowAppearance.Hover,\n            [arrowRightIconPersist]:\n              arrowAppearance === ArrowAppearance.Persist,\n          })}\n        />\n      );\n    }\n\n    return (\n      <Component\n        className={cx(\n          anchorClassName,\n          linkStyles,\n          linkScaleStyles(baseFontSize),\n          linkModeStyles[theme],\n          className,\n        )}\n        ref={fwdRef}\n        {...defaultAnchorProps}\n        {...rest}\n      >\n        <span>{children}</span>\n\n        {icon}\n      </Component>\n    );\n  },\n);\n\nexport default Link;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { overlineStyles } from './Overline.styles';\nimport { BaseOverlineProps } from './Overline.types';\n\nexport const Overline = Polymorphic<BaseOverlineProps>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'div' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          overlineStyles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nOverline.displayName = 'Overline';\n\nexport default Overline;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { subtitleStyles } from './Subtitle.styles';\nimport { BaseSubtitleProps } from './Subtitle.types';\n\nconst Subtitle = Polymorphic<BaseSubtitleProps>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h6' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          subtitleStyles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nSubtitle.displayName = 'Subtitle';\n\nexport default Subtitle;\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { getNodeTextContent } from '@leafygreen-ui/lib';\nimport {\n  Polymorph,\n  PolymorphicAs,\n  PolymorphicPropsWithRef,\n} from '@leafygreen-ui/polymorphic';\n\ninterface LocalProps {\n  /**\n   * The maximum future weight of the text. Determines the width of the component.\n   * @default 700\n   */\n  maxFontWeight?: React.CSSProperties['fontWeight'];\n  /**\n   * Defines the pseudo element used to force the element width\n   */\n  pseudoElement?: 'before' | 'after';\n}\n\ntype StaticWidthTextProps<T extends PolymorphicAs> = PolymorphicPropsWithRef<\n  T,\n  LocalProps\n>;\n\nconst staticWidthTextStyle = ({\n  pseudoElement,\n  maxFontWeight,\n}: Pick<StaticWidthTextProps<any>, 'pseudoElement' | 'maxFontWeight'>) => {\n  const pseudoSelector = `&:${pseudoElement}`;\n\n  return css`\n    /* Inherit relevant properties from the parent */\n    font-weight: inherit;\n    font-size: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    position: relative;\n    display: inline-flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: center;\n    text-decoration: none;\n    min-width: 0;\n    max-width: 100%;\n\n    ${pseudoSelector} {\n      content: attr(data-text);\n      height: 0;\n      font-weight: ${maxFontWeight};\n      visibility: hidden;\n      overflow: hidden;\n      user-select: none;\n      pointer-events: none;\n    }\n  `;\n};\n\nconst childWrapper = css`\n  flex: 1;\n  min-width: 0;\n  max-width: 100%;\n\n  white-space: inherit;\n  overflow: inherit;\n  text-overflow: inherit;\n`;\n\n/**\n *\n * A wrapper component to ensure that updating the font weight does not affect the width of the element,\n * and prevents layout shift should the font weight change.\n *\n * Useful for showing a bold effect on hover, focus, or active (See `Tabs`, `MenuItem`).\n *\n * Will add an ellipsis if the text would extend beyond the parent,\n * or if the bold text is significantly larger than the regular text\n * (This is rare, and will only occur with _very_ long text)\n *\n * Note: does not support wrapped text (i.e. text within a paragraph)\n *\n * @internal\n *\n */\nexport function StaticWidthText<T extends PolymorphicAs = 'span'>({\n  as,\n  children,\n  maxFontWeight = 700,\n  pseudoElement = 'after',\n  className,\n  ...rest\n}: StaticWidthTextProps<T>) {\n  // calling getNodeTextContent in case a node gets passed in without TS\n  const textContent = getNodeTextContent(children);\n  return (\n    <Polymorph\n      className={cx(\n        staticWidthTextStyle({ pseudoElement, maxFontWeight }),\n        className,\n      )}\n      as={as ?? ('span' as PolymorphicAs)}\n      data-text={textContent}\n      {...rest}\n    >\n      <span className={childWrapper}>{children}</span>\n    </Polymorph>\n  );\n}\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","baseTypographyStyles","css","_taggedTemplateLiteral","fontFamilies","default","palette","black","bodyTypeScaleStyles","_defineProperty","BaseFontSize","Body1","typeScales","body1","fontSize","lineHeight","Body2","body2","codeTypeScaleStyles","code1","code2","defaultTextColor","Theme","Light","Dark","gray","light2","useUpdatedBaseFontSize","override","baseFontSize","useBaseFontSize","_excluded","Body","Polymorphic","_ref","baseFontSizeOverride","darkModeProp","darkMode","className","_ref$weight","weight","_ref$as","as","rest","_objectWithoutProperties","theme","useDarkMode","Component","usePolymorphic","fontWeight","fontWeightTokens","fontWeights","bold","React","createElement","_extends","cx","displayName","LGIDS_TYPOGRAPHY","label","description","descriptionStyle","regular","descriptionColorStyle","dark1","light1","disabledDescriptionColorStyle","base","descriptionTypeScaleStyles","Description","_ref$dataLgid","dataLgId","_ref$disabled","disabled","children","disclaimerTextColor","disclaimerStyles","Disclaimer","errorMessageStyle","errorMessageModeStyle","red","errorMessageTypeScaleStyles","Error","h1Styles","serif","h1Color","green","dark2","H1","h2Styles","h2Color","H2","_templateObject8","_templateObject9","_templateObject10","h3Styles","medium","H3","anchorClassName","createUniqueClassName","code","codeModes","light3","dark3","codeFocusModes","focusRing","blue","codeLinkStyleModes","codeLinkWrapper","nowrap","normal","InlineCode","InferredPolymorphic","forwardedRef","_ref2","_children$match","useInferredPolymorphic","whiteSpace","match","length","needsWrapper","renderedInlineCode","ref","cloneElement","propTypes","PropTypes","node","string","bool","oneOf","Object","values","inlineKeyCodeStyles","inlineKeyCodeColor","white","InlineKeyCode","labelStyle","labelColorStyle","disabledLabelColorStyle","labelTypeScaleStyles","Label","linkStyles","transitionDuration","linkModeStyles","linkScaleStyles","backLinkBaseStyles","spacing","BackLink","fwdRef","ArrowLeftIcon","role","arrowRightIconPersist","arrowRightIconHover","openInNewTabStyles","ArrowAppearance","Link","_ref$arrowAppearance","arrowAppearance","_ref$hideExternalIcon","hideExternalIcon","_useState2","_slicedToArray","useState","currentHostname","setCurrentHostname","useEffect","window","location","hostname","icon","hrefHostname","useMemo","undefined","href","test","URL","defaultAnchorProps","target","rel","ArrowRightIcon","size","OpenNewTabIcon","overlineStyles","Overline","subtitleStyles","Subtitle","staticWidthTextStyle","pseudoElement","maxFontWeight","pseudoSelector","concat","childWrapper","_ref2$maxFontWeight","_ref2$pseudoElement","textContent","getNodeTextContent","Polymorph"],"mappings":"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"}