{"version":3,"file":"index.js","sources":["../../src/Notch/Notch.tsx","../../src/Tooltip/tooltipConstants.ts","../../src/Tooltip/Tooltip.styles.ts","../../src/Tooltip/tooltipUtils.tsx","../../src/Tooltip/Tooltip.tsx","../../src/Tooltip/Tooltip.types.ts"],"sourcesContent":["import * as React from 'react';\n\nfunction SvgNotch(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={26}\n      height={8}\n      fill=\"#001E2B\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 26 8\"\n      {...props}\n    >\n      <path d=\"M27 0H-1v1h.699a10 10 0 017.26 3.123l1.685 1.78a6 6 0 008.712 0l1.686-1.78A10 10 0 0126.302 1H27V0z\" />\n    </svg>\n  );\n}\n\nexport default SvgNotch;\n","export const notchHeight = 8;\nexport const notchWidth = 26;\nexport const borderRadius = 16;\n","import { transparentize } from 'polished';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  fontFamilies,\n  fontWeights,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nimport { borderRadius, notchWidth } from './tooltipConstants';\n\n// The typographic styles below are largely copied from the Body component.\n// We can't use the Body component here due to it rendering a paragraph tag,\n// Which would conflict with any children passed to it containing a div.\nexport const baseTypeStyle = css`\n  margin: unset;\n  font-family: ${fontFamilies.default};\n  color: ${palette.gray.light1};\n  font-weight: ${fontWeights.regular};\n  width: 100%;\n  overflow-wrap: anywhere;\n`;\n\nexport const baseStyles = css`\n  display: flex;\n  align-items: center;\n  border-radius: ${borderRadius}px;\n  padding: 12px ${borderRadius}px;\n  box-shadow: 0px 2px 4px -1px ${transparentize(0.85, palette.black)};\n  cursor: default;\n  width: fit-content;\n  max-width: 256px;\n`;\n\nexport const positionRelative = css`\n  position: relative;\n`;\n\nexport const colorSet = {\n  [Theme.Light]: {\n    tooltip: css`\n      background-color: ${palette.black};\n      color: ${palette.gray.light1};\n    `,\n    children: css`\n      color: inherit;\n    `,\n    notchFill: palette.black,\n  },\n  [Theme.Dark]: {\n    tooltip: css`\n      background-color: ${palette.gray.light2};\n      color: ${palette.black};\n    `,\n    children: css`\n      color: inherit;\n    `,\n    notchFill: palette.gray.light2,\n  },\n};\n\nexport const minSize = notchWidth + 2 * borderRadius;\nexport const minHeightStyle = css`\n  min-height: ${minSize}px;\n`;\n\nexport const transitionDelay = css`\n  transition-delay: ${transitionDuration.slowest}ms;\n`;\n","import clamp from 'lodash/clamp';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { Align, ElementPosition, Justify } from '@leafygreen-ui/popover';\n\nimport { borderRadius, notchHeight, notchWidth } from './tooltipConstants';\n\ninterface NotchPositionStylesArgs {\n  align: Align;\n  justify: Justify;\n  triggerRect: ElementPosition | DOMRect | ClientRect | null;\n}\n\nexport function notchPositionStyles({\n  align,\n  justify,\n  triggerRect,\n}: NotchPositionStylesArgs) {\n  if (!align || !justify || !triggerRect) {\n    return {\n      notchContainer: '',\n      notch: '',\n      tooltip: '',\n    };\n  }\n\n  const containerSize = notchWidth;\n  const notchOverlap = -(containerSize - notchHeight) / 2;\n\n  type Styles = 'left' | 'right' | 'top' | 'bottom' | 'margin' | 'transform';\n  const notchStyleObj: Partial<Record<Styles, string>> = {};\n  const containerStyleObj: Partial<Record<Styles, string>> = {};\n\n  /**\n   * The bounds used to clamp the notchOffset value.\n   * Should match the border-radius of the tooltip\n   */\n  const notchOffsetLowerBound = borderRadius;\n\n  /**\n   * This number is somewhat \"magical\", but adjusted for the Tooltip alignment.\n   * Calculating the exact value needed here requires setting a ref on the Tooltip content wrapper, and getting the height / width of it.\n   * The problem was that the height / width changes when the open prop is set, causing the notch to lose its positioning before the tooltip transitions out in some cases.\n   */\n  let notchOffsetUpperBound = notchOffsetLowerBound * 2;\n\n  /**\n   * The un-clamped value that would exactly center the tooltip notch relative to the trigger.\n   */\n  let notchOffsetActual: number;\n\n  /**\n   * The clamped value that makes a best-attempt to center the notch relative to the trigger,\n   * while also ensuring that the notch is positioned within the bounds of the tooltip itself,\n   * and still has the appearance of an alignment.\n   */\n  let notchOffset = 0;\n\n  /**\n   * Boolean derived from the notchOffsetActual and notchOffsetLowerBound that determines if the trigger\n   * is small enough to make a transformation of the tooltip itself necessary.\n   */\n  let shouldTransformPosition: boolean;\n\n  /**\n   * When the trigger is smaller than the minimum offset we require to position the notch over the trigger,\n   * we calculate a transformation to apply to the entire tooltip so that the notch centers on that element.\n   * This is particularly important for things like icons, and icon buttons where without this transformation,\n   * the tooltip's notch could be positioned entirely off of the trigger.\n   */\n  let tooltipOffsetTransform = '';\n\n  switch (align) {\n    case 'top':\n    case 'bottom':\n      notchOffsetUpperBound = notchOffsetLowerBound * 3;\n      notchOffsetActual = triggerRect.width / 2 - containerSize / 2;\n      notchOffset = clamp(\n        notchOffsetActual,\n        notchOffsetLowerBound,\n        notchOffsetUpperBound,\n      );\n      shouldTransformPosition = notchOffsetActual <= notchOffsetLowerBound;\n\n      notchStyleObj.left = `0px`;\n      notchStyleObj.right = `0px`;\n\n      if (align === 'top') {\n        containerStyleObj.top = 'calc(100% - 1px)';\n        notchStyleObj.top = `${notchOverlap}px`;\n      } else {\n        containerStyleObj.bottom = 'calc(100% - 1px)';\n        notchStyleObj.bottom = `${notchOverlap}px`;\n        notchStyleObj.transform = `rotate(180deg)`;\n      }\n\n      switch (justify) {\n        case Justify.Start:\n          containerStyleObj.left = `${notchOffset}px`;\n\n          if (shouldTransformPosition) {\n            tooltipOffsetTransform = `translateX(-${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n\n          break;\n\n        case Justify.Middle:\n          containerStyleObj.left = '0px';\n          containerStyleObj.right = '0px';\n\n          break;\n\n        case Justify.Fit:\n          containerStyleObj.left = `${notchOffset}px`;\n\n          if (shouldTransformPosition) {\n            tooltipOffsetTransform = `translateX(-${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n\n          break;\n\n        case Justify.End:\n          containerStyleObj.right = `${notchOffset}px`;\n\n          if (shouldTransformPosition) {\n            tooltipOffsetTransform = `translateX(${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n\n          break;\n      }\n\n      break;\n\n    case 'left':\n    case 'right':\n      notchOffsetUpperBound = notchOffsetLowerBound * 2;\n      notchOffsetActual = triggerRect.height / 2 - containerSize / 2;\n      notchOffset = clamp(\n        notchOffsetActual,\n        notchOffsetLowerBound,\n        notchOffsetUpperBound,\n      );\n      shouldTransformPosition = notchOffsetActual <= notchOffsetLowerBound;\n\n      notchStyleObj.top = `0px`;\n      notchStyleObj.bottom = `0px`;\n\n      if (align === 'left') {\n        containerStyleObj.left = 'calc(100% - 1px)';\n        notchStyleObj.left = `${notchOverlap}px`;\n        notchStyleObj.transform = `rotate(-90deg)`;\n      } else {\n        containerStyleObj.right = 'calc(100% - 1px)';\n        notchStyleObj.right = `${notchOverlap}px`;\n        notchStyleObj.transform = `rotate(90deg)`;\n      }\n\n      switch (justify) {\n        case Justify.Start:\n          containerStyleObj.top = `${notchOffset}px`;\n\n          if (shouldTransformPosition) {\n            tooltipOffsetTransform = `translateY(-${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n\n          break;\n\n        case Justify.Middle:\n          containerStyleObj.top = '0px';\n          containerStyleObj.bottom = '0px';\n          break;\n\n        case Justify.Fit:\n          containerStyleObj.top = `${notchOffset}px`;\n\n          if (shouldTransformPosition) {\n            tooltipOffsetTransform = `translateY(-${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n          break;\n\n        case Justify.End:\n          containerStyleObj.bottom = `${notchOffset}px`;\n\n          if (shouldTransformPosition) {\n            tooltipOffsetTransform = `translateY(${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n\n          break;\n      }\n\n      break;\n  }\n\n  return {\n    notchContainer: css`\n      position: absolute;\n      width: ${containerSize}px;\n      height: ${containerSize}px;\n      overflow: hidden;\n      margin: auto;\n      pointer-events: none;\n      ${css(containerStyleObj)};\n    `,\n    notch: css`\n      ${css(notchStyleObj)};\n      position: absolute;\n      width: ${notchWidth}px;\n      height: ${notchWidth}px; // Keep it square. Rotating is simpler\n      margin: 0;\n    `,\n    tooltip: css`\n      min-width: ${notchOffset * 2 + containerSize}px;\n      transform: ${tooltipOffsetTransform};\n    `,\n  };\n}\n","import React, {\n  isValidElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { flushSync } from 'react-dom';\nimport debounce from 'lodash/debounce';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport {\n  useBackdropClick,\n  useEscapeKey,\n  useIdAllocator,\n} from '@leafygreen-ui/hooks';\nimport { isComponentGlyph } from '@leafygreen-ui/icon';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport Popover, { Justify } from '@leafygreen-ui/popover';\nimport {\n  bodyTypeScaleStyles,\n  useUpdatedBaseFontSize,\n} from '@leafygreen-ui/typography';\n\nimport SvgNotch from '../Notch';\n\nimport {\n  baseStyles,\n  baseTypeStyle,\n  colorSet,\n  minHeightStyle,\n  positionRelative,\n  transitionDelay,\n} from './Tooltip.styles';\nimport {\n  Align,\n  PopoverFunctionParameters,\n  TooltipProps,\n  TriggerEvent,\n} from './Tooltip.types';\nimport { notchPositionStyles } from './tooltipUtils';\n\nconst stopClickPropagation = (evt: React.MouseEvent) => {\n  evt.stopPropagation();\n};\n\n/**\n * # Tooltip\n *\n * Tooltip component\n *\n * ```\n<Tooltip\n  align='top'\n  justify='start'\n  trigger={<button>trigger</button>}\n  triggerEvent='hover'\n>\n  I am an uncontrolled Tooltip!\n</Tooltip>\n```\n * @param props.children Content to appear inside of Tooltip.\n * @param props.open Boolean to describe whether or not Tooltip is open.\n * @param props.setOpen Callback to change the open state of the Tooltip.\n * @param props.darkMode Whether the Tooltip will appear in dark mode.\n * @param props.className Classname applied to Tooltip.\n * @param props.align Alignment of Tooltip relative to trigger: `top`, `bottom`, `left`, `right`.\n * @param props.justify Justification of Tooltip relative to trigger: `start`, `middle`, `end`.\n * @param props.trigger Trigger element can be ReactNode or function.\n * @param props.triggerEvent Whether the Tooltip should be triggered by a `click` or `hover`.\n * @param props.id id given to Tooltip content.\n * @param props.usePortal Determines whether or not Tooltip will be Portaled\n * @param props.portalClassName Classname applied to root element of the portal.\n * @param props.portalRef A ref for the portal element\n * @param props.onClose Callback that is fired when the tooltip is closed.\n */\nfunction Tooltip({\n  initialOpen = false,\n  open: controlledOpen,\n  setOpen: controlledSetOpen,\n  darkMode: darkThemeProp,\n  baseFontSize: baseFontSizeOverride,\n  triggerEvent = TriggerEvent.Hover,\n  enabled = true,\n  align = 'top',\n  justify = 'start',\n  spacing = 12,\n  usePortal = true,\n  onClose = () => {},\n  id,\n  shouldClose,\n  portalClassName,\n  portalContainer,\n  portalRef,\n  scrollContainer,\n  popoverZIndex,\n  refEl,\n  className,\n  children,\n  trigger,\n  ...rest\n}: TooltipProps) {\n  const isControlled = typeof controlledOpen === 'boolean';\n  const [uncontrolledOpen, uncontrolledSetOpen] = useState(initialOpen);\n  const size = useUpdatedBaseFontSize(baseFontSizeOverride);\n  const open = isControlled ? controlledOpen : uncontrolledOpen;\n  // typescript is not recognizing isControlled checks that controlledSetOpen exists\n  const setOpen =\n    isControlled && controlledSetOpen ? controlledSetOpen : uncontrolledSetOpen;\n\n  const tooltipRef = useRef<HTMLDivElement>(null);\n\n  const existingId = id ?? tooltipRef.current?.id;\n  const tooltipId = useIdAllocator({ prefix: 'tooltip', id: existingId });\n  const { darkMode: localDarkMode, theme } = useDarkMode(darkThemeProp);\n\n  useEffect(() => {\n    // If consumer is using Icon or Glyph component as trigger, the tooltip will not be visible as these components do not render their children\n    if (trigger && isValidElement(trigger) && isComponentGlyph(trigger)) {\n      console.warn(\n        'Using a LeafyGreenUI Icon or Glyph component as a trigger will not render a Tooltip, as these components do not render their children. To use, please wrap your trigger element in another HTML tag.',\n      );\n    }\n  }, [trigger]);\n\n  const handleClose = useCallback(() => {\n    if (typeof shouldClose !== 'function' || shouldClose()) {\n      onClose();\n      setOpen(false);\n    }\n  }, [setOpen, shouldClose, onClose]);\n\n  const createTriggerProps = useCallback(\n    (triggerEvent: TriggerEvent, triggerProps?: any) => {\n      switch (triggerEvent) {\n        case TriggerEvent.Hover:\n          return {\n            onMouseEnter: debounce((e: MouseEvent) => {\n              userTriggerHandler('onMouseEnter', e);\n              // Without this the tooltip sometimes opens without a transition. flushSync prevents this state update from automatically batching. Instead updates are made synchronously.\n              // https://react.dev/reference/react-dom/flushSync#flushing-updates-for-third-party-integrations\n              flushSync(() => {\n                setOpen(true);\n              });\n            }, 35),\n            onMouseLeave: debounce((e: MouseEvent) => {\n              userTriggerHandler('onMouseLeave', e);\n              handleClose();\n            }, 35),\n            onFocus: (e: MouseEvent) => {\n              userTriggerHandler('onFocus', e);\n              setOpen(true);\n            },\n            onBlur: (e: MouseEvent) => {\n              userTriggerHandler('onBlur', e);\n              handleClose();\n            },\n          };\n        case TriggerEvent.Click:\n        default:\n          return {\n            onClick: (e: MouseEvent) => {\n              // ensure that we don't close the tooltip when content inside tooltip is clicked\n              if (e.target !== tooltipRef.current) {\n                userTriggerHandler('onClick', e);\n                setOpen((curr: boolean) => !curr);\n              }\n            },\n          };\n      }\n\n      function userTriggerHandler(handler: string, e: MouseEvent): void {\n        // call any click handlers already on the trigger\n        if (\n          triggerProps &&\n          triggerProps[handler] &&\n          typeof triggerProps[handler] == 'function'\n        )\n          triggerProps[handler](e);\n      }\n    },\n    [handleClose, setOpen, tooltipRef],\n  );\n\n  useEscapeKey(handleClose, { enabled: open });\n\n  useBackdropClick(handleClose, [tooltipRef], open && triggerEvent === 'click');\n\n  const popoverProps = {\n    refEl,\n    popoverZIndex,\n    ...(usePortal\n      ? {\n          spacing,\n          usePortal,\n          portalClassName,\n          portalContainer,\n          portalRef,\n          scrollContainer,\n        }\n      : { spacing, usePortal }),\n  };\n\n  const active = enabled && open;\n  const isLeftOrRightAligned = ['left', 'right'].includes(align);\n\n  const tooltip = (\n    <Popover\n      key=\"tooltip\"\n      active={active}\n      align={align}\n      justify={justify}\n      adjustOnMutation={true}\n      onClick={stopClickPropagation}\n      className={cx(transitionDelay, {\n        [css`\n          // Try to fit all the content on one line (until it hits max-width)\n          // Overrides default behavior, which is to set width to size of the trigger.\n          // Except when justify is set to fit because the width should be the size of the trigger.\n          // Another exception is when justify is set to fit and the alignment is either left or right. In this case only the height should be the size of the trigger so we still want the width to fit the max content.\n          width: max-content;\n        `]:\n          justify !== Justify.Fit ||\n          (justify === Justify.Fit &&\n            (align === Align.Left || align === Align.Right)),\n      })}\n      {...popoverProps}\n    >\n      {({ align, justify, referenceElPos }: PopoverFunctionParameters) => {\n        const {\n          notchContainer: notchContainerStyle,\n          notch: notchStyle,\n          tooltip: tooltipNotchStyle,\n        } = notchPositionStyles({\n          align,\n          justify,\n          triggerRect: referenceElPos,\n        });\n\n        return (\n          // Establish a new DarkMode context so any LG components inherit the correct value\n          // (since tooltip backgrounds are inverse to the outer context's theme)\n          <LeafyGreenProvider darkMode={!localDarkMode}>\n            <div\n              role=\"tooltip\"\n              {...rest}\n              id={tooltipId}\n              className={cx(\n                baseStyles,\n                tooltipNotchStyle,\n                colorSet[theme].tooltip,\n                {\n                  [minHeightStyle]: isLeftOrRightAligned,\n                },\n                className,\n              )}\n              ref={tooltipRef}\n            >\n              <div\n                className={cx(\n                  baseTypeStyle,\n                  bodyTypeScaleStyles[size],\n                  colorSet[theme].children,\n                )}\n              >\n                {children}\n              </div>\n\n              <div className={notchContainerStyle}>\n                <SvgNotch\n                  className={cx(notchStyle)}\n                  fill={colorSet[theme].notchFill}\n                />\n              </div>\n            </div>\n          </LeafyGreenProvider>\n        );\n      }}\n    </Popover>\n  );\n\n  if (trigger) {\n    if (typeof trigger === 'function') {\n      return trigger({\n        ...createTriggerProps(triggerEvent),\n        className: positionRelative,\n        'aria-describedby': active ? tooltipId : undefined,\n        children: tooltip,\n      });\n    }\n\n    return React.cloneElement(trigger, {\n      ...createTriggerProps(triggerEvent, trigger.props),\n      'aria-describedby': active ? tooltipId : undefined,\n      children: (\n        <>\n          {trigger.props.children}\n          {tooltip}\n        </>\n      ),\n      className: cx(positionRelative, trigger.props.className),\n    });\n  }\n\n  return tooltip;\n}\n\nTooltip.displayName = 'Tooltip';\n\nTooltip.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  align: PropTypes.oneOf(Object.values(Align)),\n  justify: PropTypes.oneOf(Object.values(Justify)),\n  trigger: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  triggerEvent: PropTypes.oneOf(Object.values(TriggerEvent)),\n  darkMode: PropTypes.bool,\n  enabled: PropTypes.bool,\n  open: PropTypes.bool,\n  setOpen: PropTypes.func,\n  id: PropTypes.string,\n  shouldClose: PropTypes.func,\n  usePortal: PropTypes.bool,\n  portalClassName: PropTypes.string,\n  portalRef: PropTypes.shape({\n    current:\n      typeof window !== 'undefined'\n        ? PropTypes.instanceOf(Element)\n        : PropTypes.any,\n  }),\n};\n\nexport default Tooltip;\n","import React from 'react';\n\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\nimport {\n  Align as PopoverAlign,\n  ElementPosition,\n  Justify,\n  PopoverProps,\n} from '@leafygreen-ui/popover';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\nexport const TriggerEvent = {\n  Hover: 'hover',\n  Click: 'click',\n} as const;\n\nexport type TriggerEvent = (typeof TriggerEvent)[keyof typeof TriggerEvent];\n\nexport const Align = {\n  Top: PopoverAlign.Top,\n  Bottom: PopoverAlign.Bottom,\n  Left: PopoverAlign.Left,\n  Right: PopoverAlign.Right,\n} as const;\n\nexport type Align = Exclude<\n  PopoverAlign,\n  'center-vertical' | 'center-horizontal'\n>;\n\nexport { Justify };\n\nexport interface PopoverFunctionParameters {\n  align: PopoverAlign;\n  justify: Justify;\n  referenceElPos: ElementPosition;\n}\n\ntype ModifiedPopoverProps = Omit<\n  PopoverProps,\n  'active' | 'adjustOnMutation' | 'children' | 'align'\n>;\n\nexport type TooltipProps = Omit<\n  HTMLElementProps<'div'>,\n  keyof ModifiedPopoverProps\n> &\n  ModifiedPopoverProps & {\n    /**\n     * Determines the alignment of the popover content relative to the trigger element\n     *\n     * @default 'top'\n     */\n    align?: Align;\n    /**\n     * A slot for the element used to trigger the `Tooltip`.\n     *\n     * Note: The component passed as `trigger` _must_ accept and render `children`,\n     * even if the general use of the component does not require children.\n     * The `tooltip` content is rendered (via `Popover`) as a child of the trigger,\n     * and if the trigger does not render any children, then the trigger will not be rendered.\n     */\n    trigger?: React.ReactElement | Function;\n\n    /**\n     * Determines if a `hover` or `click` event will trigger the opening of a `Tooltip`.\n     * @default 'hover'\n     */\n    triggerEvent?: TriggerEvent;\n\n    /**\n     * Provides an initial value to uncontrolled open/setOpen state\n     * @default `false`\n     */\n    initialOpen?: boolean;\n\n    /**\n     * Controls component and determines the open state of the `Tooltip`\n     * @default `false`\n     */\n    open?: boolean;\n\n    /**\n     * Callback to change the open state of the `Tooltip`.\n     */\n    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;\n\n    /**\n     * Whether the `Tooltip` will appear in dark mode.\n     * @default false\n     */\n    darkMode?: boolean;\n\n    /**\n     * id given to `Tooltip` content.\n     */\n    id?: string;\n\n    /**\n     * Callback to determine whether or not `Tooltip` should close when user tries to close it.\n     *\n     */\n    shouldClose?: () => boolean;\n\n    /**\n     * Enables Tooltip to trigger based on the event specified by `triggerEvent`.\n     * @default true\n     */\n    enabled?: boolean;\n\n    /**\n     * Callback that is called when the tooltip is closed internally. E.g. on ESC press, on backdrop click, on blur.\n     *\n     */\n    onClose?: () => void;\n\n    /**\n     * Allows consuming applications to override font-size as set by the LeafyGreen Provider.\n     *\n     */\n    baseFontSize?: BaseFontSize;\n  };\n"],"names":["SvgNotch","props","React","createElement","_extends","width","height","fill","xmlns","viewBox","d","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","notchHeight","notchWidth","borderRadius","baseTypeStyle","css","_taggedTemplateLiteral","fontFamilies","default","palette","gray","light1","fontWeights","regular","baseStyles","transparentize","black","positionRelative","colorSet","_defineProperty","Theme","Light","tooltip","children","notchFill","Dark","light2","minSize","minHeightStyle","transitionDelay","transitionDuration","slowest","TriggerEvent","Hover","Click","Align","Top","PopoverAlign","Bottom","Left","Right","_excluded","stopClickPropagation","evt","stopPropagation","Tooltip","_ref","_tooltipRef$current","_ref$initialOpen","initialOpen","controlledOpen","open","controlledSetOpen","setOpen","darkThemeProp","darkMode","baseFontSizeOverride","baseFontSize","_ref$triggerEvent","triggerEvent","_ref$enabled","enabled","_ref$align","align","_ref$justify","justify","_ref$spacing","spacing","_ref$usePortal","usePortal","_ref$onClose","onClose","id","shouldClose","portalClassName","portalContainer","portalRef","scrollContainer","popoverZIndex","refEl","className","trigger","rest","_objectWithoutProperties","isControlled","_useState2","_slicedToArray","useState","uncontrolledOpen","uncontrolledSetOpen","size","useUpdatedBaseFontSize","tooltipRef","useRef","existingId","current","tooltipId","useIdAllocator","prefix","_useDarkMode","useDarkMode","localDarkMode","theme","useEffect","isValidElement","isComponentGlyph","console","warn","handleClose","useCallback","createTriggerProps","triggerProps","onMouseEnter","debounce","e","userTriggerHandler","flushSync","onMouseLeave","onFocus","onBlur","onClick","target","curr","handler","useEscapeKey","useBackdropClick","popoverProps","_objectSpread","active","isLeftOrRightAligned","includes","Popover","key","adjustOnMutation","cx","Justify","Fit","_ref2","_notchPositionStyles","triggerRect","notchContainer","notch","notchOffsetActual","shouldTransformPosition","containerSize","notchOverlap","notchStyleObj","containerStyleObj","notchOffsetLowerBound","notchOffsetUpperBound","notchOffset","tooltipOffsetTransform","clamp","left","right","top","concat","bottom","transform","Start","Middle","End","notchPositionStyles","referenceElPos","notchContainerStyle","notchStyle","tooltipNotchStyle","LeafyGreenProvider","role","ref","bodyTypeScaleStyles","undefined","cloneElement","Fragment","displayName","propTypes","PropTypes","node","string","oneOf","Object","values","oneOfType","func","bool","shape","window","instanceOf","Element","any"],"mappings":"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"}