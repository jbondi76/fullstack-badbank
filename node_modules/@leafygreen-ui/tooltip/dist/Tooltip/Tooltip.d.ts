import PropTypes from 'prop-types';
import { TooltipProps } from './Tooltip.types';
/**
 * # Tooltip
 *
 * Tooltip component
 *
 * ```
<Tooltip
  align='top'
  justify='start'
  trigger={<button>trigger</button>}
  triggerEvent='hover'
>
  I am an uncontrolled Tooltip!
</Tooltip>
```
 * @param props.children Content to appear inside of Tooltip.
 * @param props.open Boolean to describe whether or not Tooltip is open.
 * @param props.setOpen Callback to change the open state of the Tooltip.
 * @param props.darkMode Whether the Tooltip will appear in dark mode.
 * @param props.className Classname applied to Tooltip.
 * @param props.align Alignment of Tooltip relative to trigger: `top`, `bottom`, `left`, `right`.
 * @param props.justify Justification of Tooltip relative to trigger: `start`, `middle`, `end`.
 * @param props.trigger Trigger element can be ReactNode or function.
 * @param props.triggerEvent Whether the Tooltip should be triggered by a `click` or `hover`.
 * @param props.id id given to Tooltip content.
 * @param props.usePortal Determines whether or not Tooltip will be Portaled
 * @param props.portalClassName Classname applied to root element of the portal.
 * @param props.portalRef A ref for the portal element
 * @param props.onClose Callback that is fired when the tooltip is closed.
 */
declare function Tooltip({ initialOpen, open: controlledOpen, setOpen: controlledSetOpen, darkMode: darkThemeProp, baseFontSize: baseFontSizeOverride, triggerEvent, enabled, align, justify, spacing, usePortal, onClose, id, shouldClose, portalClassName, portalContainer, portalRef, scrollContainer, popoverZIndex, refEl, className, children, trigger, ...rest }: TooltipProps): any;
declare namespace Tooltip {
    var displayName: string;
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        align: PropTypes.Requireable<"top" | "bottom" | "left" | "right">;
        justify: PropTypes.Requireable<"start" | "middle" | "end" | "fit">;
        trigger: PropTypes.Requireable<NonNullable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>>;
        triggerEvent: PropTypes.Requireable<"hover" | "click">;
        darkMode: PropTypes.Requireable<boolean>;
        enabled: PropTypes.Requireable<boolean>;
        open: PropTypes.Requireable<boolean>;
        setOpen: PropTypes.Requireable<(...args: any[]) => any>;
        id: PropTypes.Requireable<string>;
        shouldClose: PropTypes.Requireable<(...args: any[]) => any>;
        usePortal: PropTypes.Requireable<boolean>;
        portalClassName: PropTypes.Requireable<string>;
        portalRef: PropTypes.Requireable<PropTypes.InferProps<{
            current: PropTypes.Requireable<any>;
        }>>;
    };
}
export default Tooltip;
//# sourceMappingURL=Tooltip.d.ts.map