[
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "SvgNotch",
    "props": {
      "SVGAttributes": "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes"
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of Tooltip.\nprops.open Boolean to describe whether or not Tooltip is open.\nprops.setOpen Callback to change the open state of the Tooltip.\nprops.darkMode Whether the Tooltip will appear in dark mode.\nprops.className Classname applied to Tooltip.\nprops.align Alignment of Tooltip relative to trigger: `top`, `bottom`, `left`, `right`.\nprops.justify Justification of Tooltip relative to trigger: `start`, `middle`, `end`.\nprops.trigger Trigger element can be ReactNode or function.\nprops.triggerEvent Whether the Tooltip should be triggered by a `click` or `hover`.\nprops.id id given to Tooltip content.\nprops.usePortal Determines whether or not Tooltip will be Portaled\nprops.portalClassName Classname applied to root element of the portal.\nprops.portalRef A ref for the portal element\nprops.onClose Callback that is fired when the tooltip is closed."
    },
    "description": "# Tooltip\n\nTooltip component\n\n```\n<Tooltip\nalign='top'\njustify='start'\ntrigger={<button>trigger</button>}\ntriggerEvent='hover'\n>\nI am an uncontrolled Tooltip!\n</Tooltip>\n```",
    "methods": [],
    "displayName": "Tooltip",
    "props": {
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "TooltipProps": {
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "Class name applied to popover container.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "onClick": {
          "name": "onClick",
          "defaultValue": null,
          "description": "Click event handler passed to the root div element within the portal container.",
          "required": false,
          "type": {
            "name": "MouseEventHandler<Element>"
          },
          "tags": {}
        },
        "contentClassName": {
          "name": "contentClassName",
          "defaultValue": null,
          "description": "Class name applied to the popover content container",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "justify": {
          "name": "justify",
          "defaultValue": {
            "value": "start"
          },
          "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Justify",
            "value": [
              {
                "value": "\"middle\""
              },
              {
                "value": "\"start\""
              },
              {
                "value": "\"end\""
              },
              {
                "value": "\"fit\""
              }
            ]
          },
          "tags": {}
        },
        "refEl": {
          "name": "refEl",
          "defaultValue": null,
          "description": "A reference to the element against which the popover component will be positioned.",
          "required": false,
          "type": {
            "name": "RefObject<HTMLElement>"
          },
          "tags": {}
        },
        "spacing": {
          "name": "spacing",
          "defaultValue": {
            "value": 12
          },
          "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "popoverZIndex": {
          "name": "popoverZIndex",
          "defaultValue": null,
          "description": "Number that controls the z-index of the popover element directly.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "usePortal": {
          "name": "usePortal",
          "defaultValue": {
            "value": true
          },
          "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "portalClassName": {
          "name": "portalClassName",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "portalContainer": {
          "name": "portalContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "portalRef": {
          "name": "portalRef",
          "defaultValue": null,
          "description": "A ref for the portal element",
          "required": false,
          "type": {
            "name": "MutableRefObject<HTMLElement>"
          },
          "tags": {}
        },
        "scrollContainer": {
          "name": "scrollContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "align": {
          "name": "align",
          "defaultValue": {
            "value": "top"
          },
          "description": "Determines the alignment of the popover content relative to the trigger element",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Align",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"right\""
              }
            ]
          },
          "tags": {
            "default": "'top'"
          }
        },
        "trigger": {
          "name": "trigger",
          "defaultValue": null,
          "description": "A slot for the element used to trigger the `Tooltip`.\n\nNote: The component passed as `trigger` _must_ accept and render `children`,\neven if the general use of the component does not require children.\nThe `tooltip` content is rendered (via `Popover`) as a child of the trigger,\nand if the trigger does not render any children, then the trigger will not be rendered.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Function | ReactElement<any, string | JSXElementConstructor<any>>",
            "value": [
              {
                "value": "Function",
                "description": "Creates a new function.",
                "fullComment": "Creates a new function.",
                "tags": {}
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "triggerEvent": {
          "name": "triggerEvent",
          "defaultValue": {
            "value": "hover"
          },
          "description": "Determines if a `hover` or `click` event will trigger the opening of a `Tooltip`.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "TriggerEvent",
            "value": [
              {
                "value": "\"hover\""
              },
              {
                "value": "\"click\""
              }
            ]
          },
          "tags": {
            "default": "'hover'"
          }
        },
        "initialOpen": {
          "name": "initialOpen",
          "defaultValue": {
            "value": false
          },
          "description": "Provides an initial value to uncontrolled open/setOpen state",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "`false`"
          }
        },
        "open": {
          "name": "open",
          "defaultValue": {
            "value": "`false`"
          },
          "description": "Controls component and determines the open state of the `Tooltip`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "`false`"
          }
        },
        "setOpen": {
          "name": "setOpen",
          "defaultValue": null,
          "description": "Callback to change the open state of the `Tooltip`.",
          "required": false,
          "type": {
            "name": "Dispatch<SetStateAction<boolean>>"
          },
          "tags": {}
        },
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Whether the `Tooltip` will appear in dark mode.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "shouldClose": {
          "name": "shouldClose",
          "defaultValue": null,
          "description": "Callback to determine whether or not `Tooltip` should close when user tries to close it.",
          "required": false,
          "type": {
            "name": "() => boolean"
          },
          "tags": {}
        },
        "enabled": {
          "name": "enabled",
          "defaultValue": {
            "value": true
          },
          "description": "Enables Tooltip to trigger based on the event specified by `triggerEvent`.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "true"
          }
        },
        "onClose": {
          "name": "onClose",
          "defaultValue": {
            "value": "() => {}"
          },
          "description": "Callback that is called when the tooltip is closed internally. E.g. on ESC press, on backdrop click, on blur.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": null,
          "description": "Allows consuming applications to override font-size as set by the LeafyGreen Provider.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BaseFontSize",
            "value": [
              {
                "value": "13"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {}
        }
      },
      "BaseTransitionProps": {
        "onEnter": {
          "name": "onEnter",
          "defaultValue": null,
          "description": "Callback fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntering": {
          "name": "onEntering",
          "defaultValue": null,
          "description": "Callback fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntered": {
          "name": "onEntered",
          "defaultValue": null,
          "description": "Callback fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onExit": {
          "name": "onExit",
          "defaultValue": null,
          "description": "Callback fired before the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExiting": {
          "name": "onExiting",
          "defaultValue": null,
          "description": "Callback fired after the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExited": {
          "name": "onExited",
          "defaultValue": null,
          "description": "Callback fired after the \"exited\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        }
      }
    }
  }
]