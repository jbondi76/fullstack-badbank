[
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "GuideCue",
    "props": {
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "BaseTransitionProps": {
        "onEnter": {
          "name": "onEnter",
          "defaultValue": null,
          "description": "Callback fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntering": {
          "name": "onEntering",
          "defaultValue": null,
          "description": "Callback fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntered": {
          "name": "onEntered",
          "defaultValue": null,
          "description": "Callback fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onExit": {
          "name": "onExit",
          "defaultValue": null,
          "description": "Callback fired before the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExiting": {
          "name": "onExiting",
          "defaultValue": null,
          "description": "Callback fired after the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExited": {
          "name": "onExited",
          "defaultValue": null,
          "description": "Callback fired after the \"exited\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        }
      },
      "GuideCueProps": {
        "contentClassName": {
          "name": "contentClassName",
          "defaultValue": null,
          "description": "Class name applied to the popover content container",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "spacing": {
          "name": "spacing",
          "defaultValue": null,
          "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "popoverZIndex": {
          "name": "popoverZIndex",
          "defaultValue": null,
          "description": "Number that controls the z-index of the popover element directly.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "portalClassName": {
          "name": "portalClassName",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "portalContainer": {
          "name": "portalContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "portalRef": {
          "name": "portalRef",
          "defaultValue": null,
          "description": "A ref for the portal element",
          "required": false,
          "type": {
            "name": "MutableRefObject<HTMLElement>"
          },
          "tags": {}
        },
        "scrollContainer": {
          "name": "scrollContainer",
          "defaultValue": null,
          "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {}
        },
        "enabled": {
          "name": "enabled",
          "defaultValue": {
            "value": "true"
          },
          "description": "Enables Tooltip to trigger based on the event specified by `triggerEvent`.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "true"
          }
        },
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": null,
          "description": "Allows consuming applications to override font-size as set by the LeafyGreen Provider.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BaseFontSize",
            "value": [
              {
                "value": "13"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {}
        },
        "open": {
          "name": "open",
          "defaultValue": {
            "value": "false"
          },
          "description": "Determines if the `Tooltip` will appear as open or close.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "setOpen": {
          "name": "setOpen",
          "defaultValue": null,
          "description": "Callback to change the open state of the Tooltip.",
          "required": true,
          "type": {
            "name": "Dispatch<SetStateAction<boolean>>"
          },
          "tags": {}
        },
        "refEl": {
          "name": "refEl",
          "defaultValue": null,
          "description": "Reference to an element that the tooltip should be positioned against.",
          "required": true,
          "type": {
            "name": "RefObject<HTMLElement>"
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "Body content to appear inside the tooltip, under the title.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "tooltipClassName": {
          "name": "tooltipClassName",
          "defaultValue": null,
          "description": "ClassName to be applied to the tooltip element.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "buttonText": {
          "name": "buttonText",
          "defaultValue": null,
          "description": "Text to appear inside the primary button. The default text for the stand-alone tooltip is `Got it`. The default text for the multi-step tooltip varies on the `numberOfSteps` and `currentStep`. If `numberOfSteps === currentStep` the text is `Got it` else it is `Next.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "onDismiss": {
          "name": "onDismiss",
          "defaultValue": {
            "value": "() => {}"
          },
          "description": "Callback fired when the dismiss(X) button is clicked or when the `Esc` key is pressed. This only applies to the multi-step tooltip.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onPrimaryButtonClick": {
          "name": "onPrimaryButtonClick",
          "defaultValue": {
            "value": "() => {}"
          },
          "description": "Callback fired when the primary button is clicked. This applies to both the stand-alone and multi-step tooltip. This is also fired when the `Esc` key is pressed in the stand-alone tooltip.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "tooltipAlign": {
          "name": "tooltipAlign",
          "defaultValue": {
            "value": "Align.Top"
          },
          "description": "Determines the alignment of the tooltip.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "TooltipAlign",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"right\""
              }
            ]
          },
          "tags": {
            "default": "'top'"
          }
        },
        "tooltipJustify": {
          "name": "tooltipJustify",
          "defaultValue": {
            "value": "Justify.Middle"
          },
          "description": "Determines the justification of the tooltip.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "TooltipJustify",
            "value": [
              {
                "value": "\"start\""
              },
              {
                "value": "\"middle\""
              },
              {
                "value": "\"end\""
              }
            ]
          },
          "tags": {
            "default": "'middle'"
          }
        },
        "beaconAlign": {
          "name": "beaconAlign",
          "defaultValue": {
            "value": "Align.CenterHorizontal"
          },
          "description": "Determines the alignment of the beacon(animated pulsing circle that appears on top of the trigger element). This only applies to the multi-step tooltip.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Align",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"center-vertical\""
              },
              {
                "value": "\"center-horizontal\""
              }
            ]
          },
          "tags": {
            "default": "'center-horizontal'"
          }
        }
      },
      "StandaloneProps": {
        "numberOfSteps": {
          "name": "numberOfSteps",
          "defaultValue": null,
          "description": "Used to determine which tooltip will be shown. If `numberOfSteps > 1` then the multi-step tooltip will be shown else the stand-alone tooltip will be shown. This number will only be displayed in the multi-step tooltip.",
          "required": true,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "currentStep": {
          "name": "currentStep",
          "defaultValue": {
            "value": 1
          },
          "description": "Used to display the current step. If `numberOfSteps === 1` this number will not display.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        }
      },
      "DarkModeProps": {
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Renders the component with dark mode styles.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        }
      }
    }
  }
]