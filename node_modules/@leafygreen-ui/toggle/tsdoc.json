[
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "getTestUtils",
    "props": {
      "String": "",
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => string"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "Toggle",
    "props": {
      "BaseToggleProps": {
        "disabled": {
          "name": "disabled",
          "defaultValue": {
            "value": false
          },
          "description": "Disables the Toggle.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "Adds a className to the outermost element.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "onChange": {
          "name": "onChange",
          "defaultValue": null,
          "description": "`onChange` fires when the internally-managed `checked` state of the component is updated. Receives the updated checked state of the toggle as its first argument, and the associated mouse event as the second.",
          "required": false,
          "type": {
            "name": "(checked: boolean, mouseEvent: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
          },
          "tags": {}
        },
        "size": {
          "name": "size",
          "defaultValue": {
            "value": "default"
          },
          "description": "Sets the size of the toggle.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Size",
            "value": [
              {
                "value": "\"default\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"xsmall\""
              }
            ]
          },
          "tags": {
            "default": "'default'"
          }
        },
        "checked": {
          "name": "checked",
          "defaultValue": null,
          "description": "Sets the checked state of the Toggle.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        }
      },
      "ButtonHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button",
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "DarkModeProps": {
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Renders the component with dark mode styles.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        }
      },
      "LgIdProps": {
        "data-lgid": {
          "name": "data-lgid",
          "defaultValue": null,
          "description": "LG test id passed to the component wrapper.",
          "required": false,
          "type": {
            "name": "`lg-${string}`"
          },
          "tags": {}
        }
      }
    }
  }
]