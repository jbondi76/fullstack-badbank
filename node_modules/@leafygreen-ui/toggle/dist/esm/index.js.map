{"version":3,"file":"index.js","sources":["../../src/constants.ts","../../src/Toggle/styles.ts","../../src/Toggle/types.ts","../../src/Toggle/Toggle.tsx","../../src/utils/getTestUtils/getTestUtils.ts"],"sourcesContent":["const LGID_ROOT = 'lg-toggle';\n\nexport const LGIDS_TOGGLE = {\n  root: LGID_ROOT,\n} as const;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  focusRing,\n  hoverRing,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nimport { Size } from './types';\n\nexport const toggleButtonClassName = createUniqueClassName('toggle-button');\n\nexport const buttonSelectors = {\n  checked: `.${toggleButtonClassName}[aria-checked=\"true\"]`,\n  unchecked: `.${toggleButtonClassName}[aria-checked=\"false\"]`,\n  disabled: `.${toggleButtonClassName}:disabled`,\n};\n\nexport const sliderSelector = {\n  checked: `${buttonSelectors.checked} > &`,\n  unchecked: `${buttonSelectors.unchecked} > &`,\n  disabled: `${buttonSelectors.disabled} > &`,\n};\n\nexport const checkmarkSelector = {\n  checked: `${buttonSelectors.checked}:not(:disabled) &`,\n  unchecked: `${buttonSelectors.unchecked}:not(:disabled) &`,\n  disabledChecked: `${buttonSelectors.checked}:disabled &`,\n  disabledUnchecked: `${buttonSelectors.unchecked}:disabled &`,\n};\n\nexport const buttonBaseStyles = css`\n  transition: ${transitionDuration.default}ms all ease-in-out,\n    0s background-color linear;\n  display: inline-block;\n  flex-shrink: 0;\n  position: relative;\n  padding: 0;\n  border-radius: 50px;\n  border: 1px solid;\n  cursor: pointer;\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &[aria-checked='true'] {\n    transition-delay: ${transitionDuration.default}ms;\n\n    &:before {\n      transform: scale(1);\n      opacity: 1;\n    }\n  }\n\n  // We're animating this pseudo-element in order to give the toggle groove\n  // background an animation in and out.\n  &:before {\n    content: '';\n    transition: ${transitionDuration.default}ms all ease-in-out;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-radius: 50px;\n    opacity: 0;\n    transform: scale(0.85);\n  }\n\n  &:disabled:before {\n    opacity: 0;\n  }\n`;\n\nexport const sliderBaseStyles = css`\n  transition: all ${transitionDuration.default}ms ease-in-out;\n  border-radius: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  overflow: hidden;\n  transform: translate3d(0, 0, 0);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:before,\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n\n  ${sliderSelector.disabled} {\n    &:before,\n    &:after {\n      content: none;\n    }\n  }\n`;\n\nexport const buttonSizeStyles: Record<Size, string> = {\n  [Size.Default]: css`\n    height: 32px;\n    width: 56px;\n  `,\n\n  [Size.Small]: css`\n    height: 22px;\n    width: 40px;\n  `,\n\n  [Size.XSmall]: css`\n    height: 14px;\n    width: 24px;\n  `,\n};\n\nexport const sliderSizeStyles: Record<Size, string> = {\n  [Size.Default]: css`\n    height: 28px;\n    width: 28px;\n    left: 1px;\n\n    ${sliderSelector.checked} {\n      transform: translate3d(24px, 0, 0);\n    }\n  `,\n\n  [Size.Small]: css`\n    height: 18px;\n    width: 18px;\n    left: 1px;\n\n    ${sliderSelector.checked} {\n      transform: translate3d(18px, 0, 0);\n    }\n  `,\n\n  [Size.XSmall]: css`\n    height: 12px;\n    width: 12px;\n\n    ${sliderSelector.checked} {\n      transform: translate3d(10px, 0, 0);\n    }\n  `,\n};\n\nexport const buttonThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    &[aria-checked='false']:not(:disabled) {\n      background-color: ${palette.gray.base};\n      border-color: ${palette.gray.base};\n    }\n\n    &[aria-checked='true'] {\n      // We set background-color here to avoid a small issue with overflow clipping\n      // that makes this look less seamless than it should.\n      background-color: ${palette.blue.base};\n      border-color: ${palette.blue.base};\n    }\n\n    &:disabled {\n      background-color: ${palette.gray.light2};\n      border-color: ${palette.gray.light2};\n    }\n\n    &:before {\n      background-color: ${palette.blue.base};\n    }\n\n    &:hover:not(:disabled) {\n      box-shadow: ${hoverRing.light.gray};\n    }\n\n    &:focus-visible:not(:disabled) {\n      box-shadow: ${focusRing.light.default};\n    }\n  `,\n  [Theme.Dark]: css`\n    &[aria-checked='false']:not(:disabled) {\n      background-color: ${palette.gray.dark1};\n      border-color: ${palette.gray.dark1};\n    }\n\n    &[aria-checked='true'] {\n      // We set background-color here to avoid a small issue with overflow clipping\n      // that makes this look less seamless than it should.\n      background-color: ${palette.blue.light1};\n      border-color: ${palette.blue.light1};\n    }\n\n    &:disabled {\n      background-color: ${palette.gray.dark2};\n      border-color: ${palette.gray.dark2};\n    }\n\n    &:before {\n      background-color: ${palette.blue.light1};\n    }\n\n    &:hover:not(:disabled) {\n      box-shadow: ${hoverRing.dark.gray};\n    }\n\n    &:focus-visible:not(:disabled) {\n      box-shadow: ${focusRing.dark.default};\n    }\n  `,\n};\n\nexport const sliderThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${palette.white};\n\n    ${sliderSelector.disabled} {\n      background-color: ${palette.gray.light3};\n    }\n  `,\n  [Theme.Dark]: css`\n    background-color: ${palette.white};\n\n    ${sliderSelector.disabled} {\n      background-color: ${palette.gray.dark1};\n    }\n  `,\n};\n\nexport const checkmarkBaseStyles = css`\n  display: flex;\n  transition: color ${transitionDuration.default}ms ease-in-out;\n`;\n\nexport const checkmarkThemeStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    ${checkmarkSelector.checked} {\n      color: ${palette.blue.light1};\n    }\n\n    ${checkmarkSelector.unchecked} {\n      color: ${palette.white};\n    }\n\n    ${checkmarkSelector.disabledChecked} {\n      color: ${palette.gray.dark2};\n    }\n\n    ${checkmarkSelector.disabledUnchecked} {\n      color: ${palette.gray.dark1};\n    }\n  `,\n  [Theme.Light]: css`\n    ${checkmarkSelector.checked} {\n      color: ${palette.blue.base};\n    }\n\n    ${checkmarkSelector.unchecked} {\n      color: ${palette.white};\n    }\n\n    ${checkmarkSelector.disabledChecked} {\n      color: ${palette.gray.light1};\n    }\n\n    ${checkmarkSelector.disabledUnchecked} {\n      color: ${palette.gray.light3};\n    }\n  `,\n};\n\nexport const checkmarkSize: Omit<Record<Size, number>, 'xsmall'> = {\n  [Size.Default]: 16,\n  [Size.Small]: 14,\n};\n","import {\n  DarkModeProps,\n  Either,\n  HTMLElementProps,\n  LgIdProps,\n} from '@leafygreen-ui/lib';\n\nexport const Size = {\n  Default: 'default',\n  Small: 'small',\n  XSmall: 'xsmall',\n} as const;\n\nexport type Size = (typeof Size)[keyof typeof Size];\n\ninterface BaseToggleProps extends DarkModeProps, LgIdProps {\n  /**\n   * Sets the size of the toggle.\n   *\n   * @default 'default'\n   */\n  size?: Size;\n\n  /**\n   * Sets the checked state of the Toggle.\n   */\n  checked?: boolean;\n\n  /**\n   * Disables the Toggle.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * `onChange` fires when the internally-managed `checked` state of the component is updated. Receives the updated checked state of the toggle as its first argument, and the associated mouse event as the second.\n   */\n  onChange?: (\n    checked: boolean,\n    mouseEvent: React.MouseEvent<HTMLButtonElement>,\n  ) => void;\n\n  /**\n   * Adds a className to the outermost element.\n   */\n  className?: string;\n}\n\nexport type ToggleProps = Either<\n  BaseToggleProps &\n    Omit<HTMLElementProps<'button', never>, keyof BaseToggleProps>,\n  'aria-label' | 'aria-labelledby'\n>;\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { validateAriaLabelProps } from '@leafygreen-ui/a11y';\nimport { cx } from '@leafygreen-ui/emotion';\nimport CheckmarkIcon from '@leafygreen-ui/icon/dist/Checkmark';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { LGIDS_TOGGLE } from '../constants';\n\nimport {\n  buttonBaseStyles,\n  buttonSizeStyles,\n  buttonThemeStyles,\n  checkmarkBaseStyles,\n  checkmarkSize,\n  checkmarkThemeStyles,\n  sliderBaseStyles,\n  sliderSizeStyles,\n  sliderThemeStyles,\n  toggleButtonClassName,\n} from './styles';\nimport { Size, ToggleProps } from './types';\n\nfunction Toggle({\n  className,\n  size = Size.Default,\n  darkMode: darkModeProp,\n  disabled = false,\n  onChange: onChangeProp,\n  onClick: onClickProp,\n  checked: controlledChecked,\n  'data-lgid': dataLgId = LGIDS_TOGGLE.root,\n  ...rest\n}: ToggleProps) {\n  validateAriaLabelProps(rest, Toggle.displayName);\n  const { theme } = useDarkMode(darkModeProp);\n  const [checked, setChecked] = useState(false);\n\n  const isControlled = typeof controlledChecked === 'boolean';\n  const normalizedChecked = controlledChecked ?? checked;\n\n  const onClick: React.MouseEventHandler<HTMLButtonElement> = useCallback(\n    e => {\n      onClickProp?.(e);\n\n      if (isControlled) {\n        onChangeProp?.(!controlledChecked, e);\n      } else {\n        setChecked(curr => {\n          const updatedState = !curr;\n          onChangeProp?.(updatedState, e);\n          return updatedState;\n        });\n      }\n    },\n    [isControlled, controlledChecked, onClickProp, onChangeProp],\n  );\n\n  return (\n    <button\n      role=\"switch\"\n      type=\"button\"\n      onClick={onClick}\n      aria-checked={normalizedChecked}\n      disabled={disabled}\n      aria-disabled={disabled}\n      className={cx(\n        className,\n        toggleButtonClassName,\n        buttonBaseStyles,\n        buttonThemeStyles[theme],\n        buttonSizeStyles[size],\n      )}\n      data-lgid={dataLgId}\n      {...rest}\n    >\n      <div\n        className={cx(\n          sliderBaseStyles,\n          sliderSizeStyles[size],\n          sliderThemeStyles[theme],\n        )}\n      >\n        {size !== Size.XSmall && (\n          <CheckmarkIcon\n            aria-hidden={true}\n            className={cx(checkmarkBaseStyles, checkmarkThemeStyles[theme])}\n            size={checkmarkSize[size]}\n          />\n        )}\n      </div>\n    </button>\n  );\n}\n\nToggle.displayName = 'Toggle';\n\nToggle.propTypes = {\n  size: PropTypes.oneOf(Object.values(Size)),\n  darkMode: PropTypes.bool,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n};\n\nexport default Toggle;\n","import { getByLgId } from '@lg-tools/test-harnesses';\n\nimport { LGIDS_TOGGLE } from '../../constants';\n\nimport { TestUtilsReturnType } from './getTestUtils.types';\n\nexport const getTestUtils = (\n  lgId: string = LGIDS_TOGGLE.root,\n): TestUtilsReturnType => {\n  /**\n   * Queries the DOM for the element using the `data-lgid` data attribute.\n   * Will throw if no element is found.\n   */\n  const element: HTMLButtonElement = getByLgId!(lgId);\n\n  /**\n   * Returns the disabled attribute on the input.\n   */\n  const isInputDisabled = () => {\n    return element.getAttribute('aria-disabled') === 'true';\n  };\n\n  /**\n   * Returns the value for the aria-checked attribute on the input.\n   */\n  const getInputValue = () => {\n    return element.getAttribute('aria-checked') === 'true';\n  };\n\n  return {\n    getInput: () => element,\n    isDisabled: () => isInputDisabled(),\n    getInputValue: () => getInputValue(),\n  };\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","LGIDS_TOGGLE","Size","Default","Small","XSmall","toggleButtonClassName","createUniqueClassName","buttonSelectors","checked","concat","unchecked","disabled","sliderSelector","checkmarkSelector","disabledChecked","disabledUnchecked","buttonBaseStyles","css","_taggedTemplateLiteral","transitionDuration","default","sliderBaseStyles","buttonSizeStyles","_defineProperty","sliderSizeStyles","buttonThemeStyles","Theme","Light","palette","gray","base","blue","light2","hoverRing","light","focusRing","Dark","dark1","light1","dark2","dark","sliderThemeStyles","white","light3","checkmarkBaseStyles","checkmarkThemeStyles","checkmarkSize","_excluded","Toggle","_ref","className","_ref$size","size","darkModeProp","darkMode","_ref$disabled","onChangeProp","onChange","onClickProp","onClick","controlledChecked","_ref$dataLgid","dataLgId","rest","_objectWithoutProperties","validateAriaLabelProps","displayName","theme","useDarkMode","_useState2","_slicedToArray","useState","setChecked","isControlled","normalizedChecked","useCallback","e","curr","updatedState","React","createElement","_extends","role","type","cx","CheckmarkIcon","propTypes","PropTypes","oneOf","Object","values","bool","string","func","getTestUtils","element","getByLgId","arguments","length","undefined","getInput","isDisabled","getAttribute","getInputValue"],"mappings":"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"}