{"version":3,"file":"index.js","sources":["../../src/Toast.types.ts","../../src/InternalToast/InternalToast.styles.ts","../../src/InternalToast/ProgressBar/ProgressBar.styles.ts","../../src/InternalToast/ProgressBar/ProgressBar.tsx","../../src/InternalToast/defaultProps.ts","../../src/constants.ts","../../src/InternalToast/VariantIcon.tsx","../../src/ToastContainer/NotificationBar/NotificationBar.styles.ts","../../src/InternalToast/InternalToast.tsx","../../src/ToastContainer/ToastContainer.styles.ts","../../src/ToastContainer/NotificationBar/NotificationBar.tsx","../../src/ToastContainer/utils/useToastTimers.ts","../../src/ToastContainer/utils/useToastTransitions.ts","../../src/ToastContainer/ToastContainer.tsx","../../src/ToastContainer/utils/getDividedStack.ts","../../src/ToastContainer/utils/useToastHeights.ts","../../src/ToastContext/ToastContext.tsx","../../src/ToastContext/ToastContext.types.ts","../../src/ToastContext/utils/makeToast.ts","../../src/ToastContext/utils/generateToastId.ts","../../src/ToastContext/ToastReducer/useToastReducer.ts","../../src/ToastContext/ToastProvider/ToastProvider.tsx","../../src/ToastContext/useToast/useToast.ts","../../src/ControlledToast/ControlledToast.tsx","../../src/ControlledToast/useStableControlledToastProps.tsx"],"sourcesContent":["import { DarkModeProps } from '@leafygreen-ui/lib';\n\nconst Variant = {\n  Success: 'success',\n  Note: 'note',\n  Warning: 'warning',\n  Important: 'important',\n  Progress: 'progress',\n} as const;\n\ntype Variant = (typeof Variant)[keyof typeof Variant];\n\nexport { Variant };\n\nexport interface ToastProps\n  extends Omit<React.ComponentPropsWithoutRef<'div'>, 'title'>,\n    DarkModeProps {\n  /**\n   * Primary text for the toast\n   */\n  title: React.ReactNode;\n\n  /**\n   * Additional body text\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Fired either when the close button is clicked, or when timeout has elapsed.\n   *\n   * When triggered by button click, `event.type === \"click\"`\n   *\n   * When triggered by timeout, `event.type === \"timeout\"`\n   */\n  onClose?: React.EventHandler<any>;\n\n  /**\n   * Optional action button, or other element.\n   * Only rendered if `variant === 'progress'`\n   *\n   * This should be a shortcut onlyâ€”and not the _only_ way to perform the action.\n   *\n   * The provided action element should have an `aria-description` attribute\n   * that describes how to alternatively perform the action.\n   */\n  actionElement?: React.ReactNode;\n\n  /**\n   * Required style variant to render the Toast as.\n   *\n   * Progress variants will ignore the `timeout` prop\n   *\n   * @default `note`\n   */\n  variant?: Variant;\n\n  /**\n   * Optional number between 0 and 1 that sets the progress bar's progress.\n   *\n   * Note: the progress bar is only rendered when the Toast variant is set to `'progress'`.\n   */\n  progress?: number;\n\n  /**\n   * Dismiss the Toast after `timeout` milliseconds\n   *\n   * If timeout is `null | 0`, the Toast will never dismiss automatically.\n   *\n   * Note: Timeout timer will be paused when a user is interacting with a Toast\n   *\n   * @default 6_000\n   */\n  timeout?: number | null;\n  /**\n   * Determines whether to render the close button.\n   *\n   * If `timeout === null`, then `dismissible` is forced to `true`\n   *\n   * @default true\n   */\n  dismissible?: boolean;\n\n  /**\n   * Internal prop that defines whether the toast has been rendered with the context,\n   * or by the `ControlledToast` JSX component. Set automatically by the `ControlledToast` component\n   * @internal\n   */\n  isControlled?: boolean;\n}\n","import { transparentize } from 'polished';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  fontFamilies,\n  fontWeights,\n  spacing,\n  transitionDuration,\n  typeScales,\n} from '@leafygreen-ui/tokens';\nimport { anchorClassName } from '@leafygreen-ui/typography';\n\nimport { TOAST_CONSTANTS } from '../constants';\nimport { Variant } from '../Toast.types';\n\nexport const toastBGColor: Record<Theme, string> = {\n  [Theme.Light]: palette.black,\n  [Theme.Dark]: palette.gray.light2,\n};\n\nexport const baseToastStyle = css`\n  position: fixed;\n  left: ${TOAST_CONSTANTS.inset}px;\n  bottom: ${TOAST_CONSTANTS.inset}px;\n  width: calc(100vw - ${TOAST_CONSTANTS.inset * 2}px);\n  max-width: ${TOAST_CONSTANTS.maxWidth}px;\n  min-height: ${TOAST_CONSTANTS.minHeight - 2}px; // -2 for border: ;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${spacing[2] - 1}px; // -1 for border\n  padding-left: ${spacing[3]}px;\n  gap: ${spacing[3]}px;\n\n  font-family: ${fontFamilies.default};\n  font-size: ${typeScales.body1.fontSize}px;\n  line-height: ${typeScales.body1.lineHeight}px;\n  border-radius: 12px;\n  border: 1px solid;\n  box-shadow: 0px 18px 18px -15px ${transparentize(0.8, '#06161E')};\n\n  overflow: hidden;\n  transform-origin: bottom center;\n  transition: all ${transitionDuration.default}ms ease-in-out;\n\n  .${anchorClassName}, a {\n    font-size: inherit;\n    line-height: inherit;\n    font-weight: ${fontWeights.bold};\n    text-decoration: underline;\n    text-underline-offset: 3px;\n    text-decoration-thickness: 2px;\n    border-radius: 4px;\n\n    &:hover,\n    &:focus,\n    &:focus-visible {\n      outline: none;\n      span {\n        &::after {\n          display: none;\n        }\n      }\n    }\n    &:focus-visible {\n      position: relative;\n    }\n  }\n`;\n\nexport const toastThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${toastBGColor[Theme.Light]};\n    border-color: ${palette.gray.dark2};\n\n    .${anchorClassName}, a {\n      color: ${palette.gray.light3};\n\n      &:hover,\n      &:focus-visible {\n        color: ${palette.gray.light2};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    background-color: ${toastBGColor[Theme.Dark]};\n    border-color: ${palette.gray.light1};\n\n    .${anchorClassName}, a {\n      color: ${palette.gray.dark3};\n\n      &:hover,\n      &:focus-visible {\n        color: ${palette.gray.dark2};\n      }\n    }\n  `,\n};\n\nexport const contentWrapperStyle = css`\n  display: flex;\n  align-items: center;\n  gap: ${spacing[3]}px;\n  width: 100%;\n  opacity: 0;\n  transition: opacity ease-out ${transitionDuration.default}ms;\n`;\n\nexport const contentVisibleStyles = css`\n  opacity: 1;\n`;\n\nexport const baseIconStyle = css`\n  height: 24px;\n  width: 24px;\n  flex-shrink: 0;\n`;\n\nexport const textContentStyle = css`\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nexport const titleStyle = css`\n  font-weight: ${fontWeights.bold};\n  overflow: hidden;\n`;\n\nexport const titleThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.white};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.black};\n  `,\n};\n\nexport const descriptionStyle = css`\n  overflow: hidden;\n`;\n\nexport const descriptionThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.light2};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.dark2};\n  `,\n};\n\nexport const dismissButtonStyle = css`\n  width: ${spacing[3] + spacing[2]}px;\n  height: ${spacing[3] + spacing[2]}px;\n  // Counteract the margin added by hover state\n  margin: -${spacing[1]}px;\n  align-self: flex-start;\n  transition: color ${transitionDuration.default}ms ease-in-out;\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nexport const dismissButtonThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.dark2};\n\n    &:hover,\n    &:focus-visible {\n      &::before {\n        background-color: ${palette.gray.light1};\n      }\n    }\n  `,\n};\n\nexport const variantIconStyle: Record<Variant, Record<Theme, string>> = {\n  [Variant.Success]: {\n    [Theme.Light]: css`\n      color: ${palette.green.base};\n    `,\n    [Theme.Dark]: css`\n      color: ${palette.green.dark1};\n    `,\n  },\n  [Variant.Note]: {\n    [Theme.Light]: css`\n      color: ${palette.blue.light1};\n    `,\n    [Theme.Dark]: css`\n      color: ${palette.blue.base};\n    `,\n  },\n  [Variant.Warning]: {\n    [Theme.Light]: css`\n      color: ${palette.red.light1};\n    `,\n    [Theme.Dark]: css`\n      color: ${palette.red.base};\n    `,\n  },\n  [Variant.Important]: {\n    [Theme.Light]: css`\n      color: ${palette.yellow.base};\n    `,\n    [Theme.Dark]: css`\n      color: ${palette.yellow.dark2};\n    `,\n  },\n  [Variant.Progress]: {\n    [Theme.Light]: css`\n      color: ${palette.gray.light2};\n    `,\n    [Theme.Dark]: css`\n      color: ${palette.gray.dark2};\n    `,\n  },\n};\n","import { css, keyframes } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { transitionDuration } from '@leafygreen-ui/tokens';\n\nimport { TOAST_CONSTANTS } from '../../constants';\n\nexport const progressBarBackgroundStyle = css`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: ${TOAST_CONSTANTS.progressBarHeight}px;\n  background-color: ${palette.gray.light2};\n`;\n\nexport const progressBarBackgroundThemeStyle: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.light1};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.gray.dark2};\n  `,\n};\n\nconst backgroundShimmer = keyframes`\n  0% {\n    background-position: ${-TOAST_CONSTANTS.maxWidth}px;\n  }\n\n  100% {\n    background-position: ${TOAST_CONSTANTS.maxWidth * 2}px;\n  }\n`;\n\nexport const progressBarStyle = css`\n  overflow: hidden;\n  height: ${TOAST_CONSTANTS.progressBarHeight}px;\n  background-size: ${TOAST_CONSTANTS.maxWidth * 2}px;\n  animation: ${backgroundShimmer} 4s infinite linear;\n  transition: width ${transitionDuration.slower}ms ease-in-out;\n`;\n\nexport const progressBarThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: #083c90;\n    background-image: linear-gradient(\n      90deg,\n      #083c90 0px,\n      #c3e7fe ${TOAST_CONSTANTS.maxWidth / 2}px,\n      #083c90 ${TOAST_CONSTANTS.maxWidth}px\n    );\n  `,\n  [Theme.Dark]: css`\n    background-color: #0498ec;\n    background-image: linear-gradient(\n      90deg,\n      #0498ec 0px,\n      #c3e7fe ${TOAST_CONSTANTS.maxWidth / 2}px,\n      #0498ec ${TOAST_CONSTANTS.maxWidth}px\n    );\n  `,\n};\n","import React from 'react';\nimport clamp from 'lodash/clamp';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\n\nimport {\n  progressBarBackgroundStyle,\n  progressBarBackgroundThemeStyle,\n  progressBarStyle,\n  progressBarThemeStyle,\n} from './ProgressBar.styles';\n\ninterface ProgressBarProps {\n  progress: number;\n  theme: Theme;\n}\n\n/**\n * The progress bar for `variant = 'progress'` toasts\n *\n * @internal\n */\nfunction ToastProgressBar({ progress, theme }: ProgressBarProps) {\n  const normalizedProgress = clamp(progress, 0, 1) * 100;\n\n  return (\n    <div\n      className={cx(\n        progressBarBackgroundStyle,\n        progressBarBackgroundThemeStyle[theme],\n      )}\n      role=\"progressbar\"\n      aria-valuenow={normalizedProgress}\n      aria-valuemin={0}\n      aria-valuemax={100}\n    >\n      <div\n        className={cx(\n          progressBarStyle,\n          progressBarThemeStyle[theme],\n          css`\n            width: ${normalizedProgress}%;\n          `,\n        )}\n      />\n    </div>\n  );\n}\n\nToastProgressBar.displayName = 'ToastProgressBar';\n\nToastProgressBar.propTypes = {\n  progress: PropTypes.number,\n};\n\nexport default ToastProgressBar;\n","import { ToastProps, Variant } from '../Toast.types';\n\nexport const defaultToastProps: Required<\n  Pick<ToastProps, 'variant' | 'progress' | 'dismissible' | 'timeout'>\n> = {\n  variant: Variant.Note,\n  progress: 1.0,\n  timeout: 6_000,\n  dismissible: true,\n};\n","/**\n * Constants used throughout the Toast package\n */\nexport const TOAST_CONSTANTS = {\n  /**\n   * The fixed width of a toast\n   */\n  maxWidth: 400,\n\n  /**\n   * The min-height of a toast\n   */\n  minHeight: 56,\n\n  /**\n   * The height of the progress bar\n   */\n  progressBarHeight: 4,\n\n  /**\n   * The fixed height of the notification bar\n   */\n  notificationBarHeight: 24,\n\n  /**\n   * The spacing between the container edge and toast left/bottom\n   */\n  inset: 4,\n\n  /**\n   * The distance the toast moves down in the y-direction\n   * when in the collapsed stack\n   */\n  yOffset: 8,\n\n  /**\n   * The z distance each subsequent toast moves back (into the screen)\n   * when the stack is collapsed\n   */\n  zOffset: 100,\n\n  /**\n   * The gap between toasts when the stack is expanded\n   */\n  gap: 4,\n\n  /**\n   * The number of toasts featured on hover\n   */\n  shortStackCount: 3,\n};\n","/* eslint-disable react/display-name */\nimport React from 'react';\n\nimport CheckmarkWithCircleIcon from '@leafygreen-ui/icon/dist/CheckmarkWithCircle';\nimport ImportantWithCircleIcon from '@leafygreen-ui/icon/dist/ImportantWithCircle';\nimport InfoWithCircle from '@leafygreen-ui/icon/dist/InfoWithCircle';\nimport RefreshIcon from '@leafygreen-ui/icon/dist/Refresh';\nimport WarningIcon from '@leafygreen-ui/icon/dist/Warning';\n\nimport { Variant } from '../Toast.types';\n\nexport const variantIcons: Record<\n  Variant,\n  React.ComponentType<React.PropsWithChildren<any>>\n> = {\n  [Variant.Success]: CheckmarkWithCircleIcon,\n  [Variant.Note]: InfoWithCircle,\n  [Variant.Warning]: WarningIcon,\n  [Variant.Important]: ImportantWithCircleIcon,\n  [Variant.Progress]: RefreshIcon,\n};\n","import { TransitionStatus } from 'react-transition-group';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  fontFamilies,\n  spacing,\n  transitionDuration,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nimport { TOAST_CONSTANTS } from '../../constants';\n\nexport const notificationBarStyles = css`\n  border: unset;\n  outline: unset;\n\n  position: absolute;\n  left: ${TOAST_CONSTANTS.inset}px;\n  bottom: ${TOAST_CONSTANTS.inset}px;\n  width: ${TOAST_CONSTANTS.maxWidth}px;\n  height: ${TOAST_CONSTANTS.notificationBarHeight}px;\n  z-index: 0;\n\n  font-family: ${fontFamilies.default};\n  font-size: ${typeScales.body1.fontSize}px;\n  line-height: ${typeScales.body1.lineHeight}px;\n  border-radius: ${spacing[2]}px;\n  cursor: pointer;\n\n  opacity: 0;\n  transform: translate3d(0, ${TOAST_CONSTANTS.yOffset}px, -400px);\n  transition: ${transitionDuration.slower}ms ease-in-out;\n  transition-property: background-color, opacity, transform;\n`;\n\nexport const notificationBarThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${palette.gray.dark2};\n    color: ${palette.white};\n\n    &:hover {\n      background-color: ${palette.gray.dark3};\n    }\n  `,\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.light1};\n    color: ${palette.black};\n\n    &:hover {\n      background-color: ${palette.gray.light2};\n    }\n  `,\n};\n\nexport const notificationBarTransitionStyles: Partial<\n  Record<TransitionStatus, string>\n> = {\n  entered: css`\n    transform: translate3d(0, 0, 0);\n    opacity: 1;\n  `,\n  entering: css`\n    transform: translate3d(0, 0, 0);\n    opacity: 1;\n  `,\n  exited: css`\n    transform: translate3d(\n      0,\n      ${TOAST_CONSTANTS.shortStackCount * TOAST_CONSTANTS.yOffset}px,\n      -${(TOAST_CONSTANTS.shortStackCount + 1) * TOAST_CONSTANTS.zOffset}px\n    );\n    opacity: 0;\n  `,\n  exiting: css`\n    transform: translate3d(\n      0,\n      ${TOAST_CONSTANTS.shortStackCount * TOAST_CONSTANTS.yOffset}px,\n      -${(TOAST_CONSTANTS.shortStackCount + 1) * TOAST_CONSTANTS.zOffset}px\n    );\n    opacity: 0;\n  `,\n};\n","import React from 'react';\nimport defaults from 'lodash/defaults';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport XIcon from '@leafygreen-ui/icon/dist/X';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { Body } from '@leafygreen-ui/typography';\n\nimport { Variant } from '../Toast.types';\n\nimport { defaultToastProps } from './defaultProps';\nimport {\n  baseIconStyle,\n  baseToastStyle,\n  contentVisibleStyles,\n  contentWrapperStyle,\n  descriptionStyle,\n  descriptionThemeStyle,\n  dismissButtonStyle,\n  dismissButtonThemeStyle,\n  textContentStyle,\n  titleStyle,\n  titleThemeStyle,\n  toastThemeStyles,\n  variantIconStyle,\n} from './InternalToast.styles';\nimport { InternalToastProps } from './InternalToast.types';\nimport { ProgressBar } from './ProgressBar';\nimport { variantIcons } from './VariantIcon';\n\n/**\n * The internal toast component\n *\n * Only responsible for rendering itself\n *\n * @internal\n */\nexport const InternalToast = React.forwardRef<\n  HTMLDivElement,\n  InternalToastProps\n>(\n  (\n    {\n      id,\n      title,\n      description,\n      className,\n      onClose,\n      actionElement,\n      index = 0,\n      isHovered,\n      isControlled,\n      variant: variantProp,\n      progress: progressProp,\n      dismissible: dismissibleProp,\n      darkMode: darkModeProp,\n      ...rest\n    }: InternalToastProps,\n    forwardedRef,\n  ) => {\n    const { variant, progress, dismissible } = defaults(\n      {\n        variant: variantProp,\n        progress: progressProp,\n        dismissible: dismissibleProp,\n      },\n      defaultToastProps,\n    );\n\n    /** Warn if toast won't close  */\n    if (!dismissible && !rest.timeout) {\n      console.warn(\n        `Toast ${id} may never close. Toast must be \\`dismissible\\` or have a \\`timeout\\` value.`,\n      );\n    }\n\n    const { theme, darkMode } = useDarkMode(darkModeProp);\n    const showContent = index === 0 || isHovered;\n    const VariantIcon = variantIcons[variant];\n    const iconThemeStyle = variantIconStyle[variant];\n\n    return (\n      <LeafyGreenProvider darkMode={!darkMode}>\n        <div\n          id={id}\n          ref={forwardedRef}\n          className={cx(baseToastStyle, toastThemeStyles[theme], className)}\n          aria-atomic=\"true\"\n          data-testid=\"lg-toast\"\n          {...rest}\n        >\n          <div\n            data-testid=\"lg-toast-content\"\n            aria-hidden={!showContent}\n            className={cx(contentWrapperStyle, {\n              [contentVisibleStyles]: showContent,\n            })}\n          >\n            <VariantIcon\n              aria-hidden\n              className={cx(baseIconStyle, iconThemeStyle[theme])}\n              size={32}\n            />\n\n            <div className={textContentStyle}>\n              <Body\n                data-testid=\"toast-title\"\n                className={cx(titleStyle, titleThemeStyle[theme])}\n              >\n                {title}\n              </Body>\n\n              {description && (\n                <Body\n                  className={cx(descriptionStyle, descriptionThemeStyle[theme])}\n                >\n                  {description}\n                </Body>\n              )}\n            </div>\n\n            {variant === Variant.Progress && actionElement}\n          </div>\n\n          {dismissible && (\n            <IconButton\n              className={cx(dismissButtonStyle, dismissButtonThemeStyle[theme])}\n              aria-label=\"Close Message\"\n              onClick={onClose}\n              darkMode={!darkMode}\n              data-testid=\"lg-toast-dismiss-button\"\n            >\n              <XIcon aria-hidden role=\"presentation\" />\n            </IconButton>\n          )}\n          {variant === Variant.Progress && showContent && (\n            <ProgressBar theme={theme} progress={progress} />\n          )}\n        </div>\n      </LeafyGreenProvider>\n    );\n  },\n);\n\nInternalToast.displayName = 'InternalToast';\n\nInternalToast.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.element, PropTypes.string]).isRequired,\n  description: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  variant: PropTypes.oneOf(Object.values(Variant)),\n  progress: PropTypes.number,\n  onClose: PropTypes.func,\n  dismissible: PropTypes.bool,\n};\n","import { TransitionStatus } from 'react-transition-group';\nimport { mix } from 'polished';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { spacing, transitionDuration } from '@leafygreen-ui/tokens';\n\nimport { TOAST_CONSTANTS } from '../constants';\nimport { toastBGColor } from '../InternalToast';\n\n/**\n * Keeping this to ease future debugging.\n * Set `DEBUG` to true,\n * and set the attribute `data-debug` to any data you want to debug\n */\nconst DEBUG = false;\nconst debugData = (extraStyle?: string) => css`\n  &::before {\n    content: attr(data-debug);\n    color: white;\n    background-color: black;\n    position: absolute;\n    bottom: 0%;\n    left: 0%;\n    z-index: 10;\n    font-family: monospace;\n    pointer-events: none;\n    ${extraStyle};\n  }\n`;\n\nexport const portalStyles = css`\n  position: relative;\n`;\n\nexport const toastContainerStyles = css`\n  position: fixed;\n  display: flex;\n  flex-direction: column-reverse;\n\n  left: ${spacing[3] - TOAST_CONSTANTS.inset}px;\n  bottom: ${spacing[3] - TOAST_CONSTANTS.inset}px;\n  width: ${TOAST_CONSTANTS.maxWidth + 2 * TOAST_CONSTANTS.inset}px;\n  max-height: calc(100vh - ${spacing[3]}px);\n  z-index: 0;\n  overflow: unset;\n\n  // Hide the toast initially\n  min-height: ${0}px;\n  opacity: 0;\n  visibility: hidden;\n\n  perspective: 1600px;\n  perspective-origin: bottom;\n  transform-style: preserve-3d;\n  transition: ease-in-out ${transitionDuration.slower}ms;\n  transition-property: transform, bottom, opacity;\n\n  /* Scrollbars */\n  scroll-behavior: unset; // _not_ smooth. We need this to be instant\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE and old Edge */\n  &::-webkit-scrollbar {\n    display: none; /* Chrome, Safari and Opera */\n  }\n\n  /* Debug */\n  ${DEBUG && `outline: 1px solid teal;`}\n  ${DEBUG &&\n  debugData(\n    css`\n      background-color: teal;\n    `,\n  )}\n`;\n\nexport const toastContainerVisibleStyles = css`\n  opacity: 1;\n  visibility: visible;\n`;\n\nexport function getContainerStatefulStyles({\n  recentToastsLength,\n  topToastHeight,\n}: {\n  recentToastsLength: number;\n  topToastHeight: number;\n}) {\n  return css`\n    // In the default state, the container is the height of the first toast + inset\n    height: ${topToastHeight + TOAST_CONSTANTS.inset * 2}px;\n\n    // Move the entire container up as toasts get added,\n    // so the bottom toast is always 16px from the bottom\n    // (note, recentToastsLength should never exceed 3 )\n    transform: translateY(\n      -${TOAST_CONSTANTS.yOffset * (recentToastsLength - 1)}px\n    );\n  `;\n}\n\nexport const getContainerInteractedStyles = ({\n  totalStackHeight,\n  bottomOffset,\n}: {\n  totalStackHeight: number;\n  bottomOffset: number;\n}) => {\n  // Set the height of the container to the total stack height\n  const height = bottomOffset + totalStackHeight + TOAST_CONSTANTS.inset * 2;\n\n  return css`\n    height: ${height}px;\n    // set the container back when hovered/expanded\n    transform: translateY(0);\n  `;\n};\n\nexport const containerExpandedStyles = css`\n  // When expanded, force the height to 100vh regardless of the total stack height\n  height: 100vh;\n  bottom: 0;\n  transform: translateY(0);\n  overflow: auto;\n`;\n\n/** Styles applied when `isExpanded` but `!shouldExpand` */\nexport const containerCollapsingStyles = css`\n  bottom: ${spacing[3] - TOAST_CONSTANTS.inset}px;\n`;\n\n/**\n * Scroll Container\n */\nexport const scrollContainerStyles = css`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  transform-style: inherit;\n  transition: margin ${transitionDuration.default}ms ease-in-out;\n\n  /* Debug */\n  ${DEBUG && `outline: 1px solid orangered;`}\n`;\n\nexport function scrollContainerExpandedStyles(totalStackHeight: number) {\n  /*\n   * Scroll container should be the height of the whole stack.\n   * This may overflow the container.\n   */\n  return css`\n    margin: ${spacing[3]}px 0;\n    height: ${totalStackHeight}px;\n  `;\n}\n\n/** Styles applied when `isExpanded` but `!shouldExpand` */\nexport const scrollContainerTransitionOutStyles = css`\n  margin: 0;\n`;\n\n/**\n * Stateful Toast styling\n */\nexport function getToastTransitionStyles({\n  state,\n  theme,\n  index,\n}: {\n  state: TransitionStatus;\n  theme: Theme;\n  index: number;\n}) {\n  switch (state) {\n    case 'entered': {\n      const y = index * TOAST_CONSTANTS.yOffset;\n      const z = -index * TOAST_CONSTANTS.zOffset;\n      const bgColor = mix(1 - index * 0.2, toastBGColor[theme], palette.white);\n\n      return css`\n        opacity: 1;\n        z-index: ${3 - index};\n        transform: translate3d(0, ${y}px, ${z}px) scale(1);\n        background-color: ${bgColor};\n        // Slow down any hover animations\n        transition-duration: ${transitionDuration.slower}ms;\n\n        ${DEBUG &&\n        debugData(\n          css`\n            top: unset;\n            left: unset;\n            bottom: 0;\n            right: 0;\n          `,\n        )}\n      `;\n    }\n\n    case 'exiting': {\n      return css`\n        opacity: 0;\n      `;\n    }\n\n    default:\n      return css`\n        transform: translate3d(\n            0,\n            ${TOAST_CONSTANTS.yOffset}px,\n            -${TOAST_CONSTANTS.zOffset}px\n          )\n          scale(0.9);\n        opacity: 0;\n      `;\n  }\n}\n\nexport function getToastUnhoveredStyles({\n  theme,\n  index,\n  topToastHeight,\n}: {\n  theme: Theme;\n  index: number;\n  topToastHeight: number;\n}) {\n  /**\n   * When not hovered, set the max-height of each toast\n   * to the height of the top-most toast,\n   * so tall toasts below the top don't peek out\n   */\n  return css`\n    max-height: ${index === 0 ? 'unset' : `${topToastHeight}px`};\n    color: ${index > 0 ? toastBGColor[theme] : 'initial'} !important;\n  `;\n}\n\nexport function getToastHoverStyles({\n  positionY,\n  height,\n  theme,\n}: {\n  positionY: number;\n  height: number;\n  theme: Theme;\n}) {\n  return css`\n    max-height: ${height * 2}px;\n    background-color: ${toastBGColor[theme]};\n    transform: translate3d(0, -${positionY}px, 0);\n  `;\n}\n","import React from 'react';\nimport { MouseEventHandler } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport {\n  notificationBarStyles,\n  notificationBarThemeStyles,\n} from './NotificationBar.styles';\n\n/**\n * The button below a stack of >3 toasts\n * that allows users to expand the stack\n * @internal\n */\nexport const NotificationBar = ({\n  count,\n  onClick,\n  className,\n}: {\n  count: number;\n  onClick: MouseEventHandler;\n  className?: string;\n}) => {\n  const { theme } = useDarkMode();\n\n  // Don't render button if the count is 0.\n  // Returning null instead of using mountOnEnter and unmountOnExit on <Transition /> because when using mountOnEnter and unmountOnExit the transitions don't work correctly.\n  if (!count) return null;\n\n  return (\n    <button\n      onClick={onClick}\n      className={cx(\n        notificationBarStyles,\n        notificationBarThemeStyles[theme],\n        className,\n      )}\n    >\n      {count} more notification{count > 1 && 's'}\n    </button>\n  );\n};\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport { ToastId, ToastStack } from '../../ToastContext';\n\n/**\n * Sets a timeout when an element is added to the stack.\n * Clears the timeout when the container is hovered.\n * Restores the timers when un-hovered.\n *\n * @internal\n */\nexport const useToastTimers = ({\n  stack,\n  isHovered,\n  callback,\n}: {\n  stack: ToastStack;\n  isHovered: boolean;\n  callback: (id: ToastId) => void;\n}) => {\n  const timers = useRef<Map<ToastId, NodeJS.Timeout | null>>(new Map());\n\n  const stackSize = stack?.size;\n\n  const setTimer = useCallback(\n    (id: ToastId, timeout?: number | null) => {\n      if (timeout && !timers.current.has(id)) {\n        const _timerId = setTimeout(() => {\n          callback(id);\n        }, timeout);\n        timers.current.set(id, _timerId);\n      }\n    },\n    [callback],\n  );\n\n  const startTimers = useCallback(\n    (stack: ToastStack) => {\n      stack.forEach(({ timeout, variant, progress }, id) => {\n        // We don't set the timer for `progress` toasts until they're complete\n        if (variant !== 'progress' || progress === 1) {\n          setTimer(id, timeout);\n        }\n      });\n    },\n    [setTimer],\n  );\n\n  // When the stack changes we create a timer\n  // and pop the toast when the timer expires\n  useEffect(() => {\n    startTimers(stack);\n    return () => clearAllTimers();\n  }, [setTimer, stack, startTimers, stackSize]);\n\n  // When isHovered changes, pause the timers\n  useEffect(() => {\n    if (isHovered) {\n      clearAllTimers();\n    } else {\n      startTimers(stack);\n    }\n\n    return () => clearAllTimers();\n  }, [isHovered, setTimer, stack, startTimers, stackSize]);\n\n  function clearAllTimers() {\n    timers.current.forEach((timerId, toastId) => {\n      if (timerId) clearTimeout(timerId);\n      timers.current.delete(toastId);\n    });\n  }\n};\n","import { useMemo, useState } from 'react';\nimport debounce from 'lodash/debounce';\n\nconst transitionDebounceTime = 100;\n\ninterface UseToastTransitionsProps {\n  getShouldExpand: () => boolean;\n  /** Callback called once the task queue is empty after the transition has entered */\n  enterCallback: () => void;\n  /** Callback called once the task queue is empty after the transition has exited */\n  exitCallback: () => void;\n}\n\ninterface UseToastTransitionsReturnVal {\n  isExpanded: boolean;\n  setIsExpanded: React.Dispatch<boolean>;\n  handleTransitionExit: () => void;\n  handleTransitionEnter: () => void;\n}\n\n/**\n * Hook to handle enter and exit transitions.\n * Returns {@link UseToastTransitionsReturnVal}\n *\n * @internal\n */\nexport function useToastTransitions({\n  getShouldExpand,\n  exitCallback,\n  enterCallback,\n}: UseToastTransitionsProps): UseToastTransitionsReturnVal {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  /**\n   * Callback fired when the <Transition> element enters\n   */\n  const handleTransitionEnter = useMemo(\n    // When a new toast enters, if we should expand,\n    // wait for an empty task queue, then set the expanded state\n    // and scroll the container to the bottom\n    () =>\n      debouncedTimeout(() => {\n        enterCallback();\n        setIsExpanded(getShouldExpand());\n      }),\n    [enterCallback, getShouldExpand],\n  );\n\n  /**\n   * Callback fired when the <Transition> element exits\n   */\n  const handleTransitionExit = useMemo(\n    // When a toast is removed\n    // wait for an empty task queue before checking the DOM\n    () =>\n      debouncedTimeout(() => {\n        exitCallback();\n        setIsExpanded(getShouldExpand());\n      }),\n    [exitCallback, getShouldExpand],\n  );\n\n  return {\n    isExpanded,\n    setIsExpanded,\n    handleTransitionExit,\n    handleTransitionEnter,\n  };\n}\n\nfunction debouncedTimeout(cb: () => void) {\n  return debounce(() => {\n    setTimeout(cb);\n  }, transitionDebounceTime);\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Transition, TransitionGroup } from 'react-transition-group';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport {\n  useBackdropClick,\n  useDynamicRefs,\n  useIdAllocator,\n  useMutationObserver,\n  useStateRef,\n} from '@leafygreen-ui/hooks';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  createSyntheticEvent,\n  createUniqueClassName,\n  keyMap,\n} from '@leafygreen-ui/lib';\nimport Portal from '@leafygreen-ui/portal';\nimport { transitionDuration } from '@leafygreen-ui/tokens';\n\nimport { TOAST_CONSTANTS } from '../constants';\nimport { InternalToast } from '../InternalToast';\nimport { ToastId, ToastStack, useToast } from '../ToastContext';\n\nimport {\n  NotificationBar,\n  notificationBarTransitionStyles,\n} from './NotificationBar';\nimport {\n  containerCollapsingStyles,\n  containerExpandedStyles,\n  getContainerInteractedStyles,\n  getContainerStatefulStyles,\n  getToastHoverStyles,\n  getToastTransitionStyles,\n  getToastUnhoveredStyles,\n  portalStyles,\n  scrollContainerExpandedStyles,\n  scrollContainerStyles,\n  scrollContainerTransitionOutStyles,\n  toastContainerStyles,\n  toastContainerVisibleStyles,\n} from './ToastContainer.styles';\nimport {\n  getDividedStack,\n  useToastHeights,\n  useToastTimers,\n  useToastTransitions,\n} from './utils';\n\nexport const toastPortalClassName = createUniqueClassName('toast-portal');\n\ninterface ToastContainerProps {\n  stack: ToastStack;\n  portalClassName?: string;\n}\n\n/**\n * ToastContainer is responsible for rendering the stack of toasts provided.\n * Rendered by the `ToastProvider`\n *\n * @internal\n */\nexport const ToastContainer = ({\n  stack,\n  portalClassName,\n}: ToastContainerProps) => {\n  const { popToast, getToast } = useToast();\n  const regionId = useIdAllocator({ id: 'lg-toast-region' });\n  const toastContainerRef = useRef<HTMLDivElement>(null);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const getToastRef = useDynamicRefs<HTMLDivElement>({ prefix: 'toast' });\n  const { theme } = useDarkMode();\n  // Track hover state\n  const [isHovered, setHoveredState] = useState(false);\n  const setHovered = () => setHoveredState(true);\n  const setUnhovered = () => setHoveredState(false);\n  // Track intended expand state\n  const [shouldExpand, setShouldExpand, getShouldExpand] = useStateRef(false);\n  const expandToasts = () => setShouldExpand(true);\n  const collapseToasts = () => setShouldExpand(false);\n  // Track stack size\n  const doesStackExist = stack.size > 0;\n\n  const { recentToasts, remainingToasts } = getDividedStack(stack);\n  const displayedToasts = shouldExpand\n    ? [...remainingToasts, ...recentToasts]\n    : recentToasts;\n\n  /** is the \"N more\" bar visible? */\n  const showNotificationBar =\n    isHovered && !shouldExpand && remainingToasts.length > 0;\n  /** How much vertical space is the \"N more\" bar taking up  */\n  const notificationBarSpacing = showNotificationBar\n    ? TOAST_CONSTANTS.notificationBarHeight + TOAST_CONSTANTS.gap\n    : 0;\n\n  /**\n   * Keep track of the DOM height of each toast element\n   */\n  const {\n    toastHeights,\n    totalStackHeight,\n    calcHeightForIndex,\n    updateToastHeights,\n  } = useToastHeights({\n    stack,\n    getToastRef,\n    shouldExpand,\n  });\n\n  // Force update on first render _only_\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(updateToastHeights, []);\n\n  // The id of the top-most toast\n  const topToastId = Array.from(stack).reverse()[0]?.[0]; // reverse since stack is bottom-up\n\n  /**\n   * We watch the toast container for child mutations,\n   * and calculate the toast height variables once they are added to the DOM\n   */\n  useMutationObserver(\n    toastContainerRef.current,\n    {\n      childList: true,\n      attributes: true,\n      subtree: true,\n    },\n    updateToastHeights,\n    stack.size > 0,\n  );\n\n  /**\n   * Keep track of whether the toasts have transitioned in or out,\n   * and generate event handlers.\n   *\n   * Note: The enter/exit callbacks are debounced, and called with setInterval,\n   * (since we need DOM manipulations to be complete)\n   *\n   */\n  const {\n    isExpanded,\n    setIsExpanded,\n    handleTransitionExit,\n    handleTransitionEnter,\n  } = useToastTransitions({\n    getShouldExpand,\n    enterCallback: () => {\n      if (toastContainerRef.current) {\n        toastContainerRef.current.scrollTop = totalStackHeight;\n      }\n\n      // Recalculate heights if we should be in the expanded state\n      if (getShouldExpand()) {\n        updateToastHeights();\n      }\n    },\n    exitCallback: () => {\n      if (scrollContainerRef.current) {\n        // check whether the toast container is still hovered\n        const _isHovered = scrollContainerRef.current.matches(':hover');\n        setHoveredState(_isHovered);\n      }\n\n      // Recalculate heights if we should be in the expanded state\n      if (getShouldExpand()) {\n        updateToastHeights();\n      }\n    },\n  });\n\n  /**\n   * Handler triggered when a toast starts to transition in\n   */\n  const handleTransitionEntering = () => {\n    if (isHovered || getShouldExpand()) {\n      updateToastHeights();\n    }\n  };\n\n  /**\n   * Handler triggered when a toast starts to transition out\n   */\n  const handleTransitionExiting = () => {\n    if (isHovered || getShouldExpand()) {\n      updateToastHeights();\n    }\n  };\n\n  /**\n   * When a user clicks away from the expanded stack,\n   * collapse the stack\n   * and set the expanded state\n   */\n  const handleBackdropClick = () => {\n    collapseToasts();\n    setIsExpanded(getShouldExpand());\n  };\n\n  useBackdropClick(\n    handleBackdropClick,\n    scrollContainerRef,\n    isExpanded && stack.size > 0,\n  );\n\n  /**\n   * Callback passed into the InternalToast component as `onClose`\n   * Also fired when timeout timers expires\n   */\n  const handleCloseEventForToastId = useCallback(\n    (id: ToastId, e?: CloseEvent) => {\n      const toast = getToast(id);\n      const toastRef = getToastRef(id);\n\n      if (toast && toastRef?.current) {\n        // We only self-close the toast if it's not externally controlled\n        if (!toast.isControlled) {\n          popToast(id);\n        }\n\n        toast.onClose?.(\n          // Call the close handler either with the default click event (if it exists),\n          // or a synthetic custom \"timeout\" event\n          e ?? createSyntheticEvent(new Event('timeout'), toastRef.current),\n        );\n      }\n    },\n    [getToast, getToastRef, popToast],\n  );\n\n  /** Returns the close event handler with toastID in the closure */\n  const getHandlerForId = (id: ToastId) => (e: CloseEvent) =>\n    handleCloseEventForToastId(id, e);\n\n  /**\n   * Set & keep track of timers for each toast in the stack\n   */\n  useToastTimers({\n    stack,\n    isHovered,\n    callback: handleCloseEventForToastId,\n  });\n\n  /** When expanded, collapse the stack when the escape key is pressed */\n  const handleContainerKeydown: React.KeyboardEventHandler = e => {\n    if (isExpanded && e.key === keyMap.Escape) {\n      collapseToasts();\n    }\n  };\n\n  return (\n    <Portal className={cx(portalStyles, toastPortalClassName, portalClassName)}>\n      {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n      <div\n        ref={toastContainerRef}\n        id={regionId}\n        data-testid=\"lg-toast-region\"\n        role=\"status\"\n        aria-live=\"polite\"\n        aria-relevant=\"all\"\n        onFocus={setHovered}\n        onBlur={setUnhovered}\n        onKeyDown={handleContainerKeydown}\n        className={cx(toastContainerStyles, {\n          [toastContainerVisibleStyles]: doesStackExist,\n          [getContainerStatefulStyles({\n            topToastHeight: toastHeights[topToastId],\n            recentToastsLength: recentToasts.length,\n          })]: doesStackExist,\n          [getContainerInteractedStyles({\n            totalStackHeight,\n            bottomOffset: notificationBarSpacing,\n          })]: doesStackExist && (isHovered || shouldExpand),\n          // Wait to apply fully expanded styles until the toast transition is complete\n          [containerExpandedStyles]: doesStackExist && isExpanded,\n          [containerCollapsingStyles]: isExpanded && !shouldExpand,\n        })}\n      >\n        <div\n          ref={scrollContainerRef}\n          data-testid=\"lg-toast-scroll-container\"\n          onMouseEnter={setHovered}\n          onMouseLeave={setUnhovered}\n          className={cx(scrollContainerStyles, {\n            // Wait to apply fully expanded styles until the toast transition is complete\n            [scrollContainerExpandedStyles(totalStackHeight)]: isExpanded,\n            [scrollContainerTransitionOutStyles]: isExpanded && !shouldExpand,\n          })}\n        >\n          <TransitionGroup enter exit component={null}>\n            {displayedToasts\n              .reverse() // reversing so they're in the DOM with most recent first\n              .map(([id, { onClose, className, ...toastProps }], index) => {\n                const toastRef = getToastRef(id);\n                onClose = getHandlerForId(id); // getHandler will call toast.onClose if it exists\n\n                return (\n                  <Transition\n                    onEntering={handleTransitionEntering}\n                    onEntered={handleTransitionEnter}\n                    onExiting={handleTransitionExiting}\n                    onExited={handleTransitionExit}\n                    key={id}\n                    timeout={transitionDuration.default}\n                  >\n                    {state => (\n                      <InternalToast\n                        {...toastProps}\n                        id={id}\n                        ref={toastRef}\n                        onClose={onClose}\n                        index={index}\n                        isHovered={isHovered || shouldExpand}\n                        className={cx(\n                          getToastTransitionStyles({\n                            state,\n                            theme,\n                            index,\n                          }),\n                          {\n                            [getToastUnhoveredStyles({\n                              theme,\n                              index,\n                              topToastHeight: toastHeights[topToastId],\n                            })]: !(isHovered || shouldExpand),\n\n                            [getToastHoverStyles({\n                              positionY:\n                                calcHeightForIndex(index, isExpanded) +\n                                notificationBarSpacing,\n                              height: toastHeights[id],\n                              theme,\n                            })]: isHovered || shouldExpand,\n                          },\n                          className,\n                        )}\n                        description={toastProps.description}\n                      />\n                    )}\n                  </Transition>\n                );\n              })}\n          </TransitionGroup>\n\n          <Transition\n            in={showNotificationBar && !shouldExpand}\n            timeout={transitionDuration.slower}\n          >\n            {state => (\n              <NotificationBar\n                count={remainingToasts.length}\n                onClick={expandToasts}\n                className={notificationBarTransitionStyles[state]}\n              />\n            )}\n          </Transition>\n        </div>\n      </div>\n    </Portal>\n  );\n};\n","import { TOAST_CONSTANTS } from '../../constants';\nimport { ToastProps } from '../../Toast.types';\nimport { ToastId, ToastStack } from '../../ToastContext';\n\n/**\n * Returns 2 arrays from the original toast stack.\n * `recentToasts`: The 3 most recent toasts, and\n * `remainingToasts`: the remaining N toasts\n *\n * @internal\n */\nexport function getDividedStack(stack: ToastStack): {\n  recentToasts: Array<[string, ToastProps]>;\n  remainingToasts: Array<[string, ToastProps]>;\n} {\n  return Array.from(stack).reduce(\n    (acc, toast, i) => {\n      if (\n        stack.size <= TOAST_CONSTANTS.shortStackCount ||\n        i >= stack.size - TOAST_CONSTANTS.shortStackCount\n      ) {\n        acc.recentToasts.push(toast);\n      } else {\n        acc.remainingToasts.push(toast);\n      }\n\n      return acc;\n    },\n    {\n      recentToasts: [] as Array<[ToastId, ToastProps]>,\n      remainingToasts: [] as Array<[ToastId, ToastProps]>,\n    },\n  );\n}\n","import { useCallback, useMemo, useState } from 'react';\nimport debounce from 'lodash/debounce';\n\nimport { spacing } from '@leafygreen-ui/tokens';\n\nimport { TOAST_CONSTANTS } from '../../constants';\nimport { ToastId, ToastStack } from '../../ToastContext';\n\ninterface UseToastHeightsProps {\n  stack: ToastStack;\n  getToastRef: (key?: string) => undefined | React.RefObject<HTMLDivElement>;\n  shouldExpand: boolean;\n}\n\nexport type ToastHeightRecord = Record<ToastId, number>;\ninterface UseToastHeightsReturnVal {\n  /**\n   * The vertical height of each toast in the stack\n   */\n  toastHeights: ToastHeightRecord;\n\n  /**\n   * The height of all toasts, including gaps\n   */\n  totalStackHeight: number;\n\n  /**\n   * Calculates the height from the bottom of the stack to the top of the given index\n   */\n  calcHeightForIndex: (stopIndex: number, isExpanded?: boolean) => number;\n\n  /**\n   * Re-calculates the heights of all toasts\n   */\n  updateToastHeights: () => void;\n}\n\n/**\n * Computes the height of each individual toast in the DOM\n * Returns {@link UseToastHeightsReturnVal} given {@link UseToastHeightsProps}\n *\n * @internal\n */\nexport function useToastHeights({\n  stack,\n  getToastRef,\n  shouldExpand,\n}: UseToastHeightsProps): UseToastHeightsReturnVal {\n  /**\n   * Keep track of all the toasts' heights\n   * so we know how to absolutely position the rest of them\n   */\n  const calcToastHeights = useCallback((): ToastHeightRecord => {\n    return Array.from(stack)\n      .reverse() // reversing since the stack is oldest-first\n      .reduce((record, [id]) => {\n        const toastRef = getToastRef(id);\n        let height = 0;\n\n        if (toastRef?.current && toastRef.current.firstElementChild) {\n          const contentHeight = toastRef.current.firstElementChild.clientHeight;\n          const paddingHeight = spacing[2] * 2;\n\n          const renderedHeight = toastRef.current.clientHeight;\n          const borderHeight = 2;\n\n          // Since we restrict toast heights when they're collapsed,\n          // but we also set a min-heigh for short toasts,\n          // the true expanded height of a toast is the larger of\n          // rendered height, or content + padding\n          height = Math.max(\n            contentHeight + paddingHeight,\n            renderedHeight + borderHeight,\n          );\n        }\n\n        record[id] = height;\n        return record;\n      }, {} as ToastHeightRecord);\n  }, [getToastRef, stack]);\n\n  /**\n   * Keep track of the vertical height of each toast in the stack, so we know how to render them all\n   */\n  const [toastHeights, setToastHeights] = useState<ToastHeightRecord>(\n    calcToastHeights(),\n  );\n\n  /**\n   * Calculates the combined heights of all toasts up to `stopIndex`\n   *\n   * @param stopIndex Stop counting the height at this toast index\n   * @param isExpanded Whether the stack is expanded (determines whether to count all toasts, or just the top 3)\n   */\n  const calcHeightForIndex = useCallback(\n    (stopIndex: number, isExpanded?: boolean): number => {\n      if (stack.size <= 0) return 0;\n\n      let totalHeight = 0;\n\n      for (let index = 0; index < stack.size; index++) {\n        const [id] = Array.from(stack).reverse()[index]; // reverse since stack is bottom-up\n\n        if (index > stopIndex) {\n          if (isExpanded || index < TOAST_CONSTANTS.shortStackCount) {\n            totalHeight += toastHeights[id] + TOAST_CONSTANTS.gap;\n          }\n        }\n      }\n\n      return totalHeight;\n    },\n    [stack, toastHeights],\n  );\n\n  const totalStackHeight = useMemo(\n    () => calcHeightForIndex(-1, shouldExpand),\n    [calcHeightForIndex, shouldExpand],\n  );\n\n  const _updateToastHeights = useCallback(() => {\n    setToastHeights(calcToastHeights());\n  }, [calcToastHeights]);\n\n  const updateToastHeights = useMemo(\n    () => debounce(_updateToastHeights, 100),\n    [_updateToastHeights],\n  );\n\n  return {\n    toastHeights,\n    totalStackHeight,\n    calcHeightForIndex,\n    updateToastHeights,\n  };\n}\n","import React from 'react';\n\nimport { ToastContextProps } from './ToastContext.types';\n\nconst initialToastContextValue = {\n  pushToast: () => '',\n  popToast: () => undefined,\n  updateToast: () => undefined,\n  getToast: () => undefined,\n  getStack: () => undefined,\n  clearStack: () => {},\n};\n\nexport const ToastContext = React.createContext<ToastContextProps>(\n  initialToastContextValue,\n);\n","import { ToastProps } from '../Toast.types';\n\n/**\n * The type of Toast ids\n */\nexport type ToastId = string;\n\nexport type ToastStack = Map<ToastId, ToastProps>;\n\nexport interface ToastWithId extends ToastProps {\n  id: ToastId;\n}\nexport interface ToastContextProps {\n  pushToast: (payload: ToastProps) => ToastId;\n  popToast: (payload: ToastId) => ToastProps | undefined;\n  updateToast: (\n    id: ToastId,\n    props: Partial<ToastProps>,\n  ) => ToastProps | undefined;\n  getToast: (id: ToastId) => ToastProps | undefined;\n  getStack: () => ToastStack | undefined;\n  clearStack: () => void;\n}\n\n/**\n * Actions available on the toast reducer\n */\nexport enum ToastReducerActionType {\n  Push = 'push',\n  Pop = 'pop',\n  Update = 'update',\n  Clear = 'clear',\n}\n\n/**\n * A union combining action types with their respective payloads\n */\nexport type ToastReducerAction =\n  | {\n      type: ToastReducerActionType.Push;\n      payload: ToastWithId;\n    }\n  | {\n      type: ToastReducerActionType.Pop;\n      payload: ToastId;\n    }\n  | {\n      type: ToastReducerActionType.Update;\n      payload: {\n        id: ToastId;\n        props: Partial<ToastProps>;\n      };\n    }\n  | {\n      type: ToastReducerActionType.Clear;\n    };\n\nexport interface ToastReducerState {\n  stack: ToastStack;\n}\n\nexport interface ToastProviderProps {\n  /**\n   * The initial toasts in the stack.\n   */\n  initialValue?: ToastStack;\n\n  /**\n   * Class name applied to the containing Portal component\n   */\n  portalClassName?: string;\n}\n","import { ToastProps } from '../../Toast.types';\nimport { ToastStack, ToastWithId } from '../ToastContext.types';\n\nimport { generateToastId } from './generateToastId';\n\n/**\n * Adds a generated `id` prop to toast props\n * @internal\n */\nexport function makeToast(props: ToastProps): ToastWithId {\n  const id = generateToastId();\n\n  return {\n    id,\n    ...props,\n  } as ToastWithId;\n}\n\n/**\n * Converts an array of toasts into a toast stack\n * @internal\n */\nexport function makeToastStack(toasts: Array<ToastWithId>): ToastStack {\n  const stack: ToastStack = new Map();\n\n  toasts.forEach(toast => {\n    const { id, ...props } = toast;\n    stack.set(id, props);\n  });\n\n  return stack;\n}\n","import { ToastId, ToastStack } from '../ToastContext.types';\n\n/**\n * Generates a pseudo-random unique toast id\n *\n * Guaranteed to be unique to all toasts in the stack.\n * (Note: There's a possibility that an `id` _could_ be reused after a toast has been popped from the stack)\n *\n * @internal\n */\nexport const generateToastId = (map?: ToastStack): ToastId => {\n  let id: ToastId;\n\n  do {\n    id = 'toast-' + (Math.random() * 10_000).toFixed(0).padStart(4, '0');\n  } while (map?.has(id));\n\n  return id;\n};\n","import { Reducer, useCallback, useMemo, useReducer } from 'react';\n\nimport { defaultToastProps } from '../../InternalToast/defaultProps';\nimport { ToastProps } from '../../Toast.types';\nimport {\n  ToastContextProps,\n  ToastId,\n  ToastReducerAction,\n  ToastReducerActionType,\n  ToastReducerState,\n  ToastStack,\n} from '../ToastContext.types';\nimport { makeToast } from '../utils/makeToast';\n\n/**\n *\n * The reducer function\n *\n * @param state The current reducer state\n * @param action The action type and payload\n *\n * @internal\n */\nconst toastReducer = (\n  state: ToastReducerState,\n  action: ToastReducerAction,\n): ToastReducerState => {\n  switch (action.type) {\n    case ToastReducerActionType.Push: {\n      const { stack } = state;\n      const { id, ...toast } = action.payload;\n      return {\n        stack: stack.set(id, { ...defaultToastProps, ...toast }),\n      };\n    }\n\n    case ToastReducerActionType.Pop: {\n      const { stack } = state;\n      const id = action.payload;\n      const poppedToast = stack.get(id);\n\n      if (poppedToast) {\n        stack.delete(id);\n      }\n\n      return { stack };\n    }\n\n    case ToastReducerActionType.Update: {\n      const { stack } = state;\n      const { id, props } = action.payload;\n      const updatedToast = stack.get(id);\n\n      if (updatedToast) {\n        stack.set(id, { ...updatedToast, ...props });\n      }\n\n      return { stack };\n    }\n\n    case ToastReducerActionType.Clear: {\n      const { stack } = state;\n      stack.clear();\n      return { stack };\n    }\n  }\n};\n\n/**\n * An abstraction of `useReducer` for the toast context\n *\n * @internal\n */\nexport const useToastReducer = (initialValue?: ToastStack) => {\n  const [{ stack }, dispatch] = useReducer<\n    Reducer<ToastReducerState, ToastReducerAction>\n  >(toastReducer, {\n    stack: initialValue ?? (new Map<ToastId, ToastProps>() as ToastStack),\n  });\n\n  const pushToast: ToastContextProps['pushToast'] = useCallback(\n    (props: ToastProps) => {\n      const toast = makeToast(props);\n\n      dispatch({\n        type: ToastReducerActionType.Push,\n        payload: toast,\n      });\n\n      return toast.id;\n    },\n    [],\n  );\n\n  const getToast: ToastContextProps['getToast'] = useCallback(\n    (id: ToastId) => stack.get(id),\n    [stack],\n  );\n\n  const popToast: ToastContextProps['popToast'] = useCallback(\n    (id: ToastId) => {\n      const toastProps = getToast(id);\n\n      dispatch({\n        type: ToastReducerActionType.Pop,\n        payload: id,\n      });\n\n      return toastProps;\n    },\n    [getToast],\n  );\n\n  const updateToast: ToastContextProps['updateToast'] = useCallback(\n    (id: ToastId, props: Partial<ToastProps>) => {\n      const action: ToastReducerAction = {\n        type: ToastReducerActionType.Update,\n        payload: {\n          id,\n          props,\n        },\n      };\n\n      dispatch(action);\n\n      // `getToast` will return the previous toast value,\n      // so we need to apply the state change manually\n      // in order to return the updated value\n      const { stack: newStack } = toastReducer({ stack }, action);\n      const updatedToast = newStack.get(id);\n\n      return updatedToast;\n    },\n    [stack],\n  );\n\n  const clearStack: ToastContextProps['clearStack'] = useCallback(() => {\n    dispatch({\n      type: ToastReducerActionType.Clear,\n    });\n  }, []);\n\n  return useMemo(() => {\n    return {\n      pushToast,\n      popToast,\n      updateToast,\n      getToast,\n      clearStack,\n      stack,\n    };\n  }, [pushToast, popToast, updateToast, stack, getToast, clearStack]);\n};\n","import React, { useCallback, useMemo } from 'react';\n\nimport { ToastContainer } from '../../ToastContainer';\nimport { ToastContext } from '../ToastContext';\nimport { ToastProviderProps } from '../ToastContext.types';\nimport { useToastReducer } from '../ToastReducer';\n\n/**\n * Toast Provider\n */\nexport const ToastProvider = ({\n  children,\n  initialValue,\n  portalClassName,\n}: React.PropsWithChildren<ToastProviderProps>) => {\n  const { stack, ...toastFns } = useToastReducer(initialValue);\n\n  const getStack = useCallback(() => stack, [stack]);\n\n  const value = useMemo(() => {\n    return { ...toastFns, getStack };\n  }, [toastFns, getStack]);\n\n  return (\n    <ToastContext.Provider value={value}>\n      {children}\n      <ToastContainer stack={stack} portalClassName={portalClassName} />\n    </ToastContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport isUndefined from 'lodash/isUndefined';\n\nimport { ToastContext } from '../ToastContext';\nimport { ToastContextProps } from '../ToastContext.types';\n\n/**\n * Returns Toast utilities\n *\n */\nexport const useToast = (): ToastContextProps => {\n  const context = useContext(ToastContext);\n  const hasProvider = !isUndefined(context.getStack());\n\n  if (!hasProvider) {\n    console.warn(\n      '`useToast` hook must be used within a `ToastProvider` context',\n    );\n  }\n\n  return context;\n};\n","import { useEffect, useRef } from 'react';\nimport defaultsDeep from 'lodash/defaultsDeep';\n\nimport { defaultToastProps } from '../InternalToast/defaultProps';\nimport { ToastId, useToast } from '../ToastContext';\n\nimport { ControlledToastProps } from './ControlledToast.types';\nimport useStableControlledToastProps from './useStableControlledToastProps';\n\n/**\n * A controlled toast component.\n *\n * To use this component, you must manage the `open` state yourself.\n *\n * It's recommended to use the hook `useToast` instead\n */\nexport const ControlledToast = ({ open, ...props }: ControlledToastProps) => {\n  props = defaultsDeep(props, defaultToastProps);\n  const { pushToast, popToast, updateToast } = useToast();\n  const toastIdRef = useRef<ToastId | null>(null);\n\n  const stableProps = useStableControlledToastProps(props);\n\n  useEffect(() => {\n    const toastId = toastIdRef.current;\n\n    if (open) {\n      if (toastId == null) {\n        toastIdRef.current = pushToast({ isControlled: true, ...stableProps });\n      } else {\n        updateToast(toastId, stableProps);\n      }\n    } else if (!open && toastId) {\n      popToast(toastId);\n      toastIdRef.current = null;\n    }\n  }, [open, popToast, pushToast, updateToast, stableProps]);\n\n  useEffect(() => {\n    return () => {\n      // Remove toast on unmount\n      if (toastIdRef.current != null) {\n        popToast(toastIdRef.current);\n      }\n    };\n  }, [popToast]);\n\n  return null;\n};\n","import { useCallback, useRef } from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport { ControlledToastProps } from './ControlledToast.types';\n\nexport default function useStableControlledToastProps(\n  props: Omit<ControlledToastProps, 'open'>,\n) {\n  // onClose is the only function prop, so handle it separately here\n  // NOTE: Any functions inside props in the toast's title or description can still theoretically cause a render loop\n  // unless they use useCallback\n  const onCloseRef = useRef(props.onClose);\n  onCloseRef.current = props.onClose;\n\n  // A function that maintains a consistent identity and always calls the most recent version of the prop\n  const stableOnClose = useCallback<\n    NonNullable<ControlledToastProps['onClose']>\n  >((...args) => onCloseRef.current?.(...args), []);\n\n  const propsWithStableOnClose = {\n    ...props,\n    onClose: stableOnClose,\n  };\n\n  const lastPropsRef = useRef<Omit<ControlledToastProps, 'open'> | null>(null);\n  const lastProps = lastPropsRef.current;\n  const stableProps =\n    lastProps != null && isEqual(propsWithStableOnClose, lastProps)\n      ? lastProps\n      : propsWithStableOnClose;\n  lastPropsRef.current = stableProps;\n\n  return stableProps;\n}\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","_templateObject17","_templateObject18","_templateObject19","_templateObject20","_templateObject21","_templateObject22","_templateObject23","_templateObject24","_templateObject25","_templateObject26","Variant","Success","Note","Warning","Important","Progress","defaultToastProps","variant","progress","timeout","dismissible","TOAST_CONSTANTS","toastBGColor","_defineProperty","Theme","Light","palette","black","Dark","gray","light2","baseToastStyle","css","_taggedTemplateLiteral","spacing","fontFamilies","default","typeScales","body1","fontSize","lineHeight","transparentize","transitionDuration","anchorClassName","fontWeights","bold","toastThemeStyles","dark2","light3","light1","dark3","contentWrapperStyle","contentVisibleStyles","baseIconStyle","textContentStyle","titleStyle","titleThemeStyle","white","descriptionStyle","descriptionThemeStyle","dismissButtonStyle","dismissButtonThemeStyle","base","variantIconStyle","green","dark1","blue","red","yellow","progressBarBackgroundStyle","progressBarBackgroundThemeStyle","backgroundShimmer","keyframes","progressBarStyle","slower","progressBarThemeStyle","ToastProgressBar","_ref","theme","normalizedProgress","clamp","React","createElement","className","cx","role","displayName","propTypes","PropTypes","number","variantIcons","CheckmarkWithCircleIcon","InfoWithCircle","WarningIcon","ImportantWithCircleIcon","RefreshIcon","_excluded","InternalToast","forwardRef","forwardedRef","id","title","description","onClose","actionElement","_ref$index","index","isHovered","isControlled","variantProp","progressProp","dismissibleProp","darkModeProp","darkMode","rest","_objectWithoutProperties","_defaults","defaults","console","warn","concat","_useDarkMode","useDarkMode","showContent","VariantIcon","iconThemeStyle","LeafyGreenProvider","_extends","ref","size","Body","IconButton","onClick","XIcon","ProgressBar","oneOfType","element","string","isRequired","oneOf","Object","values","func","bool","notificationBarStyles","notificationBarThemeStyles","notificationBarTransitionStyles","entered","entering","exited","exiting","NotificationBar","count","DEBUG","portalStyles","toastContainerStyles","toastContainerVisibleStyles","getContainerStatefulStyles","recentToastsLength","topToastHeight","getContainerInteractedStyles","_ref2","totalStackHeight","height","bottomOffset","containerExpandedStyles","containerCollapsingStyles","scrollContainerStyles","scrollContainerExpandedStyles","scrollContainerTransitionOutStyles","getToastTransitionStyles","_ref3","state","y","z","bgColor","mix","getToastUnhoveredStyles","_ref4","getToastHoverStyles","_ref5","positionY","transitionDebounceTime","debouncedTimeout","cb","debounce","setTimeout","toastPortalClassName","createUniqueClassName","ToastContainer","_Array$from$reverse$","stack","portalClassName","_useToast","useToast","popToast","getToast","regionId","useIdAllocator","toastContainerRef","useRef","scrollContainerRef","getToastRef","useDynamicRefs","prefix","_useState2","_slicedToArray","useState","setHoveredState","setHovered","setUnhovered","_useStateRef2","useStateRef","shouldExpand","setShouldExpand","getShouldExpand","expandToasts","collapseToasts","doesStackExist","_getDividedStack","Array","from","reduce","acc","toast","i","recentToasts","push","remainingToasts","getDividedStack","displayedToasts","_toConsumableArray","showNotificationBar","length","notificationBarSpacing","_useToastHeights","calcToastHeights","useCallback","reverse","record","toastRef","current","firstElementChild","contentHeight","clientHeight","paddingHeight","renderedHeight","Math","max","toastHeights","setToastHeights","calcHeightForIndex","stopIndex","isExpanded","totalHeight","useMemo","_updateToastHeights","updateToastHeights","useToastHeights","useEffect","topToastId","useMutationObserver","childList","attributes","subtree","_useToastTransitions","exitCallback","enterCallback","setIsExpanded","handleTransitionEnter","handleTransitionExit","useToastTransitions","scrollTop","_isHovered","matches","handleTransitionEntering","handleTransitionExiting","useBackdropClick","handleCloseEventForToastId","e","_toast$onClose","call","createSyntheticEvent","Event","callback","timers","Map","stackSize","setTimer","has","_timerId","set","startTimers","forEach","clearAllTimers","timerId","toastId","clearTimeout","delete","useToastTimers","Portal","onFocus","onBlur","onKeyDown","key","keyMap","Escape","onMouseEnter","onMouseLeave","TransitionGroup","enter","exit","component","map","_ref3$","toastProps","getHandlerForId","Transition","onEntering","onEntered","onExiting","onExited","in","initialToastContextValue","pushToast","updateToast","getStack","clearStack","ToastContext","createContext","ToastReducerActionType","makeToast","props","_objectSpread","random","toFixed","padStart","generateToastId","toastReducer","action","type","Push","_action$payload","payload","Pop","_stack","_id","get","Update","_stack2","_action$payload2","_id2","updatedToast","Clear","_stack3","clear","ToastProvider","children","initialValue","_useToastReducer","_useReducer2","useReducer","dispatch","useToastReducer","toastFns","value","Provider","context","useContext","isUndefined","ControlledToast","open","defaultsDeep","toastIdRef","stableProps","onCloseRef","stableOnClose","_onCloseRef$current","_len","arguments","args","_key","apply","propsWithStableOnClose","lastPropsRef","lastProps","isEqual","useStableControlledToastProps"],"mappings":"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"}