/// <reference types="react" />
interface UseToastTransitionsProps {
    getShouldExpand: () => boolean;
    /** Callback called once the task queue is empty after the transition has entered */
    enterCallback: () => void;
    /** Callback called once the task queue is empty after the transition has exited */
    exitCallback: () => void;
}
interface UseToastTransitionsReturnVal {
    isExpanded: boolean;
    setIsExpanded: React.Dispatch<boolean>;
    handleTransitionExit: () => void;
    handleTransitionEnter: () => void;
}
/**
 * Hook to handle enter and exit transitions.
 * Returns {@link UseToastTransitionsReturnVal}
 *
 * @internal
 */
export declare function useToastTransitions({ getShouldExpand, exitCallback, enterCallback, }: UseToastTransitionsProps): UseToastTransitionsReturnVal;
export {};
//# sourceMappingURL=useToastTransitions.d.ts.map