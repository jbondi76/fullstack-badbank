/// <reference types="react" />
import { ToastId, ToastStack } from '../../ToastContext';
interface UseToastHeightsProps {
    stack: ToastStack;
    getToastRef: (key?: string) => undefined | React.RefObject<HTMLDivElement>;
    shouldExpand: boolean;
}
export type ToastHeightRecord = Record<ToastId, number>;
interface UseToastHeightsReturnVal {
    /**
     * The vertical height of each toast in the stack
     */
    toastHeights: ToastHeightRecord;
    /**
     * The height of all toasts, including gaps
     */
    totalStackHeight: number;
    /**
     * Calculates the height from the bottom of the stack to the top of the given index
     */
    calcHeightForIndex: (stopIndex: number, isExpanded?: boolean) => number;
    /**
     * Re-calculates the heights of all toasts
     */
    updateToastHeights: () => void;
}
/**
 * Computes the height of each individual toast in the DOM
 * Returns {@link UseToastHeightsReturnVal} given {@link UseToastHeightsProps}
 *
 * @internal
 */
export declare function useToastHeights({ stack, getToastRef, shouldExpand, }: UseToastHeightsProps): UseToastHeightsReturnVal;
export {};
//# sourceMappingURL=useToastHeights.d.ts.map