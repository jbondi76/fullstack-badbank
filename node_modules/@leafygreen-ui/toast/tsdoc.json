[
  {
    "tags": {},
    "description": "A controlled toast component.\n\nTo use this component, you must manage the `open` state yourself.\n\nIt's recommended to use the hook `useToast` instead",
    "methods": [],
    "displayName": "ControlledToast",
    "props": {
      "ControlledToastProps": {
        "open": {
          "name": "open",
          "defaultValue": {
            "value": "false"
          },
          "description": "Required boolean that renders the Toast and makes it visible when true.\n\nNote: open is not a valid prop when rendering toasts programmatically",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "onClose": {
          "name": "onClose",
          "defaultValue": null,
          "description": "An event handler fired when the close button is clicked, or when the timeout has elapsed.\nHighly recommended when using a controlled Toast.\n\nWhen called via close button click, `event.type` will be `\"click\"`;\nWhen called via timeout, `event.type` will be `\"timeout\"`",
          "required": false,
          "type": {
            "name": "(event: ToastCloseEvent) => void"
          },
          "tags": {}
        }
      },
      "ToastProps": {
        "title": {
          "name": "title",
          "defaultValue": null,
          "description": "Primary text for the toast",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "description": {
          "name": "description",
          "defaultValue": null,
          "description": "Additional body text",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "actionElement": {
          "name": "actionElement",
          "defaultValue": null,
          "description": "Optional action button, or other element.\nOnly rendered if `variant === 'progress'`\n\nThis should be a shortcut onlyâ€”and not the _only_ way to perform the action.\n\nThe provided action element should have an `aria-description` attribute\nthat describes how to alternatively perform the action.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "variant": {
          "name": "variant",
          "defaultValue": {
            "value": "`note`"
          },
          "description": "Required style variant to render the Toast as.\n\nProgress variants will ignore the `timeout` prop",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Variant",
            "value": [
              {
                "value": "\"progress\""
              },
              {
                "value": "\"success\""
              },
              {
                "value": "\"note\""
              },
              {
                "value": "\"warning\""
              },
              {
                "value": "\"important\""
              }
            ]
          },
          "tags": {
            "default": "`note`"
          }
        },
        "progress": {
          "name": "progress",
          "defaultValue": null,
          "description": "Optional number between 0 and 1 that sets the progress bar's progress.\n\nNote: the progress bar is only rendered when the Toast variant is set to `'progress'`.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "timeout": {
          "name": "timeout",
          "defaultValue": {
            "value": "6_000"
          },
          "description": "Dismiss the Toast after `timeout` milliseconds\n\nIf timeout is `null | 0`, the Toast will never dismiss automatically.\n\nNote: Timeout timer will be paused when a user is interacting with a Toast",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {
            "default": "6_000"
          }
        },
        "dismissible": {
          "name": "dismissible",
          "defaultValue": {
            "value": "true"
          },
          "description": "Determines whether to render the close button.\n\nIf `timeout === null`, then `dismissible` is forced to `true`",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "true"
          }
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "DarkModeProps": {
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Renders the component with dark mode styles.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        }
      }
    }
  },
  {
    "tags": {},
    "description": "Toast Provider",
    "methods": [],
    "displayName": "ToastProvider",
    "props": {
      "ToastProviderProps": {
        "initialValue": {
          "name": "initialValue",
          "defaultValue": null,
          "description": "The initial toasts in the stack.",
          "required": false,
          "type": {
            "name": "ToastStack"
          },
          "tags": {}
        },
        "portalClassName": {
          "name": "portalClassName",
          "defaultValue": null,
          "description": "Class name applied to the containing Portal component",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  }
]