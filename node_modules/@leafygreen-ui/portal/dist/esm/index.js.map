{"version":3,"file":"index.js","sources":["../../src/Portal/Portal.tsx"],"sourcesContent":["import React, { MutableRefObject } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport { useIsomorphicLayoutEffect } from '@leafygreen-ui/hooks';\n\nimport { PortalProps } from './Portal.types';\n\nexport function usePortalContainer(\n  customContainer?: HTMLElement,\n  portalRef?: MutableRefObject<HTMLElement | null>,\n) {\n  // Make container initially undefined so that the portal is not created\n  // or rendered on initial render. This allows server-side rendering since:\n  //  - ReactDOMServer cannot render portals\n  //  - A component's initial hydrated render should match the server render\n  const [container, setContainer] = React.useState<HTMLElement | undefined>();\n\n  // if a `portalRef` is passed to portal component, wait to set the portalReference\n  // until after the initial render\n  useIsomorphicLayoutEffect(() => {\n    if (customContainer) {\n      if (portalRef) {\n        portalRef.current = customContainer;\n      }\n\n      setContainer(customContainer);\n\n      return;\n    }\n\n    const defaultContainer = document.createElement('div');\n    document.body.appendChild(defaultContainer);\n    if (portalRef) {\n      portalRef.current = defaultContainer;\n    }\n\n    setContainer(defaultContainer);\n\n    return () => {\n      defaultContainer.remove();\n    };\n  }, [customContainer, portalRef]);\n  return container;\n}\n\n/**\n * Portals transport their children to a div that is appended to the end of `document.body` to or a node that can be specified with a container prop.\n */\nfunction Portal({\n  children,\n  className,\n  container,\n  portalRef,\n}: PortalProps): React.ReactPortal | null {\n  const portalContainer = usePortalContainer(container ?? undefined, portalRef);\n\n  useIsomorphicLayoutEffect(() => {\n    if (portalContainer && !container) {\n      portalContainer.className = className ?? '';\n    }\n  }, [container, portalContainer, className]);\n\n  if (!portalContainer) {\n    return null;\n  }\n\n  return createPortal(children, portalContainer);\n}\n\nPortal.displayName = 'Portal';\n\nPortal.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  container: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n};\n\nexport default Portal;\n"],"names":["usePortalContainer","customContainer","portalRef","_React$useState2","_slicedToArray","React","useState","container","setContainer","useIsomorphicLayoutEffect","current","defaultContainer","document","createElement","body","appendChild","remove","Portal","_ref","children","className","portalContainer","undefined","createPortal","displayName","propTypes","PropTypes","node","string","oneOfType","object"],"mappings":"wrCAKO,SAASA,EAAmBC,EAAiBC,GAKlD,IACEC,EAAmBC,EADCC,EAAMC,WACyB,GACnDC,EAAYJ,EAAiB,GAC7BK,EAAeL,EAAiB,GAsBlC,OAlBAM,GAA0B,WACxB,GAAIR,EAKF,OAJIC,IACFA,EAAUQ,QAAUT,QAEtBO,EAAaP,GAGf,IAAIU,EAAmBC,SAASC,cAAc,OAM9C,OALAD,SAASE,KAAKC,YAAYJ,GACtBT,IACFA,EAAUQ,QAAUC,GAEtBH,EAAaG,GACN,WACLA,EAAiBK,QACvB,CACA,GAAK,CAACf,EAAiBC,IACdK,CACT,CAKA,SAASU,EAAOC,GACd,IAAIC,EAAWD,EAAKC,SAClBC,EAAYF,EAAKE,UACjBb,EAAYW,EAAKX,UACjBL,EAAYgB,EAAKhB,UACfmB,EAAkBrB,EAAmBO,QAA6CA,OAAYe,EAAWpB,GAM7G,OALAO,GAA0B,WACpBY,IAAoBd,IACtBc,EAAgBD,UAAYA,QAA6CA,EAAY,GAExF,GAAE,CAACb,EAAWc,EAAiBD,IAC3BC,EAGeE,EAAaJ,EAAUE,GAFlC,IAGX,CACAJ,EAAOO,YAAc,SACrBP,EAAOQ,UAAY,CACjBN,SAAUO,EAAUC,KACpBP,UAAWM,EAAUE,OACrBrB,UAAWmB,EAAUG,UAAU,CAACH,EAAUC,KAAMD,EAAUI"}