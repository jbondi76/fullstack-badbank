{"version":3,"file":"index.js","sources":["../src/Card/styles.ts","../src/Card/types.ts","../src/Card/Card.tsx"],"sourcesContent":["import { transparentize } from 'polished';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  focusRing,\n  fontFamilies,\n  transitionDuration,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\ninterface ColorSet {\n  containerStyle: string;\n  clickableStyle: string;\n}\n\nconst lightBaseBoxShadow = `0 4px 10px -4px ${transparentize(\n  0.7,\n  palette.black,\n)}`;\nconst lightHoverBoxShadow = `0 4px 20px -4px ${transparentize(\n  0.8,\n  palette.black,\n)}`;\nconst lightFocusBoxShadow = focusRing.light.default;\nconst darkBaseBoxShadow = `0 4px 20px -4px #01121A`;\nconst darkHoverBoxShadow = `0 4px 20px -4px ${transparentize(0.3, '#000000')}`;\nconst darkFocusBoxShadow = focusRing.dark.default;\n\nexport const colorSet: Record<Theme, ColorSet> = {\n  [Theme.Light]: {\n    containerStyle: css`\n      border: 1px solid ${palette.gray.light2};\n      box-shadow: ${lightBaseBoxShadow};\n      background-color: ${palette.white};\n      color: ${palette.gray.dark3};\n    `,\n    clickableStyle: css`\n      cursor: pointer;\n\n      &:focus {\n        outline: none;\n        box-shadow: ${lightFocusBoxShadow}, ${lightBaseBoxShadow};\n      }\n\n      &:hover,\n      &:active {\n        border: 1px solid ${palette.gray.light2};\n        box-shadow: ${lightHoverBoxShadow};\n\n        &:focus {\n          box-shadow: ${lightFocusBoxShadow}, ${lightHoverBoxShadow};\n        }\n      }\n    `,\n  },\n  [Theme.Dark]: {\n    containerStyle: css`\n      border: 1px solid ${palette.gray.dark2};\n      box-shadow: ${darkBaseBoxShadow};\n      background-color: ${palette.black};\n      color: ${palette.white};\n    `,\n    clickableStyle: css`\n      cursor: pointer;\n\n      &:focus {\n        outline: none;\n        box-shadow: ${darkBaseBoxShadow}, ${darkFocusBoxShadow};\n      }\n\n      &:hover {\n        box-shadow: ${darkHoverBoxShadow};\n\n        &:focus {\n          box-shadow: ${darkHoverBoxShadow}, ${darkFocusBoxShadow};\n        }\n      }\n    `,\n  },\n};\n\nexport const containerStyle = css`\n  position: relative;\n  transition: ${transitionDuration.default}ms ease-in-out;\n  transition-property: border, box-shadow;\n  border-radius: 24px;\n  font-family: ${fontFamilies.default};\n  font-size: ${typeScales.body1.fontSize}px;\n  line-height: ${typeScales.body1.lineHeight}px;\n  padding: 24px;\n  min-height: 68px; // 48px + 20px (padding + line-height)\n`;\n","import { DarkModeProps, HTMLElementProps } from '@leafygreen-ui/lib';\n\nexport const ContentStyle = {\n  None: 'none',\n  Clickable: 'clickable',\n} as const;\n\nexport type ContentStyle = (typeof ContentStyle)[keyof typeof ContentStyle];\n\nexport interface CardProps extends DarkModeProps, HTMLElementProps<'div'> {\n  /**\n   * Determines whether the Card should be styled as clickable.\n   *\n   * Defaults to `'clickable'` (when a valid `onClick` handler or `href` link is provided\n   *\n   * @default 'clickable' | 'none'\n   */\n  contentStyle?: ContentStyle;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box, { BoxProps } from '@leafygreen-ui/box';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { colorSet, containerStyle } from './styles';\nimport { CardProps, ContentStyle } from './types';\n\n/**\n * Cards are used to organize information into consumable chunks.\n */\nexport const Card = React.forwardRef(\n  (\n    {\n      className,\n      contentStyle,\n      darkMode: darkModeProp,\n      ...rest\n    }: BoxProps<'div', CardProps>,\n    forwardRef,\n  ) => {\n    if (\n      contentStyle === undefined &&\n      (('onClick' in rest && rest.onClick !== undefined) ||\n        ('href' in rest && !!rest.href))\n    ) {\n      contentStyle = ContentStyle.Clickable;\n    }\n\n    const { theme } = useDarkMode(darkModeProp);\n\n    return (\n      <Box\n        // @ts-expect-error\n        className={cx(\n          containerStyle,\n          colorSet[theme].containerStyle,\n          {\n            [colorSet[theme].clickableStyle]:\n              contentStyle === ContentStyle.Clickable,\n          },\n          className,\n        )}\n        ref={forwardRef}\n        {...rest}\n      />\n    );\n  },\n);\n\nCard.displayName = 'Card';\n\nCard.propTypes = {\n  className: PropTypes.string,\n  darkMode: PropTypes.bool,\n  contentStyle: PropTypes.oneOf(Object.values(ContentStyle)),\n};\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_colorSet","_templateObject5","lightBaseBoxShadow","concat","transparentize","palette","black","lightHoverBoxShadow","lightFocusBoxShadow","focusRing","light","default","darkBaseBoxShadow","darkHoverBoxShadow","darkFocusBoxShadow","dark","colorSet","_defineProperty","Theme","Light","containerStyle","css","_taggedTemplateLiteral","gray","light2","white","dark3","clickableStyle","Dark","dark2","transitionDuration","fontFamilies","typeScales","body1","fontSize","lineHeight","ContentStyle","None","Clickable","_excluded","Card","React","forwardRef","_ref","className","contentStyle","darkModeProp","darkMode","rest","_objectWithoutProperties","undefined","onClick","href","theme","useDarkMode","createElement","Box","_extends","cx","ref","displayName","propTypes","PropTypes","string","bool","oneOf","Object","values"],"mappings":"y+BAEIA,EAAiBC,EAAkBC,EAAkBC,EAAkBC,EAAWC,yqCAMtF,IAAIC,EAAqB,mBAAmBC,OAAOC,EAAAA,eAAe,GAAKC,EAAOA,QAACC,QAC3EC,EAAsB,mBAAmBJ,OAAOC,EAAAA,eAAe,GAAKC,EAAOA,QAACC,QAC5EE,EAAsBC,EAAAA,UAAUC,MAAMC,QACtCC,EAAoB,0BACpBC,EAAqB,mBAAmBV,OAAOC,EAAcA,eAAC,GAAK,YACnEU,EAAqBL,EAAAA,UAAUM,KAAKJ,QAC7BK,GAA4BC,EAAhBjB,EAAY,CAAE,EAA6BkB,EAAKA,MAACC,MAAO,CAC7EC,eAAgBC,EAAAA,IAAIzB,IAAoBA,EAAkB0B,EAAuB,CAAC,6BAA8B,wBAAyB,8BAA+B,mBAAoB,aAAcjB,EAAAA,QAAQkB,KAAKC,OAAQtB,EAAoBG,EAAOA,QAACoB,MAAOpB,EAAAA,QAAQkB,KAAKG,OAC/QC,eAAgBN,EAAAA,IAAIxB,IAAqBA,EAAmByB,EAAuB,CAAC,4FAA6F,KAAM,6EAA8E,0BAA2B,iDAAkD,KAAM,iCAAkCd,EAAqBN,EAAoBG,EAAAA,QAAQkB,KAAKC,OAAQjB,EAAqBC,EAAqBD,KACheU,EAAgBjB,EAAWkB,EAAAA,MAAMU,KAAM,CACzCR,eAAgBC,EAAAA,IAAIvB,IAAqBA,EAAmBwB,EAAuB,CAAC,6BAA8B,wBAAyB,8BAA+B,mBAAoB,aAAcjB,UAAQkB,KAAKM,MAAOjB,EAAmBP,UAAQC,MAAOD,EAAOA,QAACoB,OAC1QE,eAAgBN,EAAGA,IAACtB,IAAqBA,EAAmBuB,EAAuB,CAAC,4FAA6F,KAAM,sDAAuD,iDAAkD,KAAM,iCAAkCV,EAAmBE,EAAoBD,EAAoBA,EAAoBC,KACrZd,GACOoB,EAAiBC,EAAAA,IAAIpB,IAAqBA,EAAmBqB,EAAuB,CAAC,0CAA2C,uGAAwG,mBAAoB,uBAAwB,yFAA0FQ,qBAAmBnB,QAASoB,EAAYA,aAACpB,QAASqB,EAAAA,WAAWC,MAAMC,SAAUF,EAAAA,WAAWC,MAAME,YCrB5cC,EAAe,CACxBC,KAAM,OACNC,UAAW,aCCTC,EAAY,CAAC,YAAa,eAAgB,YAYnCC,EAAoBC,EAAAA,QAAMC,YAAW,SAAUC,EAAMD,GAC9D,IAAIE,EAAYD,EAAKC,UACnBC,EAAeF,EAAKE,aACpBC,EAAeH,EAAKI,SACpBC,EAAOC,EAAyBN,EAAMJ,QACnBW,IAAjBL,IAA+B,YAAaG,QAAyBE,IAAjBF,EAAKG,SAAyB,SAAUH,GAAUA,EAAKI,QAC7GP,EAAeT,EAAaE,WAE9B,IACEe,EADiBC,EAAWA,YAACR,GACRO,MACvB,OAAoBZ,EAAAA,QAAMc,cAAcC,EAAG7C,QAEzC8C,EAAS,CACTb,UAAWc,EAAEA,GAACtC,EAAgBJ,EAASqC,GAAOjC,eAAgBH,EAAgB,CAAA,EAAID,EAASqC,GAAO1B,eAAgBkB,IAAiBT,EAAaE,WAAYM,GAC5Je,IAAKjB,GACJM,GACL,IACAR,EAAKoB,YAAc,OACnBpB,EAAKqB,UAAY,CACfjB,UAAWkB,EAASnD,QAACoD,OACrBhB,SAAUe,EAASnD,QAACqD,KACpBnB,aAAciB,EAASnD,QAACsD,MAAMC,OAAOC,OAAO/B"}