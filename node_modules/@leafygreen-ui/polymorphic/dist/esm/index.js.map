{"version":3,"file":"index.js","sources":["../../src/InferredPolymorphic/InferredPolymorphic.ts","../../src/Polymorphic/Polymorphic.hooks.tsx","../../src/InferredPolymorphic/useInferredPolymorphic.ts","../../src/Polymorphic/Polymorph.tsx","../../src/Polymorphic/Polymorphic.ts"],"sourcesContent":["import React from 'react';\n\nimport { PolymorphicAs } from '../Polymorphic';\n\nimport {\n  InferredPolymorphicComponentType,\n  InferredPolymorphicRenderFunction,\n} from './InferredPolymorphic.types';\n\n/**\n * Inferred copy of the {@link Polymorphic} factory function.\n * Returns a polymorphic component that can infer the `as` prop as anchor based on a provided `href`\n *\n * For more, see {@link https://github.com/mongodb/leafygreen-ui/blob/main/packages/polymorphic/README.md | README.md}\n */\nexport const InferredPolymorphic = <\n  XP extends object = {},\n  DefaultAs extends PolymorphicAs = PolymorphicAs,\n>(\n  render: InferredPolymorphicRenderFunction<XP, DefaultAs>,\n  displayName?: string,\n): InferredPolymorphicComponentType<XP, DefaultAs> => {\n  let PolyComponent: InferredPolymorphicComponentType<XP, DefaultAs>;\n\n  if (render.length === 1) {\n    PolyComponent = render;\n  } else {\n    type PropTypes = Parameters<typeof render>[0];\n    type RefType = Parameters<typeof render>[1];\n    /// @ts-expect-error - types too complex. Return type is still computed correctly\n    PolyComponent = React.forwardRef<RefType, PropTypes>(render);\n  }\n\n  PolyComponent.displayName =\n    displayName ?? render.displayName ?? 'PolymorphicComponent';\n  return PolyComponent;\n};\n","import React from 'react';\n\nimport { PolymorphicAs, PolymorphicRef } from './Polymorphic.types';\n\n/**\n * A wrapper around `React.useRef`\n * that provides an accurately typed Ref object\n */\nexport const usePolymorphicRef = <E extends PolymorphicAs>(_?: E) => {\n  // By accepting a prop with a generic type, we can set the type E using JS vars.\n  // i.e. instead of calling `usePolymorphicRef<'div'>()`\n  // we can instead call `usePolymorphicRef('div')`\n\n  return React.useRef<\n    | (E extends keyof HTMLElementTagNameMap\n        ? HTMLElementTagNameMap[E]\n        : unknown)\n    | null\n  >(null);\n};\n\n/**\n * A hook that computes & returns the polymorphic ReactElement based on the `as` prop\n *\n * For client-side components, prefer using `usePolymorphic`, which returns a typed `ref` as well as the polymorphic component\n */\nexport function usePolymorphicComponent<T extends PolymorphicAs>(\n  as?: T,\n): React.ElementType {\n  return as || 'div';\n}\n\n/**\n * A hook that returns an accurately typed polymorphic `Component` and `ref`,\n * given an `as` prop\n */\nexport function usePolymorphic<T extends PolymorphicAs>(\n  as?: T,\n): {\n  Component: PolymorphicAs;\n  ref: PolymorphicRef<T>;\n} {\n  const Component = usePolymorphicComponent(as);\n  const ref = usePolymorphicRef(as);\n\n  return {\n    Component,\n    ref,\n  };\n}\n","import { usePolymorphic } from '../Polymorphic/Polymorphic.hooks';\nimport { PolymorphicAs } from '../Polymorphic/Polymorphic.types';\n\n/**\n * A hook that computes & returns the inferred polymorphic component based on the `as` prop, and any other props passed in.\n *\n * For client-side components, prefer using `useInferredPolymorphic`, which returns a typed `ref` as well as the polymorphic component\n */\nexport function useInferredPolymorphicComponent(\n  as?: PolymorphicAs,\n  rest?: { [key: string]: any },\n  defaultAs?: PolymorphicAs,\n): PolymorphicAs | undefined {\n  defaultAs = defaultAs ?? ('div' as PolymorphicAs);\n  return as ? as : typeof rest?.href === 'string' ? 'a' : defaultAs;\n}\n\n/**\n * A hook that returns a Component and `ref` based on the `as` prop passed in,\n * and any other props provided.\n *\n * The returned `Component` can be inferred by the additional props passed in.\n * (i.e. if no `as` prop is provided, but an `href` prop is defined, then `as` will\n * be inferred to be `a`\n */\nexport function useInferredPolymorphic(\n  as?: PolymorphicAs,\n  rest?: { [key: string]: any },\n  defaultAs?: PolymorphicAs,\n) {\n  as = useInferredPolymorphicComponent(as, rest, defaultAs);\n  return usePolymorphic(as);\n}\n","import React from 'react';\n\nimport { usePolymorphic } from './Polymorphic.hooks';\nimport {\n  PolymorphicAs,\n  PolymorphicComponentType,\n  PolymorphicPropsWithRef,\n  PolymorphicRef,\n} from './Polymorphic.types';\n\n/**\n * Base polymorphic component\n */\nexport const BasePolymorph = <T extends PolymorphicAs = 'div'>(\n  { as, children, ...rest }: PolymorphicPropsWithRef<T>,\n  ref: PolymorphicRef<T>,\n) => {\n  const { Component } = usePolymorphic(as);\n\n  return (\n    <Component {...rest} ref={ref}>\n      {children}\n    </Component>\n  );\n};\n\n/**\n * Polymorphic component that supports forwarded refs\n *\n * With the `as` prop, Polymorphic can dynamically render\n * as any HTML element or React Component.\n *\n * If the logic defining the `as` prop is defined internally within your component,\n * use this standalone `Polymorph` component.\n *\n * However: If you want to expose `as` as a prop of your component,\n * prefer the `{@link Polymorphic}` factory function and related hooks.\n */\nexport const Polymorph: PolymorphicComponentType =\n  React.forwardRef(BasePolymorph);\nPolymorph.displayName = 'Polymorph';\n","import { forwardRef } from 'react';\n\nimport {\n  PolymorphicAs,\n  PolymorphicComponentType,\n  PolymorphicRenderFunction,\n} from './Polymorphic.types';\n\n/**\n * Factory function that returns a polymorphic component.\n *\n * If you want to expose `as` as a prop of your component,\n * use this `Polymorphic` factory function and related hooks.\n *\n * However, if the logic defining the `as` prop is defined internally within your component,\n * use the standalone `Polymorph` component.\n *\n * For more, see {@link https://github.com/mongodb/leafygreen-ui/blob/main/packages/polymorphic/README.md | README.md}\n */\nexport const Polymorphic = <\n  XP extends object = {},\n  DefaultAs extends PolymorphicAs = PolymorphicAs,\n>(\n  render: PolymorphicRenderFunction<XP, DefaultAs>,\n  displayName?: string,\n): PolymorphicComponentType<XP, DefaultAs> => {\n  // Here we only know the additional props,\n  // but we don't know what `as` is, or what props to inherit\n  // (i.e. we don't know if `as=\"button\"`, and if `type` is a valid prop)\n\n  // If no `ref` arg was passed in, we use the plain render function\n  // Using ts-ignore instead of ts-expect-error since expect throws an unused expect TS error in a React 17 environment\n  // @ts-ignore FIXME: https://jira.mongodb.org/browse/LG-3410\n  const PolyComponent: PolymorphicComponentType<XP, DefaultAs> =\n    render.length === 1 ? render : forwardRef(render);\n\n  PolyComponent.displayName =\n    displayName ?? render.displayName ?? 'PolymorphicComponent';\n  return PolyComponent;\n};\n"],"names":["InferredPolymorphic","render","displayName","_ref","PolyComponent","length","React","forwardRef","usePolymorphicRef","_","useRef","usePolymorphicComponent","as","usePolymorphic","Component","ref","useInferredPolymorphicComponent","rest","defaultAs","_defaultAs","href","useInferredPolymorphic","_excluded","BasePolymorph","children","_objectWithoutProperties","createElement","_extends","Polymorph","Polymorphic"],"mappings":"sCAOU,IAACA,EAAsB,SAA6BC,EAAQC,GACpE,IAAIC,EACAC,EAQJ,OANEA,EADoB,IAAlBH,EAAOI,OACOJ,EAGaK,EAAMC,WAAWN,IAElCC,YAA6G,QAA9FC,EAAOD,QAAiDA,EAAcD,EAAOC,mBAAkC,IAATC,EAAkBA,EAAO,uBACrJC,CACT,ECbWI,EAAoB,SAA2BC,GAKxD,OAAOH,EAAMI,OAAO,KACtB,EAOO,SAASC,EAAwBC,GACtC,OAAOA,GAAM,KACf,CAMO,SAASC,EAAeD,GAG7B,MAAO,CACLE,UAHcH,EAAwBC,GAItCG,IAHQP,IAKZ,CC3BO,SAASQ,EAAgCJ,EAAIK,EAAMC,GACxD,IAAIC,EAEJ,OADAD,EAAyC,QAA5BC,EAAaD,SAAsC,IAAfC,EAAwBA,EAAa,MAC/EP,IAA6E,iBAA3DK,aAAmC,EAASA,EAAKG,MAAqB,IAAMF,EACvG,CAUO,SAASG,EAAuBT,EAAIK,EAAMC,GAE/C,OAAOL,EADPD,EAAKI,EAAgCJ,EAAIK,EAAMC,GAEjD,ylBCrBA,IAAII,EAAY,CAAC,KAAM,YAMZC,EAAgB,SAAuBpB,EAAMY,GACtD,IAAIH,EAAKT,EAAKS,GACZY,EAAWrB,EAAKqB,SAChBP,EAAOQ,EAAyBtB,EAAMmB,GAEtCR,EADoBD,EAAeD,GACPE,UAC9B,OAAoBR,EAAMoB,cAAcZ,EAAWa,EAAS,CAAA,EAAIV,EAAM,CACpEF,IAAKA,IACHS,EACN,EAcWI,EAAyBtB,EAAMC,WAAWgB,GACrDK,EAAU1B,YAAc,YCpBd,IAAC2B,EAAc,SAAqB5B,EAAQC,GACpD,IAAIC,EAQAC,EAAkC,IAAlBH,EAAOI,OAAeJ,EAAsBM,EAAWN,GAE3E,OADAG,EAAcF,YAA6G,QAA9FC,EAAOD,QAAiDA,EAAcD,EAAOC,mBAAkC,IAATC,EAAkBA,EAAO,uBACrJC,CACT"}