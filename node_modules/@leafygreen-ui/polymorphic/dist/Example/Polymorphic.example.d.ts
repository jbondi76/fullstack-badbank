import React from 'react';
import { PolymorphicAs, type PolymorphicComponentType, type PolymorphicPropsWithRef } from '..';
export interface ExampleProps {
    /** An arbitrary title */
    title?: string;
    /** Flag for dark mode */
    darkMode?: boolean;
}
/**
 * Uses `usePolymorphic` hook
 *
 * @example
 */
export declare const ExamplePolymorphic: PolymorphicComponentType<ExampleProps, PolymorphicAs>;
/**
 * @example
 */
export declare const ExamplePolymorphicWithRef: PolymorphicComponentType<ExampleProps, PolymorphicAs>;
/**
 * @example
 */
export declare const ExampleInferred: import("..").InferredPolymorphicComponentType<ExampleProps, PolymorphicAs>;
/**
 * @example
 */
export declare const ExampleInferredWithRef: import("..").InferredPolymorphicComponentType<ExampleProps, PolymorphicAs>;
/**
 * A test mocking the Button component
 * @example
 */
export declare const ExampleInferredDefaultButton: import("..").InferredPolymorphicComponentType<ExampleProps, "button">;
/**
 * Extends Polymorphic
 * @example
 */
export declare const AdvancedPolymorphic: PolymorphicComponentType<ExampleProps>;
export declare const AdvancedPolymorphicWithRef: PolymorphicComponentType<ExampleProps>;
/**
 * Ensure `as` types can be restricted
 * @example
 */
type RestrictedType = 'a' | 'button' | React.ComponentType<React.PropsWithChildren<unknown>>;
type RestrictedProps<T extends RestrictedType> = PolymorphicPropsWithRef<T, {
    title?: 'string';
}>;
/**
 * @example
 */
export declare const RestrictedExample: <T extends RestrictedType = "button">({ as, ...rest }: RestrictedProps<T>) => React.JSX.Element;
/**
 * Styled version of ExampleComponent
 * @example
 */
export declare const StyledExample: PolymorphicComponentType<{}, PolymorphicAs>;
export {};
//# sourceMappingURL=Polymorphic.example.d.ts.map